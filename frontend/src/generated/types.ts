import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type AboutUsOutput = {
  __typename?: 'AboutUsOutput';
  message?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type AddAdvCommentInput = {
  /** Email Address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Review. */
  message: Scalars['String']['input'];
  /** Nickname. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** Review ID. */
  review_id: Scalars['Int']['input'];
};

export type AddAdvCommentOutput = {
  __typename?: 'AddAdvCommentOutput';
  /** Commented Review. */
  review?: Maybe<Review>;
  /** Status. */
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type AddAdvProductReviewInput = {
  /** Review. */
  detail: Scalars['String']['input'];
  /** GDPR. */
  gdpr?: InputMaybe<Scalars['Boolean']['input']>;
  /** Email Address. */
  guest_email?: InputMaybe<Scalars['String']['input']>;
  /** Recommendation. */
  is_recommended?: InputMaybe<Scalars['Boolean']['input']>;
  /** Advantages. */
  like_about?: InputMaybe<Scalars['String']['input']>;
  /** Nickname. */
  nickname: Scalars['String']['input'];
  /** Disadvantages. */
  not_like_about?: InputMaybe<Scalars['String']['input']>;
  /** Product ID. */
  product_id: Scalars['Int']['input'];
  /** Rating in Json format. Rating ID => Rating Value */
  ratings: Scalars['String']['input'];
  /** Path to images location to save review images. */
  review_images: Array<InputMaybe<ReviewData>>;
  /** Summary. */
  title: Scalars['String']['input'];
};

export type AddAdvProductReviewOutput = {
  __typename?: 'AddAdvProductReviewOutput';
  /** Status. */
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type AddAdvReviewInput = {
  /** Review. */
  detail: Scalars['String']['input'];
  /** GDPR. */
  gdpr?: InputMaybe<Scalars['Boolean']['input']>;
  /** Email Address. */
  guest_email?: InputMaybe<Scalars['String']['input']>;
  /** Recommendation. */
  is_recommended?: InputMaybe<Scalars['Boolean']['input']>;
  /** Advantages. */
  like_about?: InputMaybe<Scalars['String']['input']>;
  /** Nickname. */
  nickname: Scalars['String']['input'];
  /** Disadvantages. */
  not_like_about?: InputMaybe<Scalars['String']['input']>;
  /** Product ID. */
  product_id: Scalars['Int']['input'];
  /** Rating in Json format. Rating ID => Rating Value */
  ratings: Scalars['String']['input'];
  /** Summary. */
  title: Scalars['String']['input'];
  /** Path to tmp images location to save review images. */
  tmp_images_path?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type AddAdvReviewOutput = {
  __typename?: 'AddAdvReviewOutput';
  /** Status. */
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type AddAdvVoteInput = {
  /** Review ID. */
  review_id: Scalars['Int']['input'];
  /** Nickname. */
  type: Scalars['String']['input'];
};

export type AddAdvVoteOutput = {
  __typename?: 'AddAdvVoteOutput';
  /** Commented Review. */
  review?: Maybe<Review>;
  /** Status. */
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Defines the bundle products to add to the cart. */
export type AddBundleProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String']['input'];
  /** An array of bundle products to add. */
  cart_items: Array<InputMaybe<BundleProductCartItemInput>>;
};

/** Contains details about the cart after adding bundle products. */
export type AddBundleProductsToCartOutput = {
  __typename?: 'AddBundleProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Defines the configurable products to add to the cart. */
export type AddConfigurableProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String']['input'];
  /** An array of configurable products to add. */
  cart_items: Array<InputMaybe<ConfigurableProductCartItemInput>>;
};

/** Contains details about the cart after adding configurable products. */
export type AddConfigurableProductsToCartOutput = {
  __typename?: 'AddConfigurableProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

export type AddDownloadableProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String']['input'];
  /** An array of downloadable products to add. */
  cart_items: Array<InputMaybe<DownloadableProductCartItemInput>>;
};

/** Contains details about the cart after adding downloadable products. */
export type AddDownloadableProductsToCartOutput = {
  __typename?: 'AddDownloadableProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Contains details about the cart after adding products to it. */
export type AddProductsToCartOutput = {
  __typename?: 'AddProductsToCartOutput';
  /** The cart after products have been added. */
  cart: Cart;
  /** Contains errors encountered while adding an item to the cart. */
  user_errors: Array<Maybe<CartUserInputError>>;
};

/** Contains products to add to an existing compare list. */
export type AddProductsToCompareListInput = {
  /** An array of product IDs to add to the compare list. */
  products: Array<InputMaybe<Scalars['ID']['input']>>;
  /** The unique identifier of the compare list to modify. */
  uid: Scalars['ID']['input'];
};

/** Contains the customer's wish list and any errors encountered. */
export type AddProductsToWishlistOutput = {
  __typename?: 'AddProductsToWishlistOutput';
  /** An array of errors encountered while adding products to a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully added. */
  wishlist: Wishlist;
};

/** Defines the simple and group products to add to the cart. */
export type AddSimpleProductsToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** An array of simple and group items to add. */
  cart_items: Array<InputMaybe<SimpleProductCartItemInput>>;
};

/** Contains details about the cart after adding simple or group products. */
export type AddSimpleProductsToCartOutput = {
  __typename?: 'AddSimpleProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Defines the virtual products to add to the cart. */
export type AddVirtualProductsToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** An array of virtual products to add. */
  cart_items: Array<InputMaybe<VirtualProductCartItemInput>>;
};

/** Contains details about the cart after adding virtual products. */
export type AddVirtualProductsToCartOutput = {
  __typename?: 'AddVirtualProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Contains the resultant wish list and any error information. */
export type AddWishlistItemsToCartOutput = {
  __typename?: 'AddWishlistItemsToCartOutput';
  /** An array of errors encountered while adding products to the customer's cart. */
  add_wishlist_items_to_cart_user_errors: Array<Maybe<WishlistCartUserInputError>>;
  /** Indicates whether the attempt to add items to the customer's cart was successful. */
  status: Scalars['Boolean']['output'];
  /** Contains the wish list with all items that were successfully added. */
  wishlist: Wishlist;
};

export type AdditionalConfig = {
  __typename?: 'AdditionalConfig';
  disable_split_token?: Maybe<Scalars['Boolean']['output']>;
  infix_search?: Maybe<Scalars['Boolean']['output']>;
  prefix_search?: Maybe<Scalars['Boolean']['output']>;
  stem_search?: Maybe<Scalars['Boolean']['output']>;
};

export type AdditionalInfo = {
  __typename?: 'AdditionalInfo';
  approval_status?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  company_name?: Maybe<Scalars['String']['output']>;
  customer_proof?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  licence_number?: Maybe<Scalars['String']['output']>;
  mobilenumber?: Maybe<Scalars['String']['output']>;
  profile_type?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** ViewRma defines the rma Information */
export type Address = {
  __typename?: 'Address';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  postcode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  street?: Maybe<Scalars['String']['output']>;
};

export type AddressInformationInput = {
  address?: InputMaybe<RewardCartAddressInput>;
  shipping_methods?: InputMaybe<RewardShippingMethodInput>;
};

/** Contains information for each filterable option (such as price, category `UID`, and custom attributes). */
export type Aggregation = {
  __typename?: 'Aggregation';
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String']['output'];
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']['output']>;
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']['output']>;
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>;
  /** The relative position of the attribute in a layered navigation block. */
  position?: Maybe<Scalars['Int']['output']>;
};

/** An implementation of `AggregationOptionInterface`. */
export type AggregationOption = AggregationOptionInterface & {
  __typename?: 'AggregationOption';
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']['output']>;
  /** The display label for an aggregation option. */
  label?: Maybe<Scalars['String']['output']>;
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']['output'];
};

/** Defines aggregation option fields. */
export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']['output']>;
  /** The display label for an aggregation option. */
  label?: Maybe<Scalars['String']['output']>;
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']['output'];
};

/** Filter category aggregations in layered navigation. */
export type AggregationsCategoryFilterInput = {
  /** Indicates whether to include only direct subcategories or all children categories at all levels. */
  includeDirectChildrenOnly?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An input object that specifies the filters used in product aggregations. */
export type AggregationsFilterInput = {
  /** Filter category aggregations in layered navigation. */
  category?: InputMaybe<AggregationsCategoryFilterInput>;
};

export type AmReviewSetting = {
  __typename?: 'AmReviewSetting';
  /** Available filter. */
  availableFilters?: Maybe<Array<Maybe<ReviewFilter>>>;
  /** Available orders. */
  availableOrders?: Maybe<Array<Maybe<ReviewOrder>>>;
  /** Сonsent Text. */
  getGDPRText?: Maybe<Scalars['String']['output']>;
  /** Review Image Width. */
  getReviewImageWidth?: Maybe<Scalars['String']['output']>;
  /** Allow answer. */
  isAllowAnswer?: Maybe<Scalars['Boolean']['output']>;
  /** Allow coupons. */
  isAllowCoupons?: Maybe<Scalars['Boolean']['output']>;
  /** Allow guest. */
  isAllowGuest?: Maybe<Scalars['Boolean']['output']>;
  /** Allow helpful. */
  isAllowHelpful?: Maybe<Scalars['Boolean']['output']>;
  /** Allow images. */
  isAllowImages?: Maybe<Scalars['Boolean']['output']>;
  /** Review Reminder. */
  isAllowReminder?: Maybe<Scalars['Boolean']['output']>;
  /** Comments Enabled. */
  isCommentsEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Sorting enabled. */
  isFilteringEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** GDPR Consent. */
  isGDPREnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Guest Can Comment. */
  isGuestCanComment?: Maybe<Scalars['Boolean']['output']>;
  /** Is Guest Email Showed. */
  isGuestEmailShow?: Maybe<Scalars['Boolean']['output']>;
  /** Is Images Required. */
  isImagesRequired?: Maybe<Scalars['Boolean']['output']>;
  /** Pros and Cons. */
  isProsConsEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Recomended field enable. */
  isRecommendFieldEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Reminder Enabled. */
  isReminderEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Sorting enabled. */
  isSortingEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Toolbar displayed. */
  isToolbarDisplayed?: Maybe<Scalars['Boolean']['output']>;
  /** Reviews Per Page. */
  perPage?: Maybe<Scalars['Int']['output']>;
  /** Available Ratings. */
  ratings?: Maybe<Array<Maybe<Rating>>>;
  /** Images to Show. */
  slidesToShow?: Maybe<Scalars['Int']['output']>;
};

export type AmReviewWidget = {
  __typename?: 'AmReviewWidget';
  /** Reviews from Current Category Only. */
  current_category?: Maybe<Scalars['Boolean']['output']>;
  /** Reviews of Products which belong to the Same Categories Only. */
  current_product_category?: Maybe<Scalars['Boolean']['output']>;
  /** Enable Slider. */
  enable_slider?: Maybe<Scalars['Boolean']['output']>;
  items?: Maybe<Array<Maybe<AmReviewWidgetItem>>>;
  /** Reviews Type. */
  review_type?: Maybe<Scalars['Int']['output']>;
  /** Number of Reviews to Show. */
  reviews_count?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type AmReviewWidgetItem = {
  __typename?: 'AmReviewWidgetItem';
  /** Date. */
  date?: Maybe<Scalars['String']['output']>;
  image?: Maybe<ProductImage>;
  /** Product Name. */
  name?: Maybe<Scalars['String']['output']>;
  /** Product URL. */
  productUrl?: Maybe<Scalars['String']['output']>;
  /** Rating votes. */
  rating_votes?: Maybe<Array<Maybe<RatingVote>>>;
  /** Recommended Html. */
  recommendedHtml?: Maybe<Scalars['String']['output']>;
  /** Review By. */
  reviewBy?: Maybe<Scalars['String']['output']>;
  /** Review Message. */
  reviewMessage?: Maybe<Scalars['String']['output']>;
};

export type ApplePayConfig = PaymentConfigItem & {
  __typename?: 'ApplePayConfig';
  /** The styles for the ApplePay Smart Button configuration */
  button_styles?: Maybe<ButtonStyles>;
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The payment source for the payment method */
  payment_source?: Maybe<Scalars['String']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

/** Apple Pay inputs */
export type ApplePayMethodInput = {
  /** The payment source for the payment method */
  payment_source?: InputMaybe<Scalars['String']['input']>;
  /** The payment services order ID */
  payments_order_id?: InputMaybe<Scalars['String']['input']>;
  /** PayPal order ID */
  paypal_order_id?: InputMaybe<Scalars['String']['input']>;
};

/** Contains the applied coupon code. */
export type AppliedCoupon = {
  __typename?: 'AppliedCoupon';
  /** The coupon code the shopper applied to the card. */
  code: Scalars['String']['output'];
};

/** Specifies the coupon code to apply to the cart. */
export type ApplyCouponToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** A valid coupon code. */
  coupon_code: Scalars['String']['input'];
};

/** Contains details about the cart after applying a coupon. */
export type ApplyCouponToCartOutput = {
  __typename?: 'ApplyCouponToCartOutput';
  /** The cart after applying a coupon. */
  cart: Cart;
};

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int']['input'];
  /** The country code where search must be performed. Required parameter together with region, city or postcode. */
  search_term: Scalars['String']['input'];
};

/** Contains the results of the request to assign a compare list. */
export type AssignCompareListToCustomerOutput = {
  __typename?: 'AssignCompareListToCustomerOutput';
  /** The contents of the customer's compare list. */
  compare_list?: Maybe<CompareList>;
  /** Indicates whether the compare list was successfully assigned to the customer. */
  result: Scalars['Boolean']['output'];
};

/** Contains details about the attribute, including the code and type. */
export type Attribute = {
  __typename?: 'Attribute';
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']['output']>;
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>;
  /** The data type of the attribute. */
  attribute_type?: Maybe<Scalars['String']['output']>;
  /** The type of entity that defines the attribute. */
  entity_type?: Maybe<Scalars['String']['output']>;
  /** The frontend input type of the attribute. */
  input_type?: Maybe<Scalars['String']['output']>;
  /** Details about the storefront properties configured for the attribute. */
  storefront_properties?: Maybe<StorefrontProperties>;
};

/** List of all entity types. Populated by the modules introducing EAV entities. */
export enum AttributeEntityTypeEnum {
  CatalogCategory = 'CATALOG_CATEGORY',
  CatalogProduct = 'CATALOG_PRODUCT',
  Customer = 'CUSTOMER',
  CustomerAddress = 'CUSTOMER_ADDRESS'
}

/** An input object that specifies the filters used for attributes. */
export type AttributeFilterInput = {
  /** Whether a product or category attribute can be compared against another or not. */
  is_comparable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute can be filtered or not. */
  is_filterable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute can be filtered in search or not. */
  is_filterable_in_search?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute can use HTML on front or not. */
  is_html_allowed_on_front?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute can be searched or not. */
  is_searchable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute can be used for price rules or not. */
  is_used_for_price_rules?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute is used for promo rules or not. */
  is_used_for_promo_rules?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute is visible in advanced search or not. */
  is_visible_in_advanced_search?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute is visible on front or not. */
  is_visible_on_front?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute has WYSIWYG enabled or not. */
  is_wysiwyg_enabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether a product or category attribute is used in product listing or not. */
  used_in_product_listing?: InputMaybe<Scalars['Boolean']['input']>;
};

/** EAV attribute frontend input types. */
export enum AttributeFrontendInputEnum {
  Boolean = 'BOOLEAN',
  Date = 'DATE',
  Datetime = 'DATETIME',
  File = 'FILE',
  Gallery = 'GALLERY',
  Hidden = 'HIDDEN',
  Image = 'IMAGE',
  MediaImage = 'MEDIA_IMAGE',
  Multiline = 'MULTILINE',
  Multiselect = 'MULTISELECT',
  Price = 'PRICE',
  Select = 'SELECT',
  Text = 'TEXT',
  Textarea = 'TEXTAREA',
  Undefined = 'UNDEFINED',
  Weight = 'WEIGHT'
}

/** Defines the attribute characteristics to search for the `attribute_code` and `entity_type` to search. */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: InputMaybe<Scalars['String']['input']>;
  /** The type of entity that defines the attribute. */
  entity_type?: InputMaybe<Scalars['String']['input']>;
};

/** Specifies selected option for a select or multiselect attribute value. */
export type AttributeInputSelectedOption = {
  /** The attribute option value. */
  value: Scalars['String']['input'];
};

/** Base EAV implementation of CustomAttributeMetadataInterface. */
export type AttributeMetadata = CustomAttributeMetadataInterface & {
  __typename?: 'AttributeMetadata';
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  code: Scalars['ID']['output'];
  /** Default attribute value. */
  default_value?: Maybe<Scalars['String']['output']>;
  /** The type of entity that defines the attribute. */
  entity_type: AttributeEntityTypeEnum;
  /** The frontend class of the attribute. */
  frontend_class?: Maybe<Scalars['String']['output']>;
  /** The frontend input type of the attribute. */
  frontend_input?: Maybe<AttributeFrontendInputEnum>;
  /** Whether the attribute value is required. */
  is_required: Scalars['Boolean']['output'];
  /** Whether the attribute value must be unique. */
  is_unique: Scalars['Boolean']['output'];
  /** The label assigned to the attribute. */
  label?: Maybe<Scalars['String']['output']>;
  /** Attribute options. */
  options: Array<Maybe<CustomAttributeOptionInterface>>;
};

/** Attribute metadata retrieval error. */
export type AttributeMetadataError = {
  __typename?: 'AttributeMetadataError';
  /** Attribute metadata retrieval error message. */
  message: Scalars['String']['output'];
  /** Attribute metadata retrieval error type. */
  type: AttributeMetadataErrorType;
};

/** Attribute metadata retrieval error types. */
export enum AttributeMetadataErrorType {
  /** The requested attribute was not found. */
  AttributeNotFound = 'ATTRIBUTE_NOT_FOUND',
  /** The requested entity was not found. */
  EntityNotFound = 'ENTITY_NOT_FOUND',
  /** The filter cannot be applied as it does not belong to the entity */
  FilterNotFound = 'FILTER_NOT_FOUND',
  /** Not categorized error, see the error message. */
  Undefined = 'UNDEFINED'
}

/** Defines an attribute option. */
export type AttributeOption = {
  __typename?: 'AttributeOption';
  /** The label assigned to the attribute option. */
  label?: Maybe<Scalars['String']['output']>;
  /** The attribute option value. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Base EAV implementation of CustomAttributeOptionInterface. */
export type AttributeOptionMetadata = CustomAttributeOptionInterface & {
  __typename?: 'AttributeOptionMetadata';
  /** Is the option value default. */
  is_default: Scalars['Boolean']['output'];
  /** The label assigned to the attribute option. */
  label: Scalars['String']['output'];
  /** The attribute option value. */
  value: Scalars['String']['output'];
};

export type AttributeSelectedOption = AttributeSelectedOptionInterface & {
  __typename?: 'AttributeSelectedOption';
  /** The attribute selected option label. */
  label: Scalars['String']['output'];
  /** The attribute selected option value. */
  value: Scalars['String']['output'];
};

export type AttributeSelectedOptionInterface = {
  /** The attribute selected option label. */
  label: Scalars['String']['output'];
  /** The attribute selected option value. */
  value: Scalars['String']['output'];
};

export type AttributeSelectedOptions = AttributeValueInterface & {
  __typename?: 'AttributeSelectedOptions';
  /** The attribute code. */
  code: Scalars['ID']['output'];
  selected_options: Array<Maybe<AttributeSelectedOptionInterface>>;
};

export type AttributeValue = AttributeValueInterface & {
  __typename?: 'AttributeValue';
  /** The attribute code. */
  code: Scalars['ID']['output'];
  /** The attribute value. */
  value: Scalars['String']['output'];
};

/** Specifies the value for attribute. */
export type AttributeValueInput = {
  /** The code of the attribute. */
  attribute_code: Scalars['String']['input'];
  /** An array containing selected options for a select or multiselect attribute. */
  selected_options?: InputMaybe<Array<InputMaybe<AttributeInputSelectedOption>>>;
  /** The value assigned to the attribute. */
  value?: InputMaybe<Scalars['String']['input']>;
};

export type AttributeValueInterface = {
  /** The attribute code. */
  code: Scalars['ID']['output'];
};

/** Metadata of EAV attributes associated to form */
export type AttributesFormOutput = {
  __typename?: 'AttributesFormOutput';
  /** Errors of retrieving certain attributes metadata. */
  errors: Array<Maybe<AttributeMetadataError>>;
  /** Requested attributes metadata. */
  items: Array<Maybe<CustomAttributeMetadataInterface>>;
};

/** Metadata of EAV attributes. */
export type AttributesMetadataOutput = {
  __typename?: 'AttributesMetadataOutput';
  /** Errors of retrieving certain attributes metadata. */
  errors: Array<Maybe<AttributeMetadataError>>;
  /** Requested attributes metadata. */
  items: Array<Maybe<CustomAttributeMetadataInterface>>;
};

export type AutoCompleteSection = {
  __typename?: 'AutoCompleteSection';
  category_count?: Maybe<Scalars['Int']['output']>;
  enable_category?: Maybe<Scalars['Boolean']['output']>;
  enable_page?: Maybe<Scalars['Boolean']['output']>;
  enable_suggestion?: Maybe<Scalars['Boolean']['output']>;
  page_count?: Maybe<Scalars['Int']['output']>;
  page_exclude?: Maybe<Array<Maybe<ExcludedPages>>>;
  product_count?: Maybe<Scalars['Int']['output']>;
  suggestion_count?: Maybe<Scalars['Int']['output']>;
};

/** Describes a payment method that the shopper can use to pay for the order. */
export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod';
  /** The payment method code. */
  code: Scalars['String']['output'];
  /** If the payment method is an online integration */
  is_deferred: Scalars['Boolean']['output'];
  /** The payment method title. */
  title: Scalars['String']['output'];
};

/** Contains details about the possible shipping methods and carriers. */
export type AvailableShippingMethod = {
  __typename?: 'AvailableShippingMethod';
  /** The cost of shipping using this shipping method. */
  amount: Money;
  /** Indicates whether this shipping method can be applied to the cart. */
  available: Scalars['Boolean']['output'];
  /** @deprecated The field should not be used on the storefront. */
  base_amount?: Maybe<Money>;
  /** A string that identifies a commercial carrier or an offline shipping method. */
  carrier_code: Scalars['String']['output'];
  /** The label for the carrier code. */
  carrier_title: Scalars['String']['output'];
  /** Describes an error condition. */
  error_message?: Maybe<Scalars['String']['output']>;
  /** A shipping method code associated with a carrier. The value could be null if no method is available. */
  method_code?: Maybe<Scalars['String']['output']>;
  /** The label for the shipping method code. The value could be null if no method is available. */
  method_title?: Maybe<Scalars['String']['output']>;
  /** The cost of shipping using this shipping method, excluding tax. */
  price_excl_tax: Money;
  /** The cost of shipping using this shipping method, including tax. */
  price_incl_tax: Money;
};

export type BannerBlock = Block & BlockData & {
  __typename?: 'BannerBlock';
  banner_template?: Maybe<Scalars['String']['output']>;
  banneritems?: Maybe<Array<Maybe<BannerItems>>>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type BannerItems = {
  __typename?: 'BannerItems';
  image?: Maybe<Scalars['String']['output']>;
  layout?: Maybe<Scalars['String']['output']>;
  /** @deprecated use link_info array instead */
  link?: Maybe<Scalars['String']['output']>;
  link_info?: Maybe<LinkItems>;
  position?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export enum BatchMutationStatus {
  Failure = 'FAILURE',
  MixedResults = 'MIXED_RESULTS',
  Success = 'SUCCESS'
}

export type BestsellersProductOutput = {
  __typename?: 'BestsellersProductOutput';
  /** Currency */
  currency?: Maybe<Scalars['String']['output']>;
  /** Period. */
  period?: Maybe<Scalars['String']['output']>;
  /** Product ID */
  product_id?: Maybe<Scalars['String']['output']>;
  /** Product Image URL */
  product_image_url?: Maybe<Scalars['String']['output']>;
  /** Product Name */
  product_name?: Maybe<Scalars['String']['output']>;
  /** Product Price */
  product_price?: Maybe<Scalars['String']['output']>;
  /** Product SKU */
  product_sku?: Maybe<Scalars['String']['output']>;
  /** Product URL */
  product_url?: Maybe<Scalars['String']['output']>;
  /** Order Quantity. */
  qty_ordered?: Maybe<Scalars['Int']['output']>;
};

/** An array containing all the billing fields of order */
export type Billing = {
  __typename?: 'Billing';
  /** Billing City of Sales Order */
  city?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  company?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  country?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  fax?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  name?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  postcode?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  region?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  street?: Maybe<Scalars['String']['output']>;
  /** Billing City of Sales Order */
  telephone?: Maybe<Scalars['String']['output']>;
};

/** Defines the billing address. */
export type BillingAddressInput = {
  /** Defines a billing address. */
  address?: InputMaybe<CartAddressInput>;
  /** An ID from the customer's address book that uniquely identifies the address to be used for billing. */
  customer_address_id?: InputMaybe<Scalars['Int']['input']>;
  /** Indicates whether to set the billing address to be the same as the existing shipping address on the cart. */
  same_as_shipping?: InputMaybe<Scalars['Boolean']['input']>;
  /** Indicates whether to set the shipping address to be the same as this billing address. */
  use_for_shipping?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The billing address information */
export type BillingAddressPaymentSourceInput = {
  /** The first line of the address */
  address_line_1?: InputMaybe<Scalars['String']['input']>;
  /** The second line of the address */
  address_line_2?: InputMaybe<Scalars['String']['input']>;
  /** The city of the address */
  city?: InputMaybe<Scalars['String']['input']>;
  /** The country of the address */
  country_code: Scalars['String']['input'];
  /** The postal code of the address */
  postal_code?: InputMaybe<Scalars['String']['input']>;
  /** The region of the address */
  region?: InputMaybe<Scalars['String']['input']>;
};

/** Contains details about the billing address. */
export type BillingCartAddress = CartAddressInterface & {
  __typename?: 'BillingCartAddress';
  /** The city specified for the billing or shipping address. */
  city: Scalars['String']['output'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']['output']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  customer_address_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated The field is used only in shipping address. */
  customer_notes?: Maybe<Scalars['String']['output']>;
  /** The customer's fax number. */
  fax?: Maybe<Scalars['String']['output']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String']['output'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String']['output'];
  /** Shipping location latitude longitude. */
  lat_lng?: Maybe<Array<Maybe<LatLng>>>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: Maybe<Scalars['String']['output']>;
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']['output']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']['output']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']['output']>;
  /** The unique id of the customer address. */
  uid: Scalars['String']['output'];
  /** The VAT company number for billing or shipping address. */
  vat_id?: Maybe<Scalars['String']['output']>;
};

export type Block = {
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type BlockData = {
  type?: Maybe<Scalars['String']['output']>;
};

export type BlockFilterInput = {
  desktop_status?: InputMaybe<FilterEqualTypeInput>;
  mobile_status?: InputMaybe<FilterEqualTypeInput>;
  page_type?: InputMaybe<FilterEqualTypeInput>;
};

export type Blocks = {
  __typename?: 'Blocks';
  data?: Maybe<Array<Maybe<Block>>>;
  /** comment for page_info. */
  page_info?: Maybe<SearchResultPageInfo>;
  seo_details?: Maybe<SeoDetails>;
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type BraintreeCcVaultInput = {
  device_data?: InputMaybe<Scalars['String']['input']>;
  public_hash: Scalars['String']['input'];
};

export type BraintreeInput = {
  /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. */
  device_data?: InputMaybe<Scalars['String']['input']>;
  /** States whether the payment details (Credit/Debit Card, PayPal Account) entered by a customer should be tokenized for later usage. Required only if Vault is enabled for the relevant Braintree payment integration. */
  is_active_payment_token_enabler: Scalars['Boolean']['input'];
  /** The one-time payment token generated by Braintree payment gateway based on payment details (Card, PayPal). Required field to make sale transaction. */
  payment_method_nonce: Scalars['String']['input'];
};

export type BraintreeVaultInput = {
  device_data?: InputMaybe<Scalars['String']['input']>;
  public_hash: Scalars['String']['input'];
};

export type BrandData = {
  __typename?: 'BrandData';
  brand_id?: Maybe<Scalars['Int']['output']>;
  /** Image of the brand */
  image?: Maybe<Scalars['String']['output']>;
  /** Label of the brand */
  label?: Maybe<Scalars['String']['output']>;
};

export type BrandInfo = {
  __typename?: 'BrandInfo';
  brand_id?: Maybe<Scalars['Int']['output']>;
  /** Image of the brand */
  image?: Maybe<Scalars['String']['output']>;
  /** Label of the brand */
  label?: Maybe<Scalars['String']['output']>;
};

/** Contains details about an individual category that comprises a breadcrumb. */
export type Breadcrumb = {
  __typename?: 'Breadcrumb';
  /**
   * The ID of the category.
   * @deprecated Use `category_uid` instead.
   */
  category_id?: Maybe<Scalars['Int']['output']>;
  /** The category level. */
  category_level?: Maybe<Scalars['Int']['output']>;
  /** The display name of the category. */
  category_name?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `Breadcrumb` object. */
  category_uid: Scalars['ID']['output'];
  /** The URL key of the category. */
  category_url_key?: Maybe<Scalars['String']['output']>;
  /** The URL path of the category. */
  category_url_path?: Maybe<Scalars['String']['output']>;
};

export type BulkOrderOutput = {
  __typename?: 'BulkOrderOutput';
  message?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** An implementation for bundle product cart items. */
export type BundleCartItem = CartItemInterface & {
  __typename?: 'BundleCartItem';
  /** An array containing the bundle options the shopper selected. */
  bundle_options: Array<Maybe<SelectedBundleOption>>;
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Defines bundle product options for `CreditMemoItemInterface`. */
export type BundleCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'BundleCreditMemoItem';
  /** A list of bundle options that are assigned to a bundle product that is part of a credit memo. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
};

/** Defines bundle product options for `InvoiceItemInterface`. */
export type BundleInvoiceItem = InvoiceItemInterface & {
  __typename?: 'BundleInvoiceItem';
  /** A list of bundle options that are assigned to an invoiced bundle product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
};

/** Defines an individual item within a bundle product. */
export type BundleItem = {
  __typename?: 'BundleItem';
  /**
   * An ID assigned to each type of item in a bundle product.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>;
  /** A number indicating the sequence order of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The display name of the item. */
  title?: Maybe<Scalars['String']['output']>;
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `BundleItem` object. */
  uid?: Maybe<Scalars['ID']['output']>;
};

/** Defines the characteristics that comprise a specific bundle item and its options. */
export type BundleItemOption = {
  __typename?: 'BundleItemOption';
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The ID assigned to the bundled item option.
   * @deprecated Use `uid` instead
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']['output']>;
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']['output']>;
  /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>;
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']['output']>;
  /** The quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']['output']>;
  /** The unique ID for a `BundleItemOption` object. */
  uid: Scalars['ID']['output'];
};

/** Defines the input for a bundle option. */
export type BundleOptionInput = {
  /** The ID of the option. */
  id: Scalars['Int']['input'];
  /** The number of the selected item to add to the cart. */
  quantity: Scalars['Float']['input'];
  /** An array with the chosen value of the option. */
  value: Array<InputMaybe<Scalars['String']['input']>>;
};

/** Defines bundle product options for `OrderItemInterface`. */
export type BundleOrderItem = OrderItemInterface & {
  __typename?: 'BundleOrderItem';
  /** A list of bundle options that are assigned to the bundle product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The selected gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The ProductInterface object, which contains details about the base product */
  product?: Maybe<ProductInterface>;
  product_image?: Maybe<Scalars['String']['output']>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']['output']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']['output']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']['output']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']['output']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']['output']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']['output']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']['output']>;
};

/** Defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'BundleProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether the bundle product has a dynamic price. */
  dynamic_price?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the bundle product has a dynamic SKU. */
  dynamic_sku?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the bundle product has a dynamically calculated weight. */
  dynamic_weight?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /** An array containing information about individual bundle items. */
  items?: Maybe<Array<Maybe<BundleItem>>>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The price details of the main product */
  price_details?: Maybe<PriceDetails>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** One of PRICE_RANGE or AS_LOW_AS. */
  price_view?: Maybe<PriceViewEnum>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** Indicates whether to ship bundle items together or individually. */
  ship_bundle_items?: Maybe<ShipBundleItemsEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']['output']>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Defines a single bundle product. */
export type BundleProductCartItemInput = {
  /** A mandatory array of options for the bundle product, including each chosen option and specified quantity. */
  bundle_options: Array<InputMaybe<BundleOptionInput>>;
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the bundle product. */
  data: CartItemInput;
};

/** Defines bundle product options for `ShipmentItemInterface`. */
export type BundleShipmentItem = ShipmentItemInterface & {
  __typename?: 'BundleShipmentItem';
  /** A list of bundle options that are assigned to a shipped product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float']['output'];
};

/** Defines bundle product options for `WishlistItemInterface`. */
export type BundleWishlistItem = WishlistItemInterface & {
  __typename?: 'BundleWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** An array containing information about the selected bundle items. */
  bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>;
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

export type ButtonStyles = {
  __typename?: 'ButtonStyles';
  /** The button color */
  color?: Maybe<Scalars['String']['output']>;
  /** The button height in pixels */
  height?: Maybe<Scalars['Int']['output']>;
  /** The button label */
  label?: Maybe<Scalars['String']['output']>;
  /** The button layout */
  layout?: Maybe<Scalars['String']['output']>;
  /** The button shape */
  shape?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the tagline is displayed */
  tagline?: Maybe<Scalars['Boolean']['output']>;
  /** Defines if the button uses default height. If the value is false, the value of height is used */
  use_default_height?: Maybe<Scalars['Boolean']['output']>;
};

/** Defines the order to cancel. */
export type CancelOrderInput = {
  /** Order ID. */
  order_id: Scalars['ID']['input'];
  /** Cancellation reason. */
  reason: Scalars['String']['input'];
};

/** Contains the updated customer order and error message if any. */
export type CancelOrderOutput = {
  __typename?: 'CancelOrderOutput';
  /** Error encountered while cancelling the order. */
  error?: Maybe<Scalars['String']['output']>;
  /** Updated customer order. */
  order?: Maybe<CustomerOrder>;
};

export type CancellationReason = {
  __typename?: 'CancellationReason';
  description: Scalars['String']['output'];
};

export type Card = {
  __typename?: 'Card';
  /** Card bin details */
  bin_details?: Maybe<CardBin>;
  /** Expiration month of the card */
  card_expiry_month?: Maybe<Scalars['String']['output']>;
  /** Expiration year of the card */
  card_expiry_year?: Maybe<Scalars['String']['output']>;
  /** Last four digits of the card */
  last_digits?: Maybe<Scalars['String']['output']>;
  /** Name on the card */
  name?: Maybe<Scalars['String']['output']>;
};

export type CardBin = {
  __typename?: 'CardBin';
  /** Card bin number */
  bin?: Maybe<Scalars['String']['output']>;
};

/** The card payment source information */
export type CardPaymentSourceInput = {
  /** The billing address of the card */
  billing_address: BillingAddressPaymentSourceInput;
  /** The name on the cardholder */
  name?: InputMaybe<Scalars['String']['input']>;
};

/** The card payment source information */
export type CardPaymentSourceOutput = {
  __typename?: 'CardPaymentSourceOutput';
  /** The brand of the card */
  brand?: Maybe<Scalars['String']['output']>;
  /** The expiry of the card */
  expiry?: Maybe<Scalars['String']['output']>;
  /** The last digits of the card */
  last_digits?: Maybe<Scalars['String']['output']>;
};

/** Contains the contents and other details about a guest or customer cart. */
export type Cart = {
  __typename?: 'Cart';
  /** @deprecated Use `applied_coupons` instead. */
  applied_coupon?: Maybe<AppliedCoupon>;
  /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code. */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>;
  /** An array of available payment methods. */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>;
  /** The billing address assigned to the cart. */
  billing_address?: Maybe<BillingCartAddress>;
  /** The email address of the guest or customer. */
  email?: Maybe<Scalars['String']['output']>;
  /** FB add to cart code. */
  fb_add_to_cart?: Maybe<Scalars['String']['output']>;
  freeshipping_note?: Maybe<Scalars['String']['output']>;
  /** GA add to cart code. */
  ga_add_to_cart?: Maybe<Scalars['String']['output']>;
  /** GA remove from cart code. */
  ga_remove_from_cart?: Maybe<Scalars['String']['output']>;
  /** The entered gift message for the cart */
  gift_message?: Maybe<GiftMessage>;
  /** GTM add to cart code. */
  gtm_add_to_cart?: Maybe<Scalars['String']['output']>;
  /** GTM remove from cart code. */
  gtm_remove_from_cart?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `Cart` object. */
  id: Scalars['ID']['output'];
  /** Indicates whether the cart contains only virtual products. */
  is_virtual: Scalars['Boolean']['output'];
  /**
   * An array of products that have been added to the cart.
   * @deprecated Use `itemsV2` instead.
   */
  items?: Maybe<Array<Maybe<CartItemInterface>>>;
  itemsV2?: Maybe<CartItems>;
  /** Pricing details for the quote. */
  prices?: Maybe<CartPrices>;
  /** Indicates which payment method was applied to the cart. */
  selected_payment_method?: Maybe<SelectedPaymentMethod>;
  /** An array of shipping addresses assigned to the cart. */
  shipping_addresses: Array<Maybe<ShippingCartAddress>>;
  /** The total number of items in the cart. */
  total_quantity: Scalars['Float']['output'];
};


/** Contains the contents and other details about a guest or customer cart. */
export type CartItemsV2Args = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<QuoteItemsSortInput>;
};

/** Contains details the country in a billing or shipping address. */
export type CartAddressCountry = {
  __typename?: 'CartAddressCountry';
  /** The country code. */
  code: Scalars['String']['output'];
  /** The display label for the country. */
  label: Scalars['String']['output'];
};

/** input the billing or shipping address to be applied to the cart. */
export type CartAddressInput = {
  /** The city specified for the billing or shipping address. */
  city: Scalars['String']['input'];
  /** The company specified for the billing or shipping address. */
  company?: InputMaybe<Scalars['String']['input']>;
  /** The country code and label for the billing or shipping address. */
  country_code: Scalars['String']['input'];
  /** The customer's fax number. */
  fax?: InputMaybe<Scalars['String']['input']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String']['input'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String']['input'];
  /** Shipping location latitude. */
  latitude?: InputMaybe<Scalars['String']['input']>;
  /** Shipping location longitude. */
  longitude?: InputMaybe<Scalars['String']['input']>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: InputMaybe<Scalars['String']['input']>;
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: InputMaybe<Scalars['String']['input']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']['input']>;
  /** A string that defines the state or province of the billing or shipping address. */
  region?: InputMaybe<Scalars['String']['input']>;
  /** An integer that defines the state or province of the billing or shipping address. */
  region_id?: InputMaybe<Scalars['Int']['input']>;
  /** Determines whether to save the address in the customer's address book. The default value is true. */
  save_in_address_book?: InputMaybe<Scalars['Boolean']['input']>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<InputMaybe<Scalars['String']['input']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']['input']>;
  /** The telephone number for the billing or shipping address. */
  telephone?: InputMaybe<Scalars['String']['input']>;
  /** The VAT company number for billing or shipping address. */
  vat_id?: InputMaybe<Scalars['String']['input']>;
};

/** Defines the billing or shipping address to be applied to the cart. */
export type CartAddressInterface = {
  /** The city specified for the billing or shipping address. */
  city: Scalars['String']['output'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']['output']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  /** The customer's fax number. */
  fax?: Maybe<Scalars['String']['output']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String']['output'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String']['output'];
  /** Shipping location latitude longitude. */
  lat_lng?: Maybe<Array<Maybe<LatLng>>>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: Maybe<Scalars['String']['output']>;
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']['output']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']['output']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']['output']>;
  /** The unique id of the customer address. */
  uid: Scalars['String']['output'];
  /** The VAT company number for billing or shipping address. */
  vat_id?: Maybe<Scalars['String']['output']>;
};

/** Contains details about the region in a billing or shipping address. */
export type CartAddressRegion = {
  __typename?: 'CartAddressRegion';
  /** The state or province code. */
  code?: Maybe<Scalars['String']['output']>;
  /** The display label for the region. */
  label?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']['output']>;
};

/** Contains information about discounts applied to the cart. */
export type CartDiscount = {
  __typename?: 'CartDiscount';
  /** The amount of the discount applied to the item. */
  amount: Money;
  /** The description of the discount. */
  label: Array<Maybe<Scalars['String']['output']>>;
};

export enum CartDiscountType {
  Item = 'ITEM',
  Shipping = 'SHIPPING'
}

export type CartItemError = {
  __typename?: 'CartItemError';
  /** An error code that describes the error encountered */
  code: CartItemErrorType;
  /** A localized error message */
  message: Scalars['String']['output'];
};

export enum CartItemErrorType {
  ItemIncrements = 'ITEM_INCREMENTS',
  ItemQty = 'ITEM_QTY',
  Undefined = 'UNDEFINED'
}

/** Defines an item to be added to the cart. */
export type CartItemInput = {
  /** An array of entered options for the base product, such as personalization text. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For a child product, the SKU of its parent product. */
  parent_sku?: InputMaybe<Scalars['String']['input']>;
  /** The amount or number of an item to add. */
  quantity: Scalars['Float']['input'];
  /** The selected options for the base product, such as color or size, using the unique ID for an object such as `CustomizableRadioOption`, `CustomizableDropDownOption`, or `ConfigurableProductOptionsValues`. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** The SKU of the product. */
  sku: Scalars['String']['input'];
};

/** An interface for products in a cart. */
export type CartItemInterface = {
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Contains details about the price of the item, including taxes and discounts. */
export type CartItemPrices = {
  __typename?: 'CartItemPrices';
  /** An array of discounts to be applied to the cart item. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** An array of FPTs applied to the cart item. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart. */
  price: Money;
  /** The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart. */
  price_including_tax: Money;
  /** The value of the price multiplied by the quantity of the item. */
  row_total: Money;
  /** The value of `row_total` plus the tax applied to the item. */
  row_total_including_tax: Money;
  /** The total of all discounts applied to the item. */
  total_item_discount?: Maybe<Money>;
};

/** Deprecated: The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
export type CartItemQuantity = {
  __typename?: 'CartItemQuantity';
  /** @deprecated The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
  cart_item_id: Scalars['Int']['output'];
  /** @deprecated The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
  quantity: Scalars['Float']['output'];
};

/** Contains details about the price of a selected customizable value. */
export type CartItemSelectedOptionValuePrice = {
  __typename?: 'CartItemSelectedOptionValuePrice';
  /** Indicates whether the price type is fixed, percent, or dynamic. */
  type: PriceTypeEnum;
  /** A string that describes the unit of the value. */
  units: Scalars['String']['output'];
  /** A price value. */
  value: Scalars['Float']['output'];
};

/** A single item to be updated. */
export type CartItemUpdateInput = {
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']['input']>;
  /** The unique ID for a `CartItemInterface` object. */
  cart_item_uid?: InputMaybe<Scalars['ID']['input']>;
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** Gift message details for the cart item */
  gift_message?: InputMaybe<GiftMessageInput>;
  /** The new quantity of the item. */
  quantity?: InputMaybe<Scalars['Float']['input']>;
};

export type CartItems = {
  __typename?: 'CartItems';
  /** An array of products that have been added to the cart. */
  items: Array<Maybe<CartItemInterface>>;
  /** Metadata for pagination rendering. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of returned cart items. */
  total_count: Scalars['Int']['output'];
};

/** Contains details about the final price of items in the cart, including discount and tax information. */
export type CartPrices = {
  __typename?: 'CartPrices';
  /** An array containing the names and amounts of taxes applied to each item in the cart. */
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>;
  /** @deprecated Use discounts instead. */
  discount?: Maybe<CartDiscount>;
  /** An array containing cart rule discounts, store credit and gift cards applied to the cart. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The total, including discounts, taxes, shipping, and other fees. */
  grand_total?: Maybe<Money>;
  /** Reward Segment */
  mp_reward_segments?: Maybe<Array<Maybe<TotalSegmentsOutput>>>;
  /** The subtotal without any applied taxes. */
  subtotal_excluding_tax?: Maybe<Money>;
  /** The subtotal including any applied taxes. */
  subtotal_including_tax?: Maybe<Money>;
  /** The subtotal with any discounts applied, but not taxes. */
  subtotal_with_discount_excluding_tax?: Maybe<Money>;
};

/** Contains tax information about an item in the cart. */
export type CartTaxItem = {
  __typename?: 'CartTaxItem';
  /** The amount of tax applied to the item. */
  amount: Money;
  /** The description of the tax. */
  label: Scalars['String']['output'];
};

/** An error encountered while adding an item to the the cart. */
export type CartUserInputError = {
  __typename?: 'CartUserInputError';
  /** A cart-specific error code. */
  code: CartUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String']['output'];
};

export enum CartUserInputErrorType {
  InsufficientStock = 'INSUFFICIENT_STOCK',
  NotSalable = 'NOT_SALABLE',
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  Undefined = 'UNDEFINED'
}

export enum CatalogAttributeApplyToEnum {
  Bundle = 'BUNDLE',
  Category = 'CATEGORY',
  Configurable = 'CONFIGURABLE',
  Downloadable = 'DOWNLOADABLE',
  Grouped = 'GROUPED',
  Simple = 'SIMPLE',
  Virtual = 'VIRTUAL'
}

/** Swatch attribute metadata. */
export type CatalogAttributeMetadata = CustomAttributeMetadataInterface & {
  __typename?: 'CatalogAttributeMetadata';
  /** To which catalog types an attribute can be applied. */
  apply_to?: Maybe<Array<Maybe<CatalogAttributeApplyToEnum>>>;
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  code: Scalars['ID']['output'];
  /** Default attribute value. */
  default_value?: Maybe<Scalars['String']['output']>;
  /** The type of entity that defines the attribute. */
  entity_type: AttributeEntityTypeEnum;
  /** The frontend class of the attribute. */
  frontend_class?: Maybe<Scalars['String']['output']>;
  /** The frontend input type of the attribute. */
  frontend_input?: Maybe<AttributeFrontendInputEnum>;
  /** Whether a product or category attribute can be compared against another or not. */
  is_comparable?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute can be filtered or not. */
  is_filterable?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute can be filtered in search or not. */
  is_filterable_in_search?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute can use HTML on front or not. */
  is_html_allowed_on_front?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the attribute value is required. */
  is_required: Scalars['Boolean']['output'];
  /** Whether a product or category attribute can be searched or not. */
  is_searchable?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the attribute value must be unique. */
  is_unique: Scalars['Boolean']['output'];
  /** Whether a product or category attribute can be used for price rules or not. */
  is_used_for_price_rules?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute is used for promo rules or not. */
  is_used_for_promo_rules?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute is visible in advanced search or not. */
  is_visible_in_advanced_search?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute is visible on front or not. */
  is_visible_on_front?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute has WYSIWYG enabled or not. */
  is_wysiwyg_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** The label assigned to the attribute. */
  label?: Maybe<Scalars['String']['output']>;
  /** Attribute options. */
  options: Array<Maybe<CustomAttributeOptionInterface>>;
  /** Input type of the swatch attribute option. */
  swatch_input_type?: Maybe<SwatchInputTypeEnum>;
  /** Whether update product preview image or not. */
  update_product_preview_image?: Maybe<Scalars['Boolean']['output']>;
  /** Whether use product image for swatch or not. */
  use_product_image_for_swatch?: Maybe<Scalars['Boolean']['output']>;
  /** Whether a product or category attribute is used in product listing or not. */
  used_in_product_listing?: Maybe<Scalars['Boolean']['output']>;
};

export type CategoriesFilterInput = {
  /** The category id. Customers use this name to identify the category. */
  category_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the category was created */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Enabled */
  enabled?: InputMaybe<FilterTypeInput>;
  /** Import Source */
  import_source?: InputMaybe<FilterTypeInput>;
  /** The Category Level */
  level?: InputMaybe<FilterTypeInput>;
  /** The category name. Customers use this name to identify the category. */
  name?: InputMaybe<FilterTypeInput>;
  /** The parent category id. Customers use this name to identify the category. */
  parent_id?: InputMaybe<FilterTypeInput>;
  /** The Category Position */
  position?: InputMaybe<FilterTypeInput>;
  /** The Store Id */
  store_ids?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the category was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The Category url_key */
  url_key?: InputMaybe<FilterTypeInput>;
};

export type CategoriesOutput = {
  __typename?: 'CategoriesOutput';
  /** An array of categories that match the specified search criteria */
  items?: Maybe<Array<Maybe<Category>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of categories returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type CategoriesOutputNoPage = {
  __typename?: 'CategoriesOutputNoPage';
  /** An array of categories that match the specified search criteria */
  items?: Maybe<Array<Maybe<Category>>>;
  /** The number of categories returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type Category = {
  __typename?: 'Category';
  /** An ID that uniquely identifies the category. */
  category_id?: Maybe<Scalars['Int']['output']>;
  /** number of children categories. */
  children_count?: Maybe<Scalars['Int']['output']>;
  /** Timestamp indicating when the category was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** The description of the category. */
  description?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a category is enabled. */
  enabled?: Maybe<Scalars['Int']['output']>;
  /** The import source of the category. */
  import_source?: Maybe<Scalars['String']['output']>;
  /** The level of the category. */
  level?: Maybe<Scalars['Int']['output']>;
  /** The meta description of the category. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** The meta keywords of the category. */
  meta_keywords?: Maybe<Scalars['String']['output']>;
  /** The meta robot of the category. */
  meta_robots?: Maybe<Scalars['String']['output']>;
  /** The meta title of the category. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The name of the category. */
  name?: Maybe<Scalars['String']['output']>;
  /** An ID that identifies the parent category. */
  parent_id?: Maybe<Scalars['Int']['output']>;
  /** The path of the category. */
  path?: Maybe<Scalars['String']['output']>;
  /** The position of the category. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The post assigned to a category */
  posts?: Maybe<PostsOutputNoPage>;
  /** An ID that identifies the store. */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** Timestamp indicating when the category was updated. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The url key of the category. */
  url_key?: Maybe<Scalars['String']['output']>;
};

export type CategoryBlock = Block & BlockData & {
  __typename?: 'CategoryBlock';
  category_info?: Maybe<Array<Maybe<CategoryInfo>>>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type CategoryConfig = {
  __typename?: 'CategoryConfig';
  ranking?: Maybe<Scalars['String']['output']>;
  search_attributes?: Maybe<Array<Maybe<SearchAttributes>>>;
};

/** Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type CategoryFilterInput = {
  /** Filter by the unique category ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
  ids?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the display name of the category. */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the part of the URL that identifies the category. */
  url_key?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the URL path for the category. */
  url_path?: InputMaybe<FilterEqualTypeInput>;
};

export type CategoryInfo = {
  __typename?: 'CategoryInfo';
  category_id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  url_key?: Maybe<Scalars['String']['output']>;
  url_path?: Maybe<Scalars['String']['output']>;
};

/** Contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** An array of breadcrumb items. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  children_count?: Maybe<Scalars['String']['output']>;
  /** Contains a category CMS block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * The timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  custom_layout_update_file?: Maybe<Scalars['String']['output']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']['output']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']['output']>;
  display_mode?: Maybe<Scalars['String']['output']>;
  filter_price_range?: Maybe<Scalars['Float']['output']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  include_in_menu?: Maybe<Scalars['Int']['output']>;
  is_anchor?: Maybe<Scalars['Int']['output']>;
  landing_page?: Maybe<Scalars['Int']['output']>;
  /** The depth of the category within the tree. */
  level?: Maybe<Scalars['Int']['output']>;
  meta_description?: Maybe<Scalars['String']['output']>;
  meta_keywords?: Maybe<Scalars['String']['output']>;
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']['output']>;
  /** The full category path. */
  path?: Maybe<Scalars['String']['output']>;
  /** The category path within the store. */
  path_in_store?: Maybe<Scalars['String']['output']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']['output']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * The timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The URL key assigned to the category. */
  url_key?: Maybe<Scalars['String']['output']>;
  /** The URL path assigned to the category. */
  url_path?: Maybe<Scalars['String']['output']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  vegam_category_thumbnail?: Maybe<Scalars['String']['output']>;
};


/** Contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Contains details about the products assigned to a category. */
export type CategoryProducts = {
  __typename?: 'CategoryProducts';
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Contains a collection of `CategoryTree` objects and pagination information. */
export type CategoryResult = {
  __typename?: 'CategoryResult';
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>;
  /** @deprecated Use `megamenuImageInfo` instead */
  megamenuImage?: Maybe<Scalars['String']['output']>;
  /** Megamenu Image url */
  megamenuImageInfo?: Maybe<Megamenu>;
  /** An object that includes the `page_info` and `currentPage` values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Contains the hierarchy of categories. */
export type CategoryTree = CategoryInterface & RoutableInterface & {
  __typename?: 'CategoryTree';
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** An array of breadcrumb items. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** A tree of child categories. */
  children?: Maybe<Array<Maybe<CategoryTree>>>;
  children_count?: Maybe<Scalars['String']['output']>;
  /** Contains a category CMS block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * The timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  custom_layout_update_file?: Maybe<Scalars['String']['output']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']['output']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']['output']>;
  display_mode?: Maybe<Scalars['String']['output']>;
  filter_price_range?: Maybe<Scalars['Float']['output']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  include_in_menu?: Maybe<Scalars['Int']['output']>;
  is_anchor?: Maybe<Scalars['Int']['output']>;
  landing_page?: Maybe<Scalars['Int']['output']>;
  /** The depth of the category within the tree. */
  level?: Maybe<Scalars['Int']['output']>;
  meta_description?: Maybe<Scalars['String']['output']>;
  meta_keywords?: Maybe<Scalars['String']['output']>;
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']['output']>;
  /** The full category path. */
  path?: Maybe<Scalars['String']['output']>;
  /** The category path within the store. */
  path_in_store?: Maybe<Scalars['String']['output']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']['output']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * The timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The URL key assigned to the category. */
  url_key?: Maybe<Scalars['String']['output']>;
  /** The URL path assigned to the category. */
  url_path?: Maybe<Scalars['String']['output']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  vegam_category_thumbnail?: Maybe<Scalars['String']['output']>;
};


/** Contains the hierarchy of categories. */
export type CategoryTreeProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Defines details about an individual checkout agreement. */
export type CheckoutAgreement = {
  __typename?: 'CheckoutAgreement';
  /** The ID for a checkout agreement. */
  agreement_id: Scalars['Int']['output'];
  /** The checkbox text for the checkout agreement. */
  checkbox_text: Scalars['String']['output'];
  /** Required. The text of the agreement. */
  content: Scalars['String']['output'];
  /** The height of the text box where the Terms and Conditions statement appears during checkout. */
  content_height?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the `content` text is in HTML format. */
  is_html: Scalars['Boolean']['output'];
  /** Indicates whether agreements are accepted automatically or manually. */
  mode: CheckoutAgreementMode;
  /** The name given to the condition. */
  name: Scalars['String']['output'];
};

/** Indicates how agreements are accepted. */
export enum CheckoutAgreementMode {
  /** Conditions are automatically accepted upon checkout. */
  Auto = 'AUTO',
  /** Shoppers must manually accept the conditions to place an order. */
  Manual = 'MANUAL'
}

/** An error encountered while adding an item to the cart. */
export type CheckoutUserInputError = {
  __typename?: 'CheckoutUserInputError';
  /** An error code that is specific to Checkout. */
  code: CheckoutUserInputErrorCodes;
  /** A localized error message. */
  message: Scalars['String']['output'];
  /** The path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
  path: Array<Maybe<Scalars['String']['output']>>;
};

export enum CheckoutUserInputErrorCodes {
  InsufficientStock = 'INSUFFICIENT_STOCK',
  NotSalable = 'NOT_SALABLE',
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  ReorderNotAvailable = 'REORDER_NOT_AVAILABLE',
  Undefined = 'UNDEFINED'
}

/** Contains details about a specific CMS block. */
export type CmsBlock = {
  __typename?: 'CmsBlock';
  /** The content of the CMS block in raw HTML. */
  content?: Maybe<Scalars['String']['output']>;
  /** The CMS block identifier. */
  identifier?: Maybe<Scalars['String']['output']>;
  /** The title assigned to the CMS block. */
  title?: Maybe<Scalars['String']['output']>;
};

/** Contains an array CMS block items. */
export type CmsBlocks = {
  __typename?: 'CmsBlocks';
  /** An array of CMS blocks. */
  items?: Maybe<Array<Maybe<CmsBlock>>>;
};

/** Contains details about a CMS page. */
export type CmsPage = RoutableInterface & {
  __typename?: 'CmsPage';
  /** The content of the CMS page in raw HTML. */
  content?: Maybe<Scalars['String']['output']>;
  /** The heading that displays at the top of the CMS page. */
  content_heading?: Maybe<Scalars['String']['output']>;
  /** The ID of a CMS page. */
  identifier?: Maybe<Scalars['String']['output']>;
  /** A brief description of the page for search results listings. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A brief description of the page for search results listings. */
  meta_keywords?: Maybe<Scalars['String']['output']>;
  /** A page title that is indexed by search engines and appears in search results listings. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The design layout of the page, indicating the number of columns and navigation features used on the page. */
  page_layout?: Maybe<Scalars['String']['output']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The name that appears in the breadcrumb trail navigation and in the browser title bar and tab. */
  title?: Maybe<Scalars['String']['output']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The URL key of the CMS page, which is often based on the `content_heading`. */
  url_key?: Maybe<Scalars['String']['output']>;
};

export type Collections = {
  __typename?: 'Collections';
  name?: Maybe<Scalars['String']['output']>;
};

export type ColorSwatchData = SwatchDataInterface & {
  __typename?: 'ColorSwatchData';
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']['output']>;
};

export type Comment = {
  __typename?: 'Comment';
  /** An ID that uniquely identifies the comment. */
  comment_id?: Maybe<Scalars['Int']['output']>;
  /** The content of the comment. */
  content?: Maybe<Scalars['String']['output']>;
  /** Timestamp indicating when the comment was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Customer id. */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Email. */
  email?: Maybe<Scalars['String']['output']>;
  /** An ID that identifies the customer. */
  entity_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether a comment has replied. */
  has_reply?: Maybe<Scalars['Int']['output']>;
  /** Comment id. */
  id?: Maybe<Scalars['Int']['output']>;
  /** The import source of the comment. */
  import_source?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a comment is replied. */
  is_reply?: Maybe<Scalars['Int']['output']>;
  /** Message. */
  message?: Maybe<Scalars['String']['output']>;
  /** Nickname. */
  nickname?: Maybe<Scalars['String']['output']>;
  /** An ID that identifies the post. */
  post_id?: Maybe<Scalars['Int']['output']>;
  /** Review id. */
  review_id?: Maybe<Scalars['Int']['output']>;
  /** Session id. */
  session_id?: Maybe<Scalars['String']['output']>;
  /** The status of the comment. */
  status?: Maybe<Scalars['Int']['output']>;
  /** Store id. */
  store_id?: Maybe<Scalars['Int']['output']>;
  /** An ID that identifies the store. */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** Updated at. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The email of the user. */
  user_email?: Maybe<Scalars['String']['output']>;
  /** The name of the user. */
  user_name?: Maybe<Scalars['String']['output']>;
};

export type CommentsFilterInput = {
  /** The comment id. Customers use this name to identify the comment. */
  comment_id?: InputMaybe<FilterTypeInput>;
  /** Customer Id the comment belongs to */
  entity_id?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the comment has reply */
  has_reply?: InputMaybe<FilterTypeInput>;
  /** Import Source */
  import_source?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the comment is reply */
  is_reply?: InputMaybe<FilterTypeInput>;
  /** Post Id the comment belongs to. */
  post_id?: InputMaybe<FilterTypeInput>;
  /** Reply Id */
  reply_id?: InputMaybe<FilterTypeInput>;
  /** Comment Status */
  status?: InputMaybe<FilterTypeInput>;
  /** Store Id */
  store_ids?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the comment was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** User Email */
  user_email?: InputMaybe<FilterTypeInput>;
  /** User Name */
  user_name?: InputMaybe<FilterTypeInput>;
};

export type CommentsOutput = {
  __typename?: 'CommentsOutput';
  /** An array of comments that match the specified search criteria */
  items?: Maybe<Array<Maybe<Comment>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of comments returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Contains an attribute code that is used for product comparisons. */
export type ComparableAttribute = {
  __typename?: 'ComparableAttribute';
  /** An attribute code that is enabled for product comparisons. */
  code: Scalars['String']['output'];
  /** The label of the attribute code. */
  label: Scalars['String']['output'];
};

/** Defines an object used to iterate through items for product comparisons. */
export type ComparableItem = {
  __typename?: 'ComparableItem';
  /** An array of product attributes that can be used to compare products. */
  attributes: Array<Maybe<ProductAttribute>>;
  /** Details about a product in a compare list. */
  product: ProductInterface;
  /** The unique ID of an item in a compare list. */
  uid: Scalars['ID']['output'];
};

/** Contains iterable information such as the array of items, the count, and attributes that represent the compare list. */
export type CompareList = {
  __typename?: 'CompareList';
  /** An array of attributes that can be used for comparing products. */
  attributes?: Maybe<Array<Maybe<ComparableAttribute>>>;
  /** The number of items in the compare list. */
  item_count: Scalars['Int']['output'];
  /** An array of products to compare. */
  items?: Maybe<Array<Maybe<ComparableItem>>>;
  /** The unique ID assigned to the compare list. */
  uid: Scalars['ID']['output'];
};

export type ComplexTextValue = {
  __typename?: 'ComplexTextValue';
  /** Text that can contain HTML tags. */
  html: Scalars['String']['output'];
};

export type ConfigsOutput = {
  __typename?: 'ConfigsOutput';
  /** General config. */
  general?: Maybe<General>;
  /** Seo config. */
  seo?: Maybe<Seo>;
  /** Sidebar config. */
  sidebar?: Maybe<Sidebar>;
};

/** Contains details about a configurable product attribute option. */
export type ConfigurableAttributeOption = {
  __typename?: 'ConfigurableAttributeOption';
  /** The ID assigned to the attribute. */
  code?: Maybe<Scalars['String']['output']>;
  /** A string that describes the configurable attribute option. */
  label?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ConfigurableAttributeOption` object. */
  uid: Scalars['ID']['output'];
  /** A unique index number assigned to the configurable product option. */
  value_index?: Maybe<Scalars['Int']['output']>;
};

/** An implementation for configurable product cart items. */
export type ConfigurableCartItem = CartItemInterface & {
  __typename?: 'ConfigurableCartItem';
  /** An array containing the configuranle options the shopper selected. */
  configurable_options: Array<Maybe<SelectedConfigurableOption>>;
  /** Product details of the cart item. */
  configured_variant: ProductInterface;
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Describes configurable options that have been selected and can be selected as a result of the previous selections. */
export type ConfigurableOptionAvailableForSelection = {
  __typename?: 'ConfigurableOptionAvailableForSelection';
  /** An attribute code that uniquely identifies a configurable option. */
  attribute_code: Scalars['String']['output'];
  /** An array of selectable option value IDs. */
  option_value_uids: Array<Maybe<Scalars['ID']['output']>>;
};

/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'ConfigurableProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** An array of options for the configurable product. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>;
  /** An array of media gallery items and other details about selected configurable product options as well as details about remaining selectable options. */
  configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /** An array of simple product variants. */
  variants?: Maybe<Array<Maybe<ConfigurableVariant>>>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']['output']>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProductConfigurable_Product_Options_SelectionArgs = {
  configurableOptionValueUids?: InputMaybe<Array<Scalars['ID']['input']>>;
};


/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

export type ConfigurableProductCartItemInput = {
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the configurable product. */
  data: CartItemInput;
  /** The SKU of the parent configurable product. */
  parent_sku?: InputMaybe<Scalars['String']['input']>;
  /** Deprecated. Use `CartItemInput.sku` instead. */
  variant_sku?: InputMaybe<Scalars['String']['input']>;
};

/** Contains details about configurable product options. */
export type ConfigurableProductOption = {
  __typename?: 'ConfigurableProductOption';
  /** An attribute code that uniquely identifies a configurable option. */
  attribute_code: Scalars['String']['output'];
  /** The display name of the option. */
  label: Scalars['String']['output'];
  /** The unique ID of the configurable option. */
  uid: Scalars['ID']['output'];
  /** An array of values that are applicable for this option. */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionValue>>>;
};

/** Defines a value for a configurable product option. */
export type ConfigurableProductOptionValue = {
  __typename?: 'ConfigurableProductOptionValue';
  /** Indicates whether the product is available with this selected option. */
  is_available: Scalars['Boolean']['output'];
  /** Indicates whether the value is the default. */
  is_use_default: Scalars['Boolean']['output'];
  /** The display name of the value. */
  label: Scalars['String']['output'];
  /** The URL assigned to the thumbnail of the swatch image. */
  swatch?: Maybe<SwatchDataInterface>;
  /** The unique ID of the value. */
  uid: Scalars['ID']['output'];
};

/** Defines configurable attributes for the specified product. */
export type ConfigurableProductOptions = {
  __typename?: 'ConfigurableProductOptions';
  /** A string that identifies the attribute. */
  attribute_code?: Maybe<Scalars['String']['output']>;
  /**
   * The ID assigned to the attribute.
   * @deprecated Use `attribute_uid` instead.
   */
  attribute_id?: Maybe<Scalars['String']['output']>;
  /**
   * The ID assigned to the attribute.
   * @deprecated Use `attribute_uid` instead.
   */
  attribute_id_v2?: Maybe<Scalars['Int']['output']>;
  /** The unique ID for an `Attribute` object. */
  attribute_uid: Scalars['ID']['output'];
  /**
   * The configurable option ID number assigned by the system.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** A displayed string that describes the configurable product option. */
  label?: Maybe<Scalars['String']['output']>;
  /** A number that indicates the order in which the attribute is displayed. */
  position?: Maybe<Scalars['Int']['output']>;
  /**
   * This is the same as a product's `id` field.
   * @deprecated `product_id` is not needed and can be obtained from its parent.
   */
  product_id?: Maybe<Scalars['Int']['output']>;
  /** The unique ID for a `ConfigurableProductOptions` object. */
  uid: Scalars['ID']['output'];
  /** Indicates whether the option is the default. */
  use_default?: Maybe<Scalars['Boolean']['output']>;
  /** An array that defines the `value_index` codes assigned to the configurable product. */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>;
};

/** Contains metadata corresponding to the selected configurable options. */
export type ConfigurableProductOptionsSelection = {
  __typename?: 'ConfigurableProductOptionsSelection';
  /** An array of all possible configurable options. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOption>>>;
  /** Product images and videos corresponding to the specified configurable options selection. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /** The configurable options available for further selection based on the current selection. */
  options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>;
  /** A variant represented by the specified configurable options selection. The value is expected to be null until selections are made for each configurable option. */
  variant?: Maybe<SimpleProduct>;
};

/** Contains the index number assigned to a configurable product option. */
export type ConfigurableProductOptionsValues = {
  __typename?: 'ConfigurableProductOptionsValues';
  /** The label of the product on the default store. */
  default_label?: Maybe<Scalars['String']['output']>;
  /** The label of the product. */
  label?: Maybe<Scalars['String']['output']>;
  /** The label of the product on the current store. */
  store_label?: Maybe<Scalars['String']['output']>;
  /** Swatch data for a configurable product option. */
  swatch_data?: Maybe<SwatchDataInterface>;
  /** The unique ID for a `ConfigurableProductOptionsValues` object. */
  uid?: Maybe<Scalars['ID']['output']>;
  /** Indicates whether to use the default_label. */
  use_default_value?: Maybe<Scalars['Boolean']['output']>;
  /**
   * A unique index number assigned to the configurable product option.
   * @deprecated Use `uid` instead.
   */
  value_index?: Maybe<Scalars['Int']['output']>;
};

/** Contains all the simple product variants of a configurable product. */
export type ConfigurableVariant = {
  __typename?: 'ConfigurableVariant';
  /** An array of configurable attribute options. */
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>;
  /** An array of linked simple products. */
  product?: Maybe<SimpleProduct>;
};

/** A configurable product wish list item. */
export type ConfigurableWishlistItem = WishlistItemInterface & {
  __typename?: 'ConfigurableWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /**
   * The SKU of the simple product corresponding to a set of selected configurable options.
   * @deprecated Use `ConfigurableWishlistItem.configured_variant.sku` instead.
   */
  child_sku: Scalars['String']['output'];
  /** An array of selected configurable options. */
  configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>;
  /** Product details of the selected variant. The value is null if some options are not configured. */
  configured_variant?: Maybe<ProductInterface>;
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

export type ConfirmAccountOutput = {
  __typename?: 'ConfirmAccountOutput';
  customer?: Maybe<Customer>;
  message?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['Boolean']['output']>;
};

/** Contains details about a customer email address to confirm. */
export type ConfirmEmailInput = {
  /** The key to confirm the email address. */
  confirmation_key: Scalars['String']['input'];
  /** The email address to be confirmed. */
  email: Scalars['String']['input'];
};

/** List of account confirmation statuses. */
export enum ConfirmationStatusEnum {
  /** Account confirmation not required */
  AccountConfirmationNotRequired = 'ACCOUNT_CONFIRMATION_NOT_REQUIRED',
  /** Account confirmed */
  AccountConfirmed = 'ACCOUNT_CONFIRMED'
}

export type ContactUsInput = {
  /** The shopper's comment to the merchant. */
  comment: Scalars['String']['input'];
  /** The email address of the shopper. */
  email: Scalars['String']['input'];
  /** The full name of the shopper. */
  name: Scalars['String']['input'];
  /** The shopper's telephone number. */
  telephone?: InputMaybe<Scalars['String']['input']>;
};

/** Contains the status of the request. */
export type ContactUsOutput = {
  __typename?: 'ContactUsOutput';
  message?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the request was successful. */
  status: Scalars['Boolean']['output'];
  success: Scalars['Boolean']['output'];
};

export type ContentBlock = Block & BlockData & {
  __typename?: 'ContentBlock';
  content?: Maybe<Scalars['String']['output']>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type Country = {
  __typename?: 'Country';
  /** An array of regions within a particular country. */
  available_regions?: Maybe<Array<Maybe<Region>>>;
  /** The name of the country in English. */
  full_name_english?: Maybe<Scalars['String']['output']>;
  /** The name of the country in the current locale. */
  full_name_locale?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `Country` object. */
  id?: Maybe<Scalars['String']['output']>;
  /** The three-letter abbreviation of the country, such as USA. */
  three_letter_abbreviation?: Maybe<Scalars['String']['output']>;
  /** The two-letter abbreviation of the country, such as US. */
  two_letter_abbreviation?: Maybe<Scalars['String']['output']>;
};

/** The list of country codes. */
export enum CountryCodeEnum {
  /** Andorra */
  Ad = 'AD',
  /** United Arab Emirates */
  Ae = 'AE',
  /** Afghanistan */
  Af = 'AF',
  /** Antigua & Barbuda */
  Ag = 'AG',
  /** Anguilla */
  Ai = 'AI',
  /** Albania */
  Al = 'AL',
  /** Armenia */
  Am = 'AM',
  /** Netherlands Antilles */
  An = 'AN',
  /** Angola */
  Ao = 'AO',
  /** Antarctica */
  Aq = 'AQ',
  /** Argentina */
  Ar = 'AR',
  /** American Samoa */
  As = 'AS',
  /** Austria */
  At = 'AT',
  /** Australia */
  Au = 'AU',
  /** Aruba */
  Aw = 'AW',
  /** Åland Islands */
  Ax = 'AX',
  /** Azerbaijan */
  Az = 'AZ',
  /** Bosnia & Herzegovina */
  Ba = 'BA',
  /** Barbados */
  Bb = 'BB',
  /** Bangladesh */
  Bd = 'BD',
  /** Belgium */
  Be = 'BE',
  /** Burkina Faso */
  Bf = 'BF',
  /** Bulgaria */
  Bg = 'BG',
  /** Bahrain */
  Bh = 'BH',
  /** Burundi */
  Bi = 'BI',
  /** Benin */
  Bj = 'BJ',
  /** St. Barthélemy */
  Bl = 'BL',
  /** Bermuda */
  Bm = 'BM',
  /** Brunei */
  Bn = 'BN',
  /** Bolivia */
  Bo = 'BO',
  /** Brazil */
  Br = 'BR',
  /** Bahamas */
  Bs = 'BS',
  /** Bhutan */
  Bt = 'BT',
  /** Bouvet Island */
  Bv = 'BV',
  /** Botswana */
  Bw = 'BW',
  /** Belarus */
  By = 'BY',
  /** Belize */
  Bz = 'BZ',
  /** Canada */
  Ca = 'CA',
  /** Cocos (Keeling) Islands */
  Cc = 'CC',
  /** Congo-Kinshasa */
  Cd = 'CD',
  /** Central African Republic */
  Cf = 'CF',
  /** Congo-Brazzaville */
  Cg = 'CG',
  /** Switzerland */
  Ch = 'CH',
  /** Côte d’Ivoire */
  Ci = 'CI',
  /** Cook Islands */
  Ck = 'CK',
  /** Chile */
  Cl = 'CL',
  /** Cameroon */
  Cm = 'CM',
  /** China */
  Cn = 'CN',
  /** Colombia */
  Co = 'CO',
  /** Costa Rica */
  Cr = 'CR',
  /** Cuba */
  Cu = 'CU',
  /** Cape Verde */
  Cv = 'CV',
  /** Christmas Island */
  Cx = 'CX',
  /** Cyprus */
  Cy = 'CY',
  /** Czech Republic */
  Cz = 'CZ',
  /** Germany */
  De = 'DE',
  /** Djibouti */
  Dj = 'DJ',
  /** Denmark */
  Dk = 'DK',
  /** Dominica */
  Dm = 'DM',
  /** Dominican Republic */
  Do = 'DO',
  /** Algeria */
  Dz = 'DZ',
  /** Ecuador */
  Ec = 'EC',
  /** Estonia */
  Ee = 'EE',
  /** Egypt */
  Eg = 'EG',
  /** Western Sahara */
  Eh = 'EH',
  /** Eritrea */
  Er = 'ER',
  /** Spain */
  Es = 'ES',
  /** Ethiopia */
  Et = 'ET',
  /** Finland */
  Fi = 'FI',
  /** Fiji */
  Fj = 'FJ',
  /** Falkland Islands */
  Fk = 'FK',
  /** Micronesia */
  Fm = 'FM',
  /** Faroe Islands */
  Fo = 'FO',
  /** France */
  Fr = 'FR',
  /** Gabon */
  Ga = 'GA',
  /** United Kingdom */
  Gb = 'GB',
  /** Grenada */
  Gd = 'GD',
  /** Georgia */
  Ge = 'GE',
  /** French Guiana */
  Gf = 'GF',
  /** Guernsey */
  Gg = 'GG',
  /** Ghana */
  Gh = 'GH',
  /** Gibraltar */
  Gi = 'GI',
  /** Greenland */
  Gl = 'GL',
  /** Gambia */
  Gm = 'GM',
  /** Guinea */
  Gn = 'GN',
  /** Guadeloupe */
  Gp = 'GP',
  /** Equatorial Guinea */
  Gq = 'GQ',
  /** Greece */
  Gr = 'GR',
  /** South Georgia & South Sandwich Islands */
  Gs = 'GS',
  /** Guatemala */
  Gt = 'GT',
  /** Guam */
  Gu = 'GU',
  /** Guinea-Bissau */
  Gw = 'GW',
  /** Guyana */
  Gy = 'GY',
  /** Hong Kong SAR China */
  Hk = 'HK',
  /** Heard &amp; McDonald Islands */
  Hm = 'HM',
  /** Honduras */
  Hn = 'HN',
  /** Croatia */
  Hr = 'HR',
  /** Haiti */
  Ht = 'HT',
  /** Hungary */
  Hu = 'HU',
  /** Indonesia */
  Id = 'ID',
  /** Ireland */
  Ie = 'IE',
  /** Israel */
  Il = 'IL',
  /** Isle of Man */
  Im = 'IM',
  /** India */
  In = 'IN',
  /** British Indian Ocean Territory */
  Io = 'IO',
  /** Iraq */
  Iq = 'IQ',
  /** Iran */
  Ir = 'IR',
  /** Iceland */
  Is = 'IS',
  /** Italy */
  It = 'IT',
  /** Jersey */
  Je = 'JE',
  /** Jamaica */
  Jm = 'JM',
  /** Jordan */
  Jo = 'JO',
  /** Japan */
  Jp = 'JP',
  /** Kenya */
  Ke = 'KE',
  /** Kyrgyzstan */
  Kg = 'KG',
  /** Cambodia */
  Kh = 'KH',
  /** Kiribati */
  Ki = 'KI',
  /** Comoros */
  Km = 'KM',
  /** St. Kitts & Nevis */
  Kn = 'KN',
  /** North Korea */
  Kp = 'KP',
  /** South Korea */
  Kr = 'KR',
  /** Kuwait */
  Kw = 'KW',
  /** Cayman Islands */
  Ky = 'KY',
  /** Kazakhstan */
  Kz = 'KZ',
  /** Laos */
  La = 'LA',
  /** Lebanon */
  Lb = 'LB',
  /** St. Lucia */
  Lc = 'LC',
  /** Liechtenstein */
  Li = 'LI',
  /** Sri Lanka */
  Lk = 'LK',
  /** Liberia */
  Lr = 'LR',
  /** Lesotho */
  Ls = 'LS',
  /** Lithuania */
  Lt = 'LT',
  /** Luxembourg */
  Lu = 'LU',
  /** Latvia */
  Lv = 'LV',
  /** Libya */
  Ly = 'LY',
  /** Morocco */
  Ma = 'MA',
  /** Monaco */
  Mc = 'MC',
  /** Moldova */
  Md = 'MD',
  /** Montenegro */
  Me = 'ME',
  /** St. Martin */
  Mf = 'MF',
  /** Madagascar */
  Mg = 'MG',
  /** Marshall Islands */
  Mh = 'MH',
  /** Macedonia */
  Mk = 'MK',
  /** Mali */
  Ml = 'ML',
  /** Myanmar (Burma) */
  Mm = 'MM',
  /** Mongolia */
  Mn = 'MN',
  /** Macau SAR China */
  Mo = 'MO',
  /** Northern Mariana Islands */
  Mp = 'MP',
  /** Martinique */
  Mq = 'MQ',
  /** Mauritania */
  Mr = 'MR',
  /** Montserrat */
  Ms = 'MS',
  /** Malta */
  Mt = 'MT',
  /** Mauritius */
  Mu = 'MU',
  /** Maldives */
  Mv = 'MV',
  /** Malawi */
  Mw = 'MW',
  /** Mexico */
  Mx = 'MX',
  /** Malaysia */
  My = 'MY',
  /** Mozambique */
  Mz = 'MZ',
  /** Namibia */
  Na = 'NA',
  /** New Caledonia */
  Nc = 'NC',
  /** Niger */
  Ne = 'NE',
  /** Norfolk Island */
  Nf = 'NF',
  /** Nigeria */
  Ng = 'NG',
  /** Nicaragua */
  Ni = 'NI',
  /** Netherlands */
  Nl = 'NL',
  /** Norway */
  No = 'NO',
  /** Nepal */
  Np = 'NP',
  /** Nauru */
  Nr = 'NR',
  /** Niue */
  Nu = 'NU',
  /** New Zealand */
  Nz = 'NZ',
  /** Oman */
  Om = 'OM',
  /** Panama */
  Pa = 'PA',
  /** Peru */
  Pe = 'PE',
  /** French Polynesia */
  Pf = 'PF',
  /** Papua New Guinea */
  Pg = 'PG',
  /** Philippines */
  Ph = 'PH',
  /** Pakistan */
  Pk = 'PK',
  /** Poland */
  Pl = 'PL',
  /** St. Pierre & Miquelon */
  Pm = 'PM',
  /** Pitcairn Islands */
  Pn = 'PN',
  /** Palestinian Territories */
  Ps = 'PS',
  /** Portugal */
  Pt = 'PT',
  /** Palau */
  Pw = 'PW',
  /** Paraguay */
  Py = 'PY',
  /** Qatar */
  Qa = 'QA',
  /** Réunion */
  Re = 'RE',
  /** Romania */
  Ro = 'RO',
  /** Serbia */
  Rs = 'RS',
  /** Russia */
  Ru = 'RU',
  /** Rwanda */
  Rw = 'RW',
  /** Saudi Arabia */
  Sa = 'SA',
  /** Solomon Islands */
  Sb = 'SB',
  /** Seychelles */
  Sc = 'SC',
  /** Sudan */
  Sd = 'SD',
  /** Sweden */
  Se = 'SE',
  /** Singapore */
  Sg = 'SG',
  /** St. Helena */
  Sh = 'SH',
  /** Slovenia */
  Si = 'SI',
  /** Svalbard & Jan Mayen */
  Sj = 'SJ',
  /** Slovakia */
  Sk = 'SK',
  /** Sierra Leone */
  Sl = 'SL',
  /** San Marino */
  Sm = 'SM',
  /** Senegal */
  Sn = 'SN',
  /** Somalia */
  So = 'SO',
  /** Suriname */
  Sr = 'SR',
  /** São Tomé & Príncipe */
  St = 'ST',
  /** El Salvador */
  Sv = 'SV',
  /** Syria */
  Sy = 'SY',
  /** Eswatini */
  Sz = 'SZ',
  /** Turks & Caicos Islands */
  Tc = 'TC',
  /** Chad */
  Td = 'TD',
  /** French Southern Territories */
  Tf = 'TF',
  /** Togo */
  Tg = 'TG',
  /** Thailand */
  Th = 'TH',
  /** Tajikistan */
  Tj = 'TJ',
  /** Tokelau */
  Tk = 'TK',
  /** Timor-Leste */
  Tl = 'TL',
  /** Turkmenistan */
  Tm = 'TM',
  /** Tunisia */
  Tn = 'TN',
  /** Tonga */
  To = 'TO',
  /** Turkey */
  Tr = 'TR',
  /** Trinidad & Tobago */
  Tt = 'TT',
  /** Tuvalu */
  Tv = 'TV',
  /** Taiwan */
  Tw = 'TW',
  /** Tanzania */
  Tz = 'TZ',
  /** Ukraine */
  Ua = 'UA',
  /** Uganda */
  Ug = 'UG',
  /** U.S. Outlying Islands */
  Um = 'UM',
  /** United States */
  Us = 'US',
  /** Uruguay */
  Uy = 'UY',
  /** Uzbekistan */
  Uz = 'UZ',
  /** Vatican City */
  Va = 'VA',
  /** St. Vincent & Grenadines */
  Vc = 'VC',
  /** Venezuela */
  Ve = 'VE',
  /** British Virgin Islands */
  Vg = 'VG',
  /** U.S. Virgin Islands */
  Vi = 'VI',
  /** Vietnam */
  Vn = 'VN',
  /** Vanuatu */
  Vu = 'VU',
  /** Wallis & Futuna */
  Wf = 'WF',
  /** Samoa */
  Ws = 'WS',
  /** Yemen */
  Ye = 'YE',
  /** Mayotte */
  Yt = 'YT',
  /** South Africa */
  Za = 'ZA',
  /** Zambia */
  Zm = 'ZM',
  /** Zimbabwe */
  Zw = 'ZW'
}

/** Discount Coupons information by rule */
export type CouponsCollection = {
  __typename?: 'CouponsCollection';
  /** An array containing the all the CMS Page from Magento */
  Couponsdetails?: Maybe<Array<Maybe<CouponsList>>>;
};

/** Coupons Data of information */
export type CouponsList = {
  __typename?: 'CouponsList';
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  to_date?: Maybe<Scalars['String']['output']>;
};

/** Contains an array of product IDs to use for creating a compare list. */
export type CreateCompareListInput = {
  /** An array of product IDs to add to the compare list. */
  products?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
};

export type CreateGuestCartInput = {
  /** Optional client-generated ID */
  cart_uid?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateGuestCartOutput = {
  __typename?: 'CreateGuestCartOutput';
  /** The newly created cart. */
  cart?: Maybe<Cart>;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type CreatePayflowProTokenOutput = {
  __typename?: 'CreatePayflowProTokenOutput';
  /** The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`. */
  response_message: Scalars['String']['output'];
  /** A non-zero value if any errors occurred. */
  result: Scalars['Int']['output'];
  /** The RESULT returned by PayPal. A value of `0` indicates the transaction was approved. */
  result_code: Scalars['Int']['output'];
  /** A secure token generated by PayPal. */
  secure_token: Scalars['String']['output'];
  /** A secure token ID generated by PayPal. */
  secure_token_id: Scalars['String']['output'];
};

/** Contains payment order details that are used while processing the payment order */
export type CreatePaymentOrderInput = {
  /** The customer cart ID */
  cartId: Scalars['String']['input'];
  /** Defines the origin location for that payment request */
  location: PaymentLocation;
  /** The code for the payment method used in the order */
  methodCode: Scalars['String']['input'];
  /** The identifiable payment source for the payment method */
  paymentSource: Scalars['String']['input'];
  /** Indicates whether the payment information should be vaulted */
  vaultIntent?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Contains payment order details that are used while processing the payment order */
export type CreatePaymentOrderOutput = {
  __typename?: 'CreatePaymentOrderOutput';
  /** The amount of the payment order */
  amount?: Maybe<Scalars['Float']['output']>;
  /** The currency of the payment order */
  currency_code?: Maybe<Scalars['String']['output']>;
  /** PayPal order ID */
  id?: Maybe<Scalars['String']['output']>;
  /** The order ID generated by Payment Services */
  mp_order_id?: Maybe<Scalars['String']['output']>;
  /** The status of the payment order */
  status?: Maybe<Scalars['String']['output']>;
};

/** Defines a new product review. */
export type CreateProductReviewInput = {
  /** The customer's nickname. Defaults to the customer name, if logged in. */
  nickname: Scalars['String']['input'];
  /** The ratings details by category. For example, Price: 5 stars, Quality: 4 stars, etc. */
  ratings: Array<InputMaybe<ProductReviewRatingInput>>;
  /** The SKU of the reviewed product. */
  sku: Scalars['String']['input'];
  /** The summary (title) of the review. */
  summary: Scalars['String']['input'];
  /** The review text. */
  text: Scalars['String']['input'];
};

/** Contains the completed product review. */
export type CreateProductReviewOutput = {
  __typename?: 'CreateProductReviewOutput';
  /** Product review details. */
  review: ProductReview;
};

/** Describe the variables needed to create a vault payment token */
export type CreateVaultCardPaymentTokenInput = {
  /** Description of the vaulted card */
  card_description?: InputMaybe<Scalars['String']['input']>;
  /** The setup token obtained by the createVaultCardSetupToken endpoint */
  setup_token_id: Scalars['String']['input'];
};

/** The vault token id and information about the payment source */
export type CreateVaultCardPaymentTokenOutput = {
  __typename?: 'CreateVaultCardPaymentTokenOutput';
  /** The payment source information */
  payment_source: PaymentSourceOutput;
  /** The vault payment token information */
  vault_token_id: Scalars['String']['output'];
};

/** Describe the variables needed to create a vault card setup token */
export type CreateVaultCardSetupTokenInput = {
  /** The setup token information */
  setup_token: VaultSetupTokenInput;
  /** The 3DS mode */
  three_ds_mode?: InputMaybe<ThreeDsMode>;
};

/** The setup token id information */
export type CreateVaultCardSetupTokenOutput = {
  __typename?: 'CreateVaultCardSetupTokenOutput';
  /** The setup token id */
  setup_token: Scalars['String']['output'];
};

/** Required fields for Payflow Pro and Payments Pro credit card payments. */
export type CreditCardDetailsInput = {
  /** The credit card expiration month. */
  cc_exp_month: Scalars['Int']['input'];
  /** The credit card expiration year. */
  cc_exp_year: Scalars['Int']['input'];
  /** The last 4 digits of the credit card. */
  cc_last_4: Scalars['Int']['input'];
  /** The credit card type. */
  cc_type: Scalars['String']['input'];
};

/** Contains credit memo details. */
export type CreditMemo = {
  __typename?: 'CreditMemo';
  /** Comments on the credit memo. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `CreditMemo` object. */
  id: Scalars['ID']['output'];
  /** An array containing details about refunded items. */
  items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>;
  /** The sequential credit memo number. */
  number: Scalars['String']['output'];
  /** Details about the total refunded amount. */
  total?: Maybe<CreditMemoTotal>;
};

export type CreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'CreditMemoItem';
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
};

/** Credit memo item details. */
export type CreditMemoItemInterface = {
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
};

/** Contains credit memo price details. */
export type CreditMemoTotal = {
  __typename?: 'CreditMemoTotal';
  /** An adjustment manually applied to the order. */
  adjustment: Money;
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the credit memo. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Details about the shipping and handling costs for the credit memo. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The credit memo tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the credit memo. */
  total_shipping: Money;
  /** The amount of tax applied to the credit memo. */
  total_tax: Money;
};

export type Currency = {
  __typename?: 'Currency';
  /** An array of three-letter currency codes accepted by the store, such as USD and EUR. */
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The base currency set for the store, such as USD. */
  base_currency_code?: Maybe<Scalars['String']['output']>;
  /** The symbol for the specified base currency, such as $. */
  base_currency_symbol?: Maybe<Scalars['String']['output']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']['output']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']['output']>;
  /** The currency that is displayed by default, such as USD. */
  default_display_currency_code?: Maybe<Scalars['String']['output']>;
  /** The currency symbol that is displayed by default, such as $. */
  default_display_currency_symbol?: Maybe<Scalars['String']['output']>;
  /** An array of exchange rates for currencies defined in the store. */
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>;
};

/** The list of available currency codes. */
export enum CurrencyEnum {
  Aed = 'AED',
  Afn = 'AFN',
  All = 'ALL',
  Amd = 'AMD',
  Ang = 'ANG',
  Aoa = 'AOA',
  Ars = 'ARS',
  Aud = 'AUD',
  Awg = 'AWG',
  Azm = 'AZM',
  Azn = 'AZN',
  Bam = 'BAM',
  Bbd = 'BBD',
  Bdt = 'BDT',
  Bgn = 'BGN',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bmd = 'BMD',
  Bnd = 'BND',
  Bob = 'BOB',
  Brl = 'BRL',
  Bsd = 'BSD',
  Btn = 'BTN',
  Buk = 'BUK',
  Bwp = 'BWP',
  Byn = 'BYN',
  Bzd = 'BZD',
  Cad = 'CAD',
  Cdf = 'CDF',
  Che = 'CHE',
  Chf = 'CHF',
  Chw = 'CHW',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Crc = 'CRC',
  Cup = 'CUP',
  Cve = 'CVE',
  Czk = 'CZK',
  Djf = 'DJF',
  Dkk = 'DKK',
  Dop = 'DOP',
  Dzd = 'DZD',
  Eek = 'EEK',
  Egp = 'EGP',
  Ern = 'ERN',
  Etb = 'ETB',
  Eur = 'EUR',
  Fjd = 'FJD',
  Fkp = 'FKP',
  Gbp = 'GBP',
  Gek = 'GEK',
  Gel = 'GEL',
  Ghs = 'GHS',
  Gip = 'GIP',
  Gmd = 'GMD',
  Gnf = 'GNF',
  Gqe = 'GQE',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Hkd = 'HKD',
  Hnl = 'HNL',
  Hrk = 'HRK',
  Htg = 'HTG',
  Huf = 'HUF',
  Idr = 'IDR',
  Ils = 'ILS',
  Inr = 'INR',
  Iqd = 'IQD',
  Irr = 'IRR',
  Isk = 'ISK',
  Jmd = 'JMD',
  Jod = 'JOD',
  Jpy = 'JPY',
  Kes = 'KES',
  Kgs = 'KGS',
  Khr = 'KHR',
  Kmf = 'KMF',
  Kpw = 'KPW',
  Krw = 'KRW',
  Kwd = 'KWD',
  Kyd = 'KYD',
  Kzt = 'KZT',
  Lak = 'LAK',
  Lbp = 'LBP',
  Lkr = 'LKR',
  Lrd = 'LRD',
  Lsl = 'LSL',
  Lsm = 'LSM',
  Ltl = 'LTL',
  Lvl = 'LVL',
  Lyd = 'LYD',
  Mad = 'MAD',
  Mdl = 'MDL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mmk = 'MMK',
  Mnt = 'MNT',
  Mop = 'MOP',
  Mro = 'MRO',
  Mur = 'MUR',
  Mvr = 'MVR',
  Mwk = 'MWK',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mzn = 'MZN',
  Nad = 'NAD',
  Ngn = 'NGN',
  Nic = 'NIC',
  Nok = 'NOK',
  Npr = 'NPR',
  Nzd = 'NZD',
  Omr = 'OMR',
  Pab = 'PAB',
  Pen = 'PEN',
  Pgk = 'PGK',
  Php = 'PHP',
  Pkr = 'PKR',
  Pln = 'PLN',
  Pyg = 'PYG',
  Qar = 'QAR',
  Rhd = 'RHD',
  Rol = 'ROL',
  Ron = 'RON',
  Rsd = 'RSD',
  Rub = 'RUB',
  Rwf = 'RWF',
  Sar = 'SAR',
  Sbd = 'SBD',
  Scr = 'SCR',
  Sdg = 'SDG',
  Sek = 'SEK',
  Sgd = 'SGD',
  Shp = 'SHP',
  Skk = 'SKK',
  Sll = 'SLL',
  Sos = 'SOS',
  Srd = 'SRD',
  Std = 'STD',
  Svc = 'SVC',
  Syp = 'SYP',
  Szl = 'SZL',
  Thb = 'THB',
  Tjs = 'TJS',
  Tmm = 'TMM',
  Tnd = 'TND',
  Top = 'TOP',
  Trl = 'TRL',
  Try = 'TRY',
  Ttd = 'TTD',
  Twd = 'TWD',
  Tzs = 'TZS',
  Uah = 'UAH',
  Ugx = 'UGX',
  Usd = 'USD',
  Uyu = 'UYU',
  Uzs = 'UZS',
  Veb = 'VEB',
  Vef = 'VEF',
  Vnd = 'VND',
  Vuv = 'VUV',
  Wst = 'WST',
  Xcd = 'XCD',
  Xof = 'XOF',
  Xpf = 'XPF',
  Yer = 'YER',
  Ytl = 'YTL',
  Zar = 'ZAR',
  Zmk = 'ZMK',
  Zwd = 'ZWD'
}

export type Custom = {
  __typename?: 'Custom';
  guest_checkout?: Maybe<Scalars['Boolean']['output']>;
  store_phone_number?: Maybe<Scalars['String']['output']>;
};

/** Defines an array of custom attributes. */
export type CustomAttributeMetadata = {
  __typename?: 'CustomAttributeMetadata';
  /** An array of attributes. */
  items?: Maybe<Array<Maybe<Attribute>>>;
};

/** An interface containing fields that define the EAV attribute. */
export type CustomAttributeMetadataInterface = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  code: Scalars['ID']['output'];
  /** Default attribute value. */
  default_value?: Maybe<Scalars['String']['output']>;
  /** The type of entity that defines the attribute. */
  entity_type: AttributeEntityTypeEnum;
  /** The frontend class of the attribute. */
  frontend_class?: Maybe<Scalars['String']['output']>;
  /** The frontend input type of the attribute. */
  frontend_input?: Maybe<AttributeFrontendInputEnum>;
  /** Whether the attribute value is required. */
  is_required: Scalars['Boolean']['output'];
  /** Whether the attribute value must be unique. */
  is_unique: Scalars['Boolean']['output'];
  /** The label assigned to the attribute. */
  label?: Maybe<Scalars['String']['output']>;
  /** Attribute options. */
  options: Array<Maybe<CustomAttributeOptionInterface>>;
};

export type CustomAttributeOptionInterface = {
  /** Is the option value default. */
  is_default: Scalars['Boolean']['output'];
  /** The label assigned to the attribute option. */
  label: Scalars['String']['output'];
  /** The attribute option value. */
  value: Scalars['String']['output'];
};

export type CustomBlock = Block & BlockData & {
  __typename?: 'CustomBlock';
  description?: Maybe<Scalars['String']['output']>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  /** @deprecated use link_info array instead */
  link?: Maybe<Scalars['String']['output']>;
  link_info?: Maybe<LinkItems>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  products?: Maybe<Array<Maybe<ProductInterface>>>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  viewall_status?: Maybe<Scalars['Boolean']['output']>;
};

/** Defines the customer name, addresses, and other details. */
export type Customer = {
  __typename?: 'Customer';
  /** Customer Additional Details. */
  additional_info?: Maybe<AdditionalInfo>;
  /** An array containing the customer's shipping and billing addresses. */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>;
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance: Scalars['Boolean']['output'];
  /** The contents of the customer's compare list. */
  compare_list?: Maybe<CompareList>;
  /** The customer's confirmation status. */
  confirmation_status: ConfirmationStatusEnum;
  /** Timestamp indicating when the account was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Customer's custom attributes. */
  custom_attributes?: Maybe<Array<Maybe<AttributeValueInterface>>>;
  /** The customer's date of birth. */
  date_of_birth?: Maybe<Scalars['String']['output']>;
  /** The ID assigned to the billing address. */
  default_billing?: Maybe<Scalars['String']['output']>;
  /** The ID assigned to the shipping address. */
  default_shipping?: Maybe<Scalars['String']['output']>;
  /**
   * The customer's date of birth.
   * @deprecated Use `date_of_birth` instead.
   */
  dob?: Maybe<Scalars['String']['output']>;
  /** The customer's email address. Required. */
  email?: Maybe<Scalars['String']['output']>;
  /** The customer's first name. */
  firstname?: Maybe<Scalars['String']['output']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Customer group should not be exposed in the storefront scenarios. */
  group_id?: Maybe<Scalars['Int']['output']>;
  /**
   * The ID assigned to the customer.
   * @deprecated `id` is not needed as part of `Customer`, because on the server side, it can be identified based on the customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: Maybe<Scalars['Boolean']['output']>;
  /** The customer's family name. */
  lastname?: Maybe<Scalars['String']['output']>;
  /** The customer's middle name. */
  middlename?: Maybe<Scalars['String']['output']>;
  /** Mobile Number */
  mobilenumber?: Maybe<Scalars['String']['output']>;
  /** Reward customer */
  mp_reward?: Maybe<MpRewardCustomersOutput>;
  orders?: Maybe<CustomerOrders>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** Contains the customer's product reviews. */
  reviews: ProductReviews;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  taxvat?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  /**
   * Return a customer's wish lists.
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2` instead.
   */
  wishlist: Wishlist;
  /** Retrieve the wish list identified by the unique ID for a `Wishlist` object. */
  wishlist_v2?: Maybe<Wishlist>;
  /** An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Adobe Commerce. */
  wishlists: Array<Maybe<Wishlist>>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerCustom_AttributesArgs = {
  attributeCodes?: InputMaybe<Array<Scalars['ID']['input']>>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerOrdersArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<CustomerOrdersFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ScopeTypeEnum>;
  sort?: InputMaybe<CustomerOrderSortInput>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerWishlist_V2Args = {
  id: Scalars['ID']['input'];
};


/** Defines the customer name, addresses, and other details. */
export type CustomerWishlistsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Contains detailed information about a customer's billing or shipping address. */
export type CustomerAddress = {
  __typename?: 'CustomerAddress';
  /** The customer's city or town. */
  city?: Maybe<Scalars['String']['output']>;
  /** The customer's company. */
  company?: Maybe<Scalars['String']['output']>;
  /** The customer's country. */
  country_code?: Maybe<CountryCodeEnum>;
  /**
   * The customer's country.
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use custom_attributesV2 instead. */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /** Custom attributes assigned to the customer address. */
  custom_attributesV2: Array<Maybe<AttributeValueInterface>>;
  /**
   * The customer ID
   * @deprecated `customer_id` is not needed as part of `CustomerAddress`. The `id` is a unique identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the address is the customer's default billing address. */
  default_billing?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the address is the customer's default shipping address. */
  default_shipping?: Maybe<Scalars['Boolean']['output']>;
  /** Contains any extension attributes for the address. */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /** The customer's fax number. */
  fax?: Maybe<Scalars['String']['output']>;
  /** The first name of the person associated with the shipping/billing address. */
  firstname?: Maybe<Scalars['String']['output']>;
  /** The ID of a `CustomerAddress` object. */
  id?: Maybe<Scalars['Int']['output']>;
  /** The family name of the person associated with the shipping/billing address. */
  lastname?: Maybe<Scalars['String']['output']>;
  /** The middle name of the person associated with the shipping/billing address. */
  middlename?: Maybe<Scalars['String']['output']>;
  /** The customer's ZIP or postal code. */
  postcode?: Maybe<Scalars['String']['output']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** An object containing the region name, region code, and region ID. */
  region?: Maybe<CustomerAddressRegion>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']['output']>;
  /** An array of strings that define the street number and name. */
  street?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The customer's telephone number. */
  telephone?: Maybe<Scalars['String']['output']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  vat_id?: Maybe<Scalars['String']['output']>;
};


/** Contains detailed information about a customer's billing or shipping address. */
export type CustomerAddressCustom_AttributesV2Args = {
  attributeCodes?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Specifies the attribute code and value of a customer address attribute. */
export type CustomerAddressAttribute = {
  __typename?: 'CustomerAddressAttribute';
  /** The name assigned to the customer address attribute. */
  attribute_code?: Maybe<Scalars['String']['output']>;
  /** The value assigned to the customer address attribute. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Specifies the attribute code and value of a customer attribute. */
export type CustomerAddressAttributeInput = {
  /** The name assigned to the attribute. */
  attribute_code: Scalars['String']['input'];
  /** The value assigned to the attribute. */
  value: Scalars['String']['input'];
};

/** Contains details about a billing or shipping address. */
export type CustomerAddressInput = {
  /** The customer's city or town. */
  city?: InputMaybe<Scalars['String']['input']>;
  /** The customer's company. */
  company?: InputMaybe<Scalars['String']['input']>;
  /** The two-letter code representing the customer's country. */
  country_code?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: use `country_code` instead. */
  country_id?: InputMaybe<CountryCodeEnum>;
  /** Deprecated. Use custom_attributesV2 instead. */
  custom_attributes?: InputMaybe<Array<InputMaybe<CustomerAddressAttributeInput>>>;
  /** Custom attributes assigned to the customer address. */
  custom_attributesV2?: InputMaybe<Array<InputMaybe<AttributeValueInput>>>;
  /** Indicates whether the address is the default billing address. */
  default_billing?: InputMaybe<Scalars['Boolean']['input']>;
  /** Indicates whether the address is the default shipping address. */
  default_shipping?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's fax number. */
  fax?: InputMaybe<Scalars['String']['input']>;
  /** The first name of the person associated with the billing/shipping address. */
  firstname?: InputMaybe<Scalars['String']['input']>;
  /** The family name of the person associated with the billing/shipping address. */
  lastname?: InputMaybe<Scalars['String']['input']>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: InputMaybe<Scalars['String']['input']>;
  /** The customer's ZIP or postal code. */
  postcode?: InputMaybe<Scalars['String']['input']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']['input']>;
  /** An object containing the region name, region code, and region ID. */
  region?: InputMaybe<CustomerAddressRegionInput>;
  /** An array of strings that define the street number and name. */
  street?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']['input']>;
  /** The customer's telephone number. */
  telephone?: InputMaybe<Scalars['String']['input']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  vat_id?: InputMaybe<Scalars['String']['input']>;
};

/** Defines the customer's state or province. */
export type CustomerAddressRegion = {
  __typename?: 'CustomerAddressRegion';
  /** The state or province name. */
  region?: Maybe<Scalars['String']['output']>;
  /** The address region code. */
  region_code?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']['output']>;
};

/** Defines the customer's state or province. */
export type CustomerAddressRegionInput = {
  /** The state or province name. */
  region?: InputMaybe<Scalars['String']['input']>;
  /** The address region code. */
  region_code?: InputMaybe<Scalars['String']['input']>;
  /** The unique ID for a pre-defined region. */
  region_id?: InputMaybe<Scalars['Int']['input']>;
};

/** Customer attribute metadata. */
export type CustomerAttributeMetadata = CustomAttributeMetadataInterface & {
  __typename?: 'CustomerAttributeMetadata';
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  code: Scalars['ID']['output'];
  /** Default attribute value. */
  default_value?: Maybe<Scalars['String']['output']>;
  /** The type of entity that defines the attribute. */
  entity_type: AttributeEntityTypeEnum;
  /** The frontend class of the attribute. */
  frontend_class?: Maybe<Scalars['String']['output']>;
  /** The frontend input type of the attribute. */
  frontend_input?: Maybe<AttributeFrontendInputEnum>;
  /** The template used for the input of the attribute (e.g., 'date'). */
  input_filter?: Maybe<InputFilterEnum>;
  /** Whether the attribute value is required. */
  is_required: Scalars['Boolean']['output'];
  /** Whether the attribute value must be unique. */
  is_unique: Scalars['Boolean']['output'];
  /** The label assigned to the attribute. */
  label?: Maybe<Scalars['String']['output']>;
  /** The number of lines of the attribute value. */
  multiline_count?: Maybe<Scalars['Int']['output']>;
  /** Attribute options. */
  options: Array<Maybe<CustomAttributeOptionInterface>>;
  /** The position of the attribute in the form. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The validation rules of the attribute value. */
  validate_rules?: Maybe<Array<Maybe<ValidationRule>>>;
};

/** An input object for creating a customer. */
export type CustomerCreateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's custom attributes. */
  custom_attributes?: InputMaybe<Array<InputMaybe<AttributeValueInput>>>;
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']['input']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']['input']>;
  /** The customer's email address. */
  email: Scalars['String']['input'];
  /** The customer's first name. */
  firstname: Scalars['String']['input'];
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']['input']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's family name. */
  lastname: Scalars['String']['input'];
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']['input']>;
  /** Mobile Number */
  mobilenumber: Scalars['String']['input'];
  /** The customer's password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']['input']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']['input']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']['input']>;
};

/** Contains details about a single downloadable product. */
export type CustomerDownloadableProduct = {
  __typename?: 'CustomerDownloadableProduct';
  /** The date and time the purchase was made. */
  date?: Maybe<Scalars['String']['output']>;
  /** The fully qualified URL to the download file. */
  download_url?: Maybe<Scalars['String']['output']>;
  /** The unique ID assigned to the item. */
  order_increment_id?: Maybe<Scalars['String']['output']>;
  /** The remaining number of times the customer can download the product. */
  remaining_downloads?: Maybe<Scalars['String']['output']>;
  /** Indicates when the product becomes available for download. Options are `Pending` and `Invoiced`. */
  status?: Maybe<Scalars['String']['output']>;
};

/** Contains a list of downloadable products. */
export type CustomerDownloadableProducts = {
  __typename?: 'CustomerDownloadableProducts';
  /** An array of purchased downloadable items. */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>;
};

export type CustomerFeedbackInput = {
  description: Scalars['String']['input'];
  order_id: Scalars['Int']['input'];
  rating: Scalars['Int']['input'];
};

export type CustomerFeedbackOutput = {
  __typename?: 'CustomerFeedbackOutput';
  message?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** An input object that assigns or updates customer attributes. */
export type CustomerInput = {
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']['input']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']['input']>;
  /** The customer's email address. Required when creating a customer. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** The customer's first name. */
  firstname?: InputMaybe<Scalars['String']['input']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']['input']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's family name. */
  lastname?: InputMaybe<Scalars['String']['input']>;
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']['input']>;
  /** Mobile Number */
  mobilenumber?: InputMaybe<Scalars['String']['input']>;
  /** Refer Code */
  mp_refer?: InputMaybe<Scalars['String']['input']>;
  /** The customer's password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']['input']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']['input']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']['input']>;
};

/** Contains details about each of the customer's orders. */
export type CustomerOrder = {
  __typename?: 'CustomerOrder';
  /** Coupons applied to the order. */
  applied_coupons: Array<Maybe<AppliedCoupon>>;
  /** The billing address for the order. */
  billing_address?: Maybe<OrderAddress>;
  /** The shipping carrier for the order delivery. */
  carrier?: Maybe<Scalars['String']['output']>;
  /** Comments about the order. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** @deprecated Use the `order_date` field instead. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** A list of credit memos. */
  credit_memos?: Maybe<Array<Maybe<CreditMemo>>>;
  /** Order customer email. */
  email?: Maybe<Scalars['String']['output']>;
  /** The entered gift message for the order */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use the `totals.grand_total` field instead. */
  grand_total?: Maybe<Scalars['Float']['output']>;
  /** The unique ID for a `CustomerOrder` object. */
  id: Scalars['ID']['output'];
  /** @deprecated Use the `id` field instead. */
  increment_id?: Maybe<Scalars['String']['output']>;
  /** A list of invoices for the order. */
  invoices: Array<Maybe<Invoice>>;
  /** An array containing the items purchased in this order. */
  items?: Maybe<Array<Maybe<OrderItemInterface>>>;
  /** GetMageplaza Reward Points Information(compatible with 2.3.x). */
  mp_reward_points?: Maybe<MpRewardPointsOutput>;
  /** The order number. */
  number: Scalars['String']['output'];
  /** The date the order was placed. */
  order_date: Scalars['String']['output'];
  /** The order note from order. */
  order_note?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use the `number` field instead. */
  order_number: Scalars['String']['output'];
  /** Payment details for the order. */
  payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>;
  /** A list of shipments for the order. */
  shipments?: Maybe<Array<Maybe<OrderShipment>>>;
  /** The shipping address for the order. */
  shipping_address?: Maybe<OrderAddress>;
  /** The delivery method for the order. */
  shipping_method?: Maybe<Scalars['String']['output']>;
  /** The current status of the order. */
  status: Scalars['String']['output'];
  /** The token that can be used to retrieve the order using order query. */
  token: Scalars['String']['output'];
  /** Details about the calculated totals for this order. */
  total?: Maybe<OrderTotal>;
  /** The query searches for reward customer. */
  transactions?: Maybe<MpRewardTransactionsListOutput>;
};


/** Contains details about each of the customer's orders. */
export type CustomerOrderTransactionsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<MpRewardTransactionsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** CustomerOrderSortInput specifies the field to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type CustomerOrderSortInput = {
  /** This enumeration indicates whether to return results in ascending or descending order */
  sort_direction: SortEnum;
  /** Specifies the field to use for sorting */
  sort_field: CustomerOrderSortableField;
};

/** Specifies the field to use for sorting */
export enum CustomerOrderSortableField {
  /** Sorts customer orders by created_at field */
  CreatedAt = 'CREATED_AT',
  /** Sorts customer orders by number */
  Number = 'NUMBER'
}

/** The collection of orders that match the conditions defined in the filter. */
export type CustomerOrders = {
  __typename?: 'CustomerOrders';
  /** An array of customer orders. */
  items: Array<Maybe<CustomerOrder>>;
  /** Contains pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total count of customer orders. */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Identifies the filter to use for filtering orders. */
export type CustomerOrdersFilterInput = {
  /** Filters by order number. */
  number?: InputMaybe<FilterStringTypeInput>;
};

/** Contains details about a newly-created or updated customer. */
export type CustomerOutput = {
  __typename?: 'CustomerOutput';
  /** Customer details after creating or updating a customer. */
  customer: Customer;
};

/** Contains payment tokens stored in the customer's vault. */
export type CustomerPaymentTokens = {
  __typename?: 'CustomerPaymentTokens';
  /** An array of payment tokens. */
  items: Array<Maybe<PaymentToken>>;
};

/** Contains a customer authorization token. */
export type CustomerToken = {
  __typename?: 'CustomerToken';
  /** The customer authorization token. */
  token?: Maybe<Scalars['String']['output']>;
};

/** An input object for updating a customer. */
export type CustomerUpdateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's custom attributes. */
  custom_attributes?: InputMaybe<Array<InputMaybe<AttributeValueInput>>>;
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']['input']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']['input']>;
  /** The customer's first name. */
  firstname?: InputMaybe<Scalars['String']['input']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']['input']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']['input']>;
  /** The customer's family name. */
  lastname?: InputMaybe<Scalars['String']['input']>;
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']['input']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']['input']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']['input']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']['input']>;
};

/** Contains information about a text area that is defined as part of a customizable option. */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableAreaOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>;
};

/** Defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  __typename?: 'CustomizableAreaValue';
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableAreaValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a set of checkbox values that are defined as part of a customizable option. */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableCheckboxOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized set of checkbox values. */
export type CustomizableCheckboxValue = {
  __typename?: 'CustomizableCheckboxValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableCheckboxValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a date picker that is defined as part of a customizable option. */
export type CustomizableDateOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDateOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>;
};

/** Defines the customizable date type. */
export enum CustomizableDateTypeEnum {
  Date = 'DATE',
  DateTime = 'DATE_TIME',
  Time = 'TIME'
}

/** Defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  __typename?: 'CustomizableDateValue';
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** DATE, DATE_TIME or TIME */
  type?: Maybe<CustomizableDateTypeEnum>;
  /** The unique ID for a `CustomizableDateValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a drop down menu that is defined as part of a customizable option. */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDropDownOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized drop down menu. */
export type CustomizableDropDownValue = {
  __typename?: 'CustomizableDropDownValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableDropDownValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a text field that is defined as part of a customizable option. */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFieldOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>;
};

/** Defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  __typename?: 'CustomizableFieldValue';
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']['output']>;
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableFieldValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a file picker that is defined as part of a customizable option. */
export type CustomizableFileOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFileOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>;
};

/** Defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  __typename?: 'CustomizableFileValue';
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']['output']>;
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']['output']>;
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableFileValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about a multiselect that is defined as part of a customizable option. */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableMultipleOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized multiselect. */
export type CustomizableMultipleValue = {
  __typename?: 'CustomizableMultipleValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableMultipleValue` object. */
  uid: Scalars['ID']['output'];
};

/** Defines a customizable option. */
export type CustomizableOptionInput = {
  /** The customizable option ID of the product. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The unique ID for a `CartItemInterface` object. */
  uid?: InputMaybe<Scalars['ID']['input']>;
  /** The string value of the option. */
  value_string: Scalars['String']['input'];
};

/** Contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export type CustomizableOptionInterface = {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
};

/** Contains information about a set of radio buttons that are defined as part of a customizable option. */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableRadioOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']['output']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']['output'];
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized set of radio buttons. */
export type CustomizableRadioValue = {
  __typename?: 'CustomizableRadioValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']['output']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']['output']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `CustomizableRadioValue` object. */
  uid: Scalars['ID']['output'];
};

/** Contains the results of the request to delete a compare list. */
export type DeleteCompareListOutput = {
  __typename?: 'DeleteCompareListOutput';
  /** Indicates whether the compare list was successfully deleted. */
  result: Scalars['Boolean']['output'];
};

/** Indicates whether the request succeeded and returns the remaining customer payment tokens. */
export type DeletePaymentTokenOutput = {
  __typename?: 'DeletePaymentTokenOutput';
  /** A container for the customer's remaining payment tokens. */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  /** Indicates whether the request succeeded. */
  result: Scalars['Boolean']['output'];
};

export type DetailedSummary = {
  __typename?: 'DetailedSummary';
  /** Five stars. */
  five?: Maybe<Scalars['Int']['output']>;
  /** Four stars. */
  four?: Maybe<Scalars['Int']['output']>;
  /** One star. */
  one?: Maybe<Scalars['Int']['output']>;
  /** Three stars. */
  three?: Maybe<Scalars['Int']['output']>;
  /** Two stars. */
  two?: Maybe<Scalars['Int']['output']>;
};

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item, shipping. */
export type Discount = {
  __typename?: 'Discount';
  /** The amount of the discount. */
  amount: Money;
  /** The type of the entity the discount is applied to. */
  applied_to: CartDiscountType;
  /** The coupon related to the discount. */
  coupon?: Maybe<AppliedCoupon>;
  /** A description of the discount. */
  label: Scalars['String']['output'];
};

/** An implementation for downloadable product cart items. */
export type DownloadableCartItem = CartItemInterface & {
  __typename?: 'DownloadableCartItem';
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** An array containing information about the links for the downloadable product added to the cart. */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** An array containing information about samples of the selected downloadable product. */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Defines downloadable product options for `CreditMemoItemInterface`. */
export type DownloadableCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'DownloadableCreditMemoItem';
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are refunded from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
};

export enum DownloadableFileTypeEnum {
  /** @deprecated `sample_url` serves to get the downloadable sample */
  File = 'FILE',
  /** @deprecated `sample_url` serves to get the downloadable sample */
  Url = 'URL'
}

/** Defines downloadable product options for `InvoiceItemInterface`. */
export type DownloadableInvoiceItem = InvoiceItemInterface & {
  __typename?: 'DownloadableInvoiceItem';
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are invoiced from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
};

/** Defines characteristics of the links for downloadable product. */
export type DownloadableItemsLinks = {
  __typename?: 'DownloadableItemsLinks';
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name of the link. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `DownloadableItemsLinks` object. */
  uid: Scalars['ID']['output'];
};

/** Defines downloadable product options for `OrderItemInterface`. */
export type DownloadableOrderItem = OrderItemInterface & {
  __typename?: 'DownloadableOrderItem';
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are ordered from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The selected gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The ProductInterface object, which contains details about the base product */
  product?: Maybe<ProductInterface>;
  product_image?: Maybe<Scalars['String']['output']>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']['output']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']['output']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']['output']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']['output']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']['output']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']['output']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']['output']>;
};

/** Defines a product that the shopper downloads. */
export type DownloadableProduct = CustomizableProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'DownloadableProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** An array containing information about the links for this downloadable product. */
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** An array containing information about samples of this downloadable product. */
  downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /** A value of 1 indicates that each link in the array must be purchased separately. */
  links_purchased_separately?: Maybe<Scalars['Int']['output']>;
  /** The heading above the list of downloadable products. */
  links_title?: Maybe<Scalars['String']['output']>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines a product that the shopper downloads. */
export type DownloadableProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines a product that the shopper downloads. */
export type DownloadableProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Defines a single downloadable product. */
export type DownloadableProductCartItemInput = {
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the downloadable product. */
  data: CartItemInput;
  /** An array of objects containing the link_id of the downloadable product link. */
  downloadable_product_links?: InputMaybe<Array<InputMaybe<DownloadableProductLinksInput>>>;
};

/** Defines characteristics of a downloadable product. */
export type DownloadableProductLinks = {
  __typename?: 'DownloadableProductLinks';
  /** @deprecated This information should not be exposed on frontend. */
  id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated This information should not be exposed on frontend. */
  is_shareable?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>;
  /** @deprecated This information should not be exposed on frontend. */
  number_of_downloads?: Maybe<Scalars['Int']['output']>;
  /** The price of the downloadable product. */
  price?: Maybe<Scalars['Float']['output']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']['output']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** The full URL to the downloadable sample. */
  sample_url?: Maybe<Scalars['String']['output']>;
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name of the link. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `DownloadableProductLinks` object. */
  uid: Scalars['ID']['output'];
};

/** Contains the link ID for the downloadable product. */
export type DownloadableProductLinksInput = {
  /** The unique ID of the downloadable product link. */
  link_id: Scalars['Int']['input'];
};

/** Defines characteristics of a downloadable product. */
export type DownloadableProductSamples = {
  __typename?: 'DownloadableProductSamples';
  /** @deprecated This information should not be exposed on frontend. */
  id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']['output']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** The full URL to the downloadable sample. */
  sample_url?: Maybe<Scalars['String']['output']>;
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']['output']>;
  /** The display name of the sample. */
  title?: Maybe<Scalars['String']['output']>;
};

/** A downloadable product wish list item. */
export type DownloadableWishlistItem = WishlistItemInterface & {
  __typename?: 'DownloadableWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** An array containing information about the selected links. */
  links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
  /** An array containing information about the selected samples. */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
};

export type Emirates = {
  __typename?: 'Emirates';
  /** Emirates name */
  name?: Maybe<Scalars['String']['output']>;
  /** The regions */
  region?: Maybe<Array<Maybe<Region>>>;
};

/** Defines a customer-entered option. */
export type EnteredOptionInput = {
  /** The unique ID for a `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object. */
  uid: Scalars['ID']['input'];
  /** Text the customer entered. */
  value: Scalars['String']['input'];
};

/** Contains the `uid`, `relative_url`, and `type` attributes. */
export type EntityUrl = {
  __typename?: 'EntityUrl';
  /** @deprecated Use `relative_url` instead. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, or similar object associated with the specified URL. This could be a product, category, or CMS page UID. */
  entity_uid?: Maybe<Scalars['ID']['output']>;
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
   * @deprecated Use `entity_uid` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirectCode?: Maybe<Scalars['Int']['output']>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

export type ErrorInterface = {
  /** The returned error message. */
  message: Scalars['String']['output'];
};

/** Contains details about an address. */
export type EstimateAddressInput = {
  /** The two-letter code representing the customer's country. */
  country_code: CountryCodeEnum;
  /** The customer's ZIP or postal code. */
  postcode?: InputMaybe<Scalars['String']['input']>;
  /** An object containing the region name, region code, and region ID. */
  region?: InputMaybe<CustomerAddressRegionInput>;
};

export type EstimateTotalsInput = {
  /** Customer's address to estimate totals. */
  address: EstimateAddressInput;
  /** The unique ID of the cart to query. */
  cart_id: Scalars['String']['input'];
  /** Selected shipping method to estimate totals. */
  shipping_method?: InputMaybe<ShippingMethodInput>;
};

/** Estimate totals output. */
export type EstimateTotalsOutput = {
  __typename?: 'EstimateTotalsOutput';
  /** Cart after totals estimation */
  cart?: Maybe<Cart>;
};

/** Lists the exchange rate. */
export type ExchangeRate = {
  __typename?: 'ExchangeRate';
  /** Specifies the store’s default currency to exchange to. */
  currency_to?: Maybe<Scalars['String']['output']>;
  /** The exchange rate for the store’s default currency. */
  rate?: Maybe<Scalars['Float']['output']>;
};

export type ExcludedPages = {
  __typename?: 'ExcludedPages';
  identifire?: Maybe<Scalars['String']['output']>;
};

export type FacetData = {
  __typename?: 'FacetData';
  attribute?: Maybe<Scalars['String']['output']>;
  total_values?: Maybe<Scalars['Int']['output']>;
  values?: Maybe<Array<Maybe<FacetValues>>>;
};

export type FacetValues = {
  __typename?: 'FacetValues';
  count?: Maybe<Scalars['Int']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

export type FeaturedBrandsBlock = Block & BlockData & {
  __typename?: 'FeaturedBrandsBlock';
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  /** Brand Details. */
  featured_brands?: Maybe<Array<Maybe<BrandData>>>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** Use this attribute to exactly match the specified string. For example, to filter on a specific category ID, specify a value such as `5`. */
  eq?: InputMaybe<Scalars['String']['input']>;
  /** Use this attribute to filter on an array of values. For example, to filter on category IDs 4, 5, and 6, specify a value of `["4", "5", "6"]`. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export enum FilterMatchTypeEnum {
  Full = 'FULL',
  Partial = 'PARTIAL'
}

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** Use this attribute to fuzzy match the specified string. For example, to filter on a specific SKU, specify a value such as `24-MB01`. */
  match?: InputMaybe<Scalars['String']['input']>;
  /** Filter match type for fine-tuned results. Possible values FULL or PARTIAL. If match_type is not provided, returned results will default to FULL match. */
  match_type?: InputMaybe<FilterMatchTypeEnum>;
};

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** Use this attribute to specify the lowest possible value in the range. */
  from?: InputMaybe<Scalars['String']['input']>;
  /** Use this attribute to specify the highest possible value in the range. */
  to?: InputMaybe<Scalars['String']['input']>;
};

/** Defines a filter for an input string. */
export type FilterStringTypeInput = {
  /** Filters items that are exactly the same as the specified string. */
  eq?: InputMaybe<Scalars['String']['input']>;
  /** Filters items that are exactly the same as entries specified in an array of strings. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Defines a filter that performs a fuzzy search using the specified string. */
  match?: InputMaybe<Scalars['String']['input']>;
};

/** Defines the comparison operators that can be used in a filter. */
export type FilterTypeInput = {
  /** Equals. */
  eq?: InputMaybe<Scalars['String']['input']>;
  finset?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** From. Must be used with the `to` field. */
  from?: InputMaybe<Scalars['String']['input']>;
  /** Greater than. */
  gt?: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to. */
  gteq?: InputMaybe<Scalars['String']['input']>;
  /** In. The value can contain a set of comma-separated values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters. */
  like?: InputMaybe<Scalars['String']['input']>;
  /** Less than. */
  lt?: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to. */
  lteq?: InputMaybe<Scalars['String']['input']>;
  /** More than or equal to. */
  moreq?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to. */
  neq?: InputMaybe<Scalars['String']['input']>;
  /** Not in. The value can contain a set of comma-separated values. */
  nin?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Not null. */
  notnull?: InputMaybe<Scalars['String']['input']>;
  /** Is null. */
  null?: InputMaybe<Scalars['String']['input']>;
  /** To. Must be used with the `from` field. */
  to?: InputMaybe<Scalars['String']['input']>;
};

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  __typename?: 'FixedProductTax';
  /** The amount of the Fixed Product Tax. */
  amount?: Maybe<Money>;
  /** The display label assigned to the Fixed Product Tax. */
  label?: Maybe<Scalars['String']['output']>;
};

/** Lists display settings for the Fixed Product Tax. */
export enum FixedProductTaxDisplaySettings {
  /** The displayed price does not include the FPT amount. The values of `ProductPrice.fixed_product_taxes` and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price.' */
  ExcludeFptAndIncludeWithDetails = 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS',
  /** The displayed price does not include the FPT amount. The values from `ProductPrice.fixed_product_taxes` are not displayed. This value corresponds to 'Excluding FPT'. */
  ExcludeFptWithoutDetails = 'EXCLUDE_FPT_WITHOUT_DETAILS',
  /** The FPT feature is not enabled. You can omit `ProductPrice.fixed_product_taxes` from your query. */
  FptDisabled = 'FPT_DISABLED',
  /** The displayed price includes the FPT amount without displaying the `ProductPrice.fixed_product_taxes` values. This value corresponds to 'Including FPT only'. */
  IncludeFptWithoutDetails = 'INCLUDE_FPT_WITHOUT_DETAILS',
  /** The displayed price includes the FPT amount while displaying the values of `ProductPrice.fixed_product_taxes` separately. This value corresponds to 'Including FPT and FPT description'. */
  IncludeFptWithDetails = 'INCLUDE_FPT_WITH_DETAILS'
}

export type FooterMenu = {
  __typename?: 'FooterMenu';
  categories?: Maybe<Array<Maybe<MenuLink>>>;
  usefulLinks?: Maybe<Array<Maybe<MenuLink>>>;
};

export type GtmCodeOutput = {
  __typename?: 'GTMCodeOutput';
  /** Code */
  code?: Maybe<Scalars['String']['output']>;
};

export type GtmHeadOutput = {
  __typename?: 'GTMHeadOutput';
  /** Head */
  head?: Maybe<Scalars['String']['output']>;
};

export type General = {
  __typename?: 'General';
  /** Display author. */
  display_author?: Maybe<Scalars['Int']['output']>;
  /** Display Blogs Mode. */
  display_style?: Maybe<Scalars['Int']['output']>;
  /** Choose blog's color. */
  font_color?: Maybe<Scalars['String']['output']>;
  /** Blog Name. */
  name?: Maybe<Scalars['String']['output']>;
  /** Show Blog Link in Top Menu. */
  toplinks?: Maybe<Scalars['Int']['output']>;
};

export type GeneralConfig = {
  __typename?: 'GeneralConfig';
  admin_api_key?: Maybe<Scalars['String']['output']>;
  cloud_key?: Maybe<Scalars['String']['output']>;
  collections?: Maybe<Array<Maybe<Collections>>>;
  index_name?: Maybe<Scalars['String']['output']>;
  module_status?: Maybe<Scalars['Boolean']['output']>;
  nearest_node?: Maybe<Scalars['String']['output']>;
  node?: Maybe<Scalars['String']['output']>;
  port?: Maybe<Scalars['Int']['output']>;
  protocol?: Maybe<Scalars['String']['output']>;
  search_api_key?: Maybe<Scalars['String']['output']>;
};

/** Identifies which customer requires remote shopping assistance. */
export type GenerateCustomerTokenAsAdminInput = {
  /** The email address of the customer requesting remote shopping assistance. */
  customer_email: Scalars['String']['input'];
};

/** Contains the generated customer token. */
export type GenerateCustomerTokenAsAdminOutput = {
  __typename?: 'GenerateCustomerTokenAsAdminOutput';
  /** The generated customer token. */
  customer_token: Scalars['String']['output'];
};

export type GetLatLong = {
  /** latitude */
  lat?: InputMaybe<Scalars['Float']['input']>;
  /** longitude */
  lng?: InputMaybe<Scalars['Float']['input']>;
};

/** Gets the payment SDK URLs and values */
export type GetPaymentSdkOutput = {
  __typename?: 'GetPaymentSDKOutput';
  /** The payment SDK parameters */
  sdkParams?: Maybe<Array<Maybe<PaymentSdkParamsItem>>>;
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessage = {
  __typename?: 'GiftMessage';
  /** Sender name */
  from: Scalars['String']['output'];
  /** Gift message text */
  message: Scalars['String']['output'];
  /** Recipient name */
  to: Scalars['String']['output'];
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessageInput = {
  /** Sender name */
  from: Scalars['String']['input'];
  /** Gift message text */
  message: Scalars['String']['input'];
  /** Recipient name */
  to: Scalars['String']['input'];
};

export type GooglePayButtonStyles = {
  __typename?: 'GooglePayButtonStyles';
  /** The button color */
  color?: Maybe<Scalars['String']['output']>;
  /** The button height in pixels */
  height?: Maybe<Scalars['Int']['output']>;
  /** The button type */
  type?: Maybe<Scalars['String']['output']>;
};

export type GooglePayConfig = PaymentConfigItem & {
  __typename?: 'GooglePayConfig';
  /** The styles for the GooglePay Button configuration */
  button_styles?: Maybe<GooglePayButtonStyles>;
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The payment source for the payment method */
  payment_source?: Maybe<Scalars['String']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /** 3DS mode */
  three_ds_mode?: Maybe<ThreeDsMode>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

/** Google Pay inputs */
export type GooglePayMethodInput = {
  /** The payment source for the payment method */
  payment_source?: InputMaybe<Scalars['String']['input']>;
  /** The payment services order ID */
  payments_order_id?: InputMaybe<Scalars['String']['input']>;
  /** PayPal order ID */
  paypal_order_id?: InputMaybe<Scalars['String']['input']>;
};

/** Defines a grouped product, which consists of simple standalone products that are presented as a group. */
export type GroupedProduct = PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'GroupedProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /** An array containing grouped product items. */
  items?: Maybe<Array<Maybe<GroupedProductItem>>>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']['output']>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines a grouped product, which consists of simple standalone products that are presented as a group. */
export type GroupedProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines a grouped product, which consists of simple standalone products that are presented as a group. */
export type GroupedProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Contains information about an individual grouped product item. */
export type GroupedProductItem = {
  __typename?: 'GroupedProductItem';
  /** The relative position of this item compared to the other group items. */
  position?: Maybe<Scalars['Int']['output']>;
  /** Details about this product option. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this grouped product item. */
  qty?: Maybe<Scalars['Float']['output']>;
};

/** A grouped product wish list item. */
export type GroupedProductWishlistItem = WishlistItemInterface & {
  __typename?: 'GroupedProductWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

export type HeaderMenu = {
  __typename?: 'HeaderMenu';
  menuItems?: Maybe<Array<Maybe<MenuLink>>>;
};

/** The type contains data of homepage */
export type HomePage = {
  __typename?: 'HomePage';
  blocks?: Maybe<Blocks>;
};


/** The type contains data of homepage */
export type HomePageBlocksArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<BlockFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

export type HostedFieldsConfig = PaymentConfigItem & {
  __typename?: 'HostedFieldsConfig';
  /** Vault payment method code */
  cc_vault_code?: Maybe<Scalars['String']['output']>;
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Card vault enabled */
  is_vault_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The payment source for the payment method */
  payment_source?: Maybe<Scalars['String']['output']>;
  /** Card and bin details required */
  requires_card_details?: Maybe<Scalars['Boolean']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /**
   * Whether 3DS is activated; true if 3DS mode is not OFF.
   * @deprecated Use 'three_ds_mode' instead.
   */
  three_ds?: Maybe<Scalars['Boolean']['output']>;
  /** 3DS mode */
  three_ds_mode?: Maybe<ThreeDsMode>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

/** Hosted Fields payment inputs */
export type HostedFieldsInput = {
  /** Card bin number */
  cardBin?: InputMaybe<Scalars['String']['input']>;
  /** Expiration month of the card */
  cardExpiryMonth?: InputMaybe<Scalars['String']['input']>;
  /** Expiration year of the card */
  cardExpiryYear?: InputMaybe<Scalars['String']['input']>;
  /** Last four digits of the card */
  cardLast4?: InputMaybe<Scalars['String']['input']>;
  /** Name on the card */
  holderName?: InputMaybe<Scalars['String']['input']>;
  /** Indicates whether details about the shopper's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for the Payment Services payment integration. */
  is_active_payment_token_enabler?: InputMaybe<Scalars['Boolean']['input']>;
  /** The payment source for the payment method */
  payment_source?: InputMaybe<Scalars['String']['input']>;
  /** The payment services order ID */
  payments_order_id?: InputMaybe<Scalars['String']['input']>;
  /** PayPal order ID */
  paypal_order_id?: InputMaybe<Scalars['String']['input']>;
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export type HostedProInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. For example, if the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']['input'];
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. For example, if the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']['input'];
};

/** Contains the secure URL used for the Payments Pro Hosted Solution payment method. */
export type HostedProUrl = {
  __typename?: 'HostedProUrl';
  /** The secure URL generated by PayPal. */
  secure_form_url?: Maybe<Scalars['String']['output']>;
};

/** Contains the required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String']['input'];
};

export type HotRequestOutput = {
  __typename?: 'HotRequestOutput';
  message?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** Contains target path parameters. */
export type HttpQueryParameter = {
  __typename?: 'HttpQueryParameter';
  /** A parameter name. */
  name?: Maybe<Scalars['String']['output']>;
  /** A parameter value. */
  value?: Maybe<Scalars['String']['output']>;
};

export type Icon = {
  __typename?: 'Icon';
  /** icon url */
  url?: Maybe<Scalars['String']['output']>;
};

export type Id = {
  Id?: InputMaybe<Scalars['Int']['input']>;
};

export type ImageSwatchData = SwatchDataInterface & {
  __typename?: 'ImageSwatchData';
  /** The URL assigned to the thumbnail of the swatch image. */
  thumbnail?: Maybe<Scalars['String']['output']>;
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']['output']>;
};

export type Images = {
  __typename?: 'Images';
  /** Image full path. */
  full_path?: Maybe<Scalars['String']['output']>;
  /** Resized image path. */
  resized_path?: Maybe<Scalars['String']['output']>;
};

/** List of templates/filters applied to customer attribute input. */
export enum InputFilterEnum {
  /** Forces attribute input to follow the date format. */
  Date = 'DATE',
  /** Escape HTML Entities. */
  Escapehtml = 'ESCAPEHTML',
  /** There are no templates or filters to be applied. */
  None = 'NONE',
  /** Strip HTML Tags. */
  Striptags = 'STRIPTAGS',
  /** Strip whitespace (or other characters) from the beginning and end of the input. */
  Trim = 'TRIM'
}

/** Contains an error message when an internal error occurred. */
export type InternalError = ErrorInterface & {
  __typename?: 'InternalError';
  /** The returned error message. */
  message: Scalars['String']['output'];
};

/** Contains invoice details. */
export type Invoice = {
  __typename?: 'Invoice';
  /** Comments on the invoice. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `Invoice` object. */
  id: Scalars['ID']['output'];
  /** Invoiced product details. */
  items?: Maybe<Array<Maybe<InvoiceItemInterface>>>;
  /** Sequential invoice number. */
  number: Scalars['String']['output'];
  /** Invoice total amount details. */
  total?: Maybe<InvoiceTotal>;
};

export type InvoiceItem = InvoiceItemInterface & {
  __typename?: 'InvoiceItem';
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
};

/** Contains detailes about invoiced items. */
export type InvoiceItemInterface = {
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
};

/** Contains price details from an invoice. */
export type InvoiceTotal = {
  __typename?: 'InvoiceTotal';
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the invoice. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Details about the shipping and handling costs for the invoice. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The invoice tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the invoice. */
  total_shipping: Money;
  /** The amount of tax applied to the invoice. */
  total_tax: Money;
};

/** Contains the result of the `isEmailAvailable` query. */
export type IsEmailAvailableOutput = {
  __typename?: 'IsEmailAvailableOutput';
  /** Indicates whether the specified email address can be used to create a customer. */
  is_email_available?: Maybe<Scalars['Boolean']['output']>;
};

/** A list of options of the selected bundle product. */
export type ItemSelectedBundleOption = {
  __typename?: 'ItemSelectedBundleOption';
  /**
   * The unique ID for a `ItemSelectedBundleOption` object.
   * @deprecated Use `uid` instead.
   */
  id: Scalars['ID']['output'];
  /** The label of the option. */
  label: Scalars['String']['output'];
  /** The unique ID for a `ItemSelectedBundleOption` object. */
  uid: Scalars['ID']['output'];
  /** A list of products that represent the values of the parent option. */
  values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>;
};

/** A list of values for the selected bundle product. */
export type ItemSelectedBundleOptionValue = {
  __typename?: 'ItemSelectedBundleOptionValue';
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object.
   * @deprecated Use `uid` instead.
   */
  id: Scalars['ID']['output'];
  /** The price of the child bundle product. */
  price: Money;
  /** The name of the child bundle product. */
  product_name: Scalars['String']['output'];
  /** The SKU of the child bundle product. */
  product_sku: Scalars['String']['output'];
  /** The number of this bundle product that were ordered. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `ItemSelectedBundleOptionValue` object. */
  uid: Scalars['ID']['output'];
};

/** An array containing all the items of order */
export type Items = {
  __typename?: 'Items';
  /** price of Sales Order Item */
  price?: Maybe<Scalars['Float']['output']>;
  /** SKU of Sales Order Item */
  sku?: Maybe<Scalars['String']['output']>;
  /** title of Sales Order Item */
  title?: Maybe<Scalars['String']['output']>;
};

/** Contains a key-value pair. */
export type KeyValue = {
  __typename?: 'KeyValue';
  /** The name part of the key/value pair. */
  name?: Maybe<Scalars['String']['output']>;
  /** The value part of the key/value pair. */
  value?: Maybe<Scalars['String']['output']>;
};

export type LabelRules = {
  __typename?: 'LabelRules';
  /** Is the bestseller products applied by conditions? */
  bestseller?: Maybe<Scalars['Int']['output']>;
  /** Conditions */
  conditions_serialized?: Maybe<Scalars['String']['output']>;
  /** Date of the last modification of the rule */
  created_at?: Maybe<Scalars['String']['output']>;
  /** The customer group IDs apply label rules */
  customer_group_ids?: Maybe<Scalars['String']['output']>;
  /** Status of label rule */
  enabled?: Maybe<Scalars['Int']['output']>;
  /** Rule start date */
  from_date?: Maybe<Scalars['String']['output']>;
  /** The label text on product page */
  label?: Maybe<Scalars['String']['output']>;
  /** The label color on product page */
  label_color?: Maybe<Scalars['String']['output']>;
  /** The custom CSS on product page */
  label_css?: Maybe<Scalars['String']['output']>;
  /** The label font on product page */
  label_font?: Maybe<Scalars['String']['output']>;
  /** The label font size on product page */
  label_font_size?: Maybe<Scalars['String']['output']>;
  /** The label image path on product page */
  label_image?: Maybe<Scalars['String']['output']>;
  /** Label position on product page */
  label_position?: Maybe<Scalars['String']['output']>;
  /** Label position on grid */
  label_position_grid?: Maybe<Scalars['String']['output']>;
  /** The label template path on product page */
  label_template?: Maybe<Scalars['String']['output']>;
  /** Restrict the bestseller product from being applied */
  limit?: Maybe<Scalars['String']['output']>;
  /** The label color on category page */
  list_color?: Maybe<Scalars['String']['output']>;
  /** The custom CSS on category page */
  list_css?: Maybe<Scalars['String']['output']>;
  /** The label font on category page */
  list_font?: Maybe<Scalars['String']['output']>;
  /** The label font size on category page */
  list_font_size?: Maybe<Scalars['String']['output']>;
  /** The label image path on category page */
  list_image?: Maybe<Scalars['String']['output']>;
  /** The label text on category page */
  list_label?: Maybe<Scalars['String']['output']>;
  /** Label position on category page */
  list_position?: Maybe<Scalars['String']['output']>;
  /** Label position on grid */
  list_position_grid?: Maybe<Scalars['String']['output']>;
  /** The label template path on category page */
  list_template?: Maybe<Scalars['String']['output']>;
  /** The label rule name */
  name?: Maybe<Scalars['String']['output']>;
  /** Priority between label rules */
  priority?: Maybe<Scalars['String']['output']>;
  /** The label rule id */
  rule_id?: Maybe<Scalars['Int']['output']>;
  /** Label on category page is the same as product page */
  same?: Maybe<Scalars['Int']['output']>;
  /** Stop the process from the following rules */
  stop_process?: Maybe<Scalars['String']['output']>;
  /** The store applies label rules */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** Rule end date */
  to_date?: Maybe<Scalars['String']['output']>;
  /** Rule creation date */
  updated_at?: Maybe<Scalars['String']['output']>;
};

export type LabelRulesFilterInput = {
  /** Rule creation date */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Status of label rule */
  enabled?: InputMaybe<FilterTypeInput>;
  /** Rule start date */
  from_date?: InputMaybe<FilterTypeInput>;
  /** The label text on product page */
  label?: InputMaybe<FilterTypeInput>;
  /** The label text on category page */
  list_label?: InputMaybe<FilterTypeInput>;
  /** The label rule name */
  name?: InputMaybe<FilterTypeInput>;
  /** Priority between label rules  */
  priority?: InputMaybe<FilterTypeInput>;
  /** The label rule id */
  rule_id?: InputMaybe<FilterTypeInput>;
  /** Rule end date */
  to_date?: InputMaybe<FilterTypeInput>;
  /** Date of the last modification of the rule */
  updated_at?: InputMaybe<FilterTypeInput>;
};

export type LabelRulesOutput = {
  __typename?: 'LabelRulesOutput';
  /** Label rule data is satisfied */
  items?: Maybe<Array<Maybe<LabelRules>>>;
  /** The total number of results returned when a query is applied */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type LatLng = {
  __typename?: 'LatLng';
  /** Shipping location latitude. */
  latitude?: Maybe<Scalars['String']['output']>;
  /** Shipping location longitude. */
  longitude?: Maybe<Scalars['String']['output']>;
};

/** Contains information for rendering layered navigation. */
export type LayerFilter = {
  __typename?: 'LayerFilter';
  /**
   * An array of filter items.
   * @deprecated Use `Aggregation.options` instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>;
  /**
   * The count of filter items in filter group.
   * @deprecated Use `Aggregation.count` instead.
   */
  filter_items_count?: Maybe<Scalars['Int']['output']>;
  /**
   * The name of a layered navigation filter.
   * @deprecated Use `Aggregation.label` instead.
   */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * The request variable name for a filter query.
   * @deprecated Use `Aggregation.attribute_code` instead.
   */
  request_var?: Maybe<Scalars['String']['output']>;
};

export type LayerFilterItem = LayerFilterItemInterface & {
  __typename?: 'LayerFilterItem';
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']['output']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']['output']>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']['output']>;
};

export type LayerFilterItemInterface = {
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']['output']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']['output']>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']['output']>;
};

export type LikesOutput = {
  __typename?: 'LikesOutput';
  /** The total like */
  total?: Maybe<Scalars['Int']['output']>;
};

export type LinkItems = {
  __typename?: 'LinkItems';
  category_id?: Maybe<Scalars['String']['output']>;
  external_url?: Maybe<Scalars['String']['output']>;
  link_type?: Maybe<Scalars['String']['output']>;
  link_url?: Maybe<Scalars['String']['output']>;
  open_tab?: Maybe<Scalars['Boolean']['output']>;
  page_id?: Maybe<Scalars['String']['output']>;
  product_id?: Maybe<Scalars['String']['output']>;
  product_sku?: Maybe<Scalars['String']['output']>;
};

export type MapArea = {
  __typename?: 'MapArea';
  coords?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  link_info?: Maybe<LinkItems>;
  shape?: Maybe<Scalars['String']['output']>;
  toolTip?: Maybe<Scalars['String']['output']>;
};

export type MapPinAddress = {
  __typename?: 'MapPinAddress';
  latitude?: Maybe<Scalars['String']['output']>;
  longitude?: Maybe<Scalars['String']['output']>;
};

export type MappedImage = {
  __typename?: 'MappedImage';
  area?: Maybe<Array<Maybe<MapArea>>>;
  image?: Maybe<Scalars['String']['output']>;
  postion?: Maybe<Scalars['Int']['output']>;
};

/** Defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  __typename?: 'MediaGalleryEntry';
  /** Details about the content of the media gallery item. */
  content?: Maybe<ProductMediaGalleryEntriesContent>;
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']['output']>;
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']['output']>;
  /**
   * The identifier assigned to the object.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The alt text displayed on the storefront when the user points to the image. */
  label?: Maybe<Scalars['String']['output']>;
  /** Either `image` or `video`. */
  media_type?: Maybe<Scalars['String']['output']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']['output']>;
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique ID for a `MediaGalleryEntry` object. */
  uid: Scalars['ID']['output'];
  /** Details about the content of a video item. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']['output']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']['output']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']['output']>;
};

export type Megamenu = {
  __typename?: 'Megamenu';
  /** Megamenu Image */
  image?: Maybe<Scalars['String']['output']>;
  /** Call to action for Image */
  url?: Maybe<Scalars['String']['output']>;
};

export type Menu = {
  __typename?: 'Menu';
  footerMenu?: Maybe<FooterMenu>;
  headerMenu?: Maybe<HeaderMenu>;
};

export type MenuLink = {
  __typename?: 'MenuLink';
  link?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type MessageStyleLogo = {
  __typename?: 'MessageStyleLogo';
  /** The type of logo for the PayPal Pay Later messaging */
  type?: Maybe<Scalars['String']['output']>;
};

export type MessageStyles = {
  __typename?: 'MessageStyles';
  /** The message layout */
  layout?: Maybe<Scalars['String']['output']>;
  /** The message logo */
  logo?: Maybe<MessageStyleLogo>;
};

export type MobileCreateCustomerAccountOutput = {
  __typename?: 'MobileCreateCustomerAccountOutput';
  customer: Customer;
  message?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['Boolean']['output']>;
};

/** Defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  __typename?: 'Money';
  /** A three-letter currency code, such as USD or EUR. */
  currency?: Maybe<CurrencyEnum>;
  /** A number expressing a monetary value. */
  value?: Maybe<Scalars['Float']['output']>;
};

export type MonthlyArchive = {
  __typename?: 'MonthlyArchive';
  /** An array of post that match the specified search criteria. */
  items?: Maybe<Array<Maybe<Post>>>;
  /** The label of Monthly Archive */
  label?: Maybe<Scalars['String']['output']>;
  /** The quantity of Monthly Archive */
  quantity?: Maybe<Scalars['Int']['output']>;
};

export type MonthlyArchiveOutput = {
  __typename?: 'MonthlyArchiveOutput';
  /** An array of post that match the specified search criteria. */
  items?: Maybe<Array<Maybe<MonthlyArchive>>>;
  /** The number of monthly archive returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type MpFilters = {
  /** Filter From Date. */
  from: Scalars['String']['input'];
  /** Period. */
  period_type?: InputMaybe<Scalars['String']['input']>;
  /** Show Empty Rows. */
  show_empty_rows?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter Store Id. */
  store_id?: InputMaybe<Scalars['Int']['input']>;
  /** Filter To Date. */
  to: Scalars['String']['input'];
};

export type MpGtmCodeFilters = {
  /** The name of the page you want to get the code from(home, catalogsearch, category, product, checkoutindex, checkoutcart, mponestepcheckout, checkoutsuccess, multishippingcheckoutsuccess, mpthankyoupage). */
  action: Scalars['String']['input'];
  /** Specify which page to display the results to return. The default value is 1. */
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the order, category, or product that you  want to get the code from. */
  id: Scalars['String']['input'];
  /** Specify the maximum number of results to return at once. This attribute is optional. */
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  /** Specify which attribute to sort on, and whether to display the results in an ascending or descending order. */
  sort?: InputMaybe<ProductAttributeSortInput>;
  /** The type of the code you want to get(GTM, GA or FbPixel). */
  type: Scalars['String']['input'];
};

export type MpGtmHeadFilters = {
  /** The type of the code you want to get(GTM, GA or FbPixel). */
  type: Scalars['String']['input'];
};

export type MpRewardCustomersOutput = {
  __typename?: 'MpRewardCustomersOutput';
  /** Balance limitation */
  balance_limitation?: Maybe<Scalars['String']['output']>;
  /** Current exchange rates */
  current_exchange_rates?: Maybe<RewardExchangeRate>;
  /** Customer id */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Earn point expire */
  earn_point_expire?: Maybe<Scalars['String']['output']>;
  /** The query searches for reward invitations that match the filtered criteria.. */
  invitations?: Maybe<MpRewardInvitationsOutput>;
  /** Notification of expire */
  notification_expire?: Maybe<Scalars['String']['output']>;
  /** Notification of update */
  notification_update?: Maybe<Scalars['String']['output']>;
  /** Point balance */
  point_balance?: Maybe<Scalars['Int']['output']>;
  /** Point earned */
  point_earned?: Maybe<Scalars['Int']['output']>;
  /** Point spent */
  point_spent?: Maybe<Scalars['Int']['output']>;
  /** Refer code */
  refer_code?: Maybe<Scalars['String']['output']>;
  /** Reward id */
  reward_id?: Maybe<Scalars['Int']['output']>;
  /** The query searches for reward customer. */
  transactions?: Maybe<MpRewardTransactionsListOutput>;
};


export type MpRewardCustomersOutputInvitationsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<MpRewardInvitationsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type MpRewardCustomersOutputTransactionsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<MpRewardTransactionsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

export type MpRewardInvitations = {
  __typename?: 'MpRewardInvitations';
  /** Created at */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Invitation id */
  invitation_id?: Maybe<Scalars['Int']['output']>;
  /** Invited discount */
  invited_discount?: Maybe<Scalars['Float']['output']>;
  /** Invited earn */
  invited_earn?: Maybe<Scalars['Int']['output']>;
  /** Invited email */
  invited_email?: Maybe<Scalars['String']['output']>;
  /** Referral earn */
  referral_earn?: Maybe<Scalars['Int']['output']>;
  /** Referral email */
  referral_email?: Maybe<Scalars['String']['output']>;
  /** Store id */
  store_id?: Maybe<Scalars['String']['output']>;
};

export type MpRewardInvitationsFilterInput = {
  /** Created at */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Invitation id */
  invitation_id?: InputMaybe<FilterTypeInput>;
  /** Invited discount */
  invited_discount?: InputMaybe<FilterTypeInput>;
  /** Invited earn */
  invited_earn?: InputMaybe<FilterTypeInput>;
  /** Invited email */
  invited_email?: InputMaybe<FilterTypeInput>;
  /** Referral earn */
  referral_earn?: InputMaybe<FilterTypeInput>;
  /** Referral email */
  referral_email?: InputMaybe<FilterTypeInput>;
  /** Store id */
  store_id?: InputMaybe<FilterTypeInput>;
};

export type MpRewardInvitationsOutput = {
  __typename?: 'MpRewardInvitationsOutput';
  /** Reward invitation data is satisfied */
  items?: Maybe<Array<Maybe<MpRewardInvitations>>>;
  /** An object that includes the pageSize and currentPage values specified in the query. */
  page_info?: Maybe<PageInfo>;
  /** The total number of results returned when a query is applied */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type MpRewardPointsOutput = {
  __typename?: 'MpRewardPointsOutput';
  /** Discount for reward. */
  discount?: Maybe<Scalars['Float']['output']>;
  /** Points earned. */
  earn?: Maybe<Scalars['Int']['output']>;
  /** Points spent. */
  spent?: Maybe<Scalars['Int']['output']>;
};

export type MpRewardRateOutput = {
  __typename?: 'MpRewardRateOutput';
  /** Customer group ids */
  customer_group_ids?: Maybe<Scalars['String']['output']>;
  /** Direction */
  direction?: Maybe<Scalars['Int']['output']>;
  /** Money */
  money?: Maybe<Scalars['Float']['output']>;
  /** Points */
  points?: Maybe<Scalars['Int']['output']>;
  /** Priority */
  priority?: Maybe<Scalars['Int']['output']>;
  /** Rate Id */
  rate_id?: Maybe<Scalars['Int']['output']>;
  /** Website ids */
  website_ids?: Maybe<Scalars['String']['output']>;
};

export type MpRewardTransactionsFilterInput = {
  /** Action code */
  action_code?: InputMaybe<FilterTypeInput>;
  /** Action type */
  action_type?: InputMaybe<FilterTypeInput>;
  /** Created at */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Customer id */
  customer_id?: InputMaybe<FilterTypeInput>;
  /** Expiration date */
  expiration_date?: InputMaybe<FilterTypeInput>;
  /** Expire email sent */
  expire_email_sent?: InputMaybe<FilterTypeInput>;
  /** Order id */
  order_id?: InputMaybe<FilterTypeInput>;
  /** Point amount */
  point_amount?: InputMaybe<FilterTypeInput>;
  /** Point remaining */
  point_remaining?: InputMaybe<FilterTypeInput>;
  /** Point used */
  point_used?: InputMaybe<FilterTypeInput>;
  /** Reward id */
  reward_id?: InputMaybe<FilterTypeInput>;
  /** Status */
  status?: InputMaybe<FilterTypeInput>;
  /** Store id */
  store_id?: InputMaybe<FilterTypeInput>;
  /** Transaction id */
  transaction_id?: InputMaybe<FilterTypeInput>;
};

export type MpRewardTransactionsListOutput = {
  __typename?: 'MpRewardTransactionsListOutput';
  /** Reward transaction data is satisfied */
  items?: Maybe<Array<Maybe<MpRewardTransactionsOutput>>>;
  /** An object that includes the pageSize and currentPage values specified in the query. */
  page_info?: Maybe<PageInfo>;
  /** The total number of results returned when a query is applied */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type MpRewardTransactionsOutput = {
  __typename?: 'MpRewardTransactionsOutput';
  /** Action code */
  action_code?: Maybe<Scalars['String']['output']>;
  /** Action type */
  action_type?: Maybe<Scalars['String']['output']>;
  /** Comment */
  comment?: Maybe<Scalars['String']['output']>;
  /** Created at */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Customer id */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Expiration date */
  expiration_date?: Maybe<Scalars['String']['output']>;
  /** Expire email sent */
  expire_email_sent?: Maybe<Scalars['String']['output']>;
  /** Order id */
  order_id?: Maybe<Scalars['Int']['output']>;
  /** Point amount */
  point_amount?: Maybe<Scalars['Int']['output']>;
  /** point remaining */
  point_remaining?: Maybe<Scalars['Int']['output']>;
  /** Point used */
  point_used?: Maybe<Scalars['Int']['output']>;
  /** Reward id */
  reward_id?: Maybe<Scalars['Int']['output']>;
  /** Status */
  status?: Maybe<Scalars['Int']['output']>;
  /** Store id */
  store_id?: Maybe<Scalars['Int']['output']>;
  /** Transaction id */
  transaction_id?: Maybe<Scalars['Int']['output']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Invite */
  MpRewardInvite?: Maybe<Scalars['Boolean']['output']>;
  /** Refer */
  MpRewardRefer?: Maybe<Scalars['Boolean']['output']>;
  /** Total segments output */
  MpRewardSpendingPoint?: Maybe<Array<Maybe<TotalSegmentsOutput>>>;
  /** Subscribe */
  MpRewardSubscribe?: Maybe<Scalars['Boolean']['output']>;
  /** Add comment */
  addAdvComment?: Maybe<AddAdvCommentOutput>;
  /** Add review */
  addAdvProductReview?: Maybe<AddAdvProductReviewOutput>;
  /** Add review */
  addAdvReview?: Maybe<AddAdvReviewOutput>;
  /** Add vote */
  addAdvVote?: Maybe<AddAdvVoteOutput>;
  /** Add one or more bundle products to the specified cart. We recommend using `addProductsToCart` instead. */
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>;
  /** Add one or more configurable products to the specified cart. We recommend using `addProductsToCart` instead. */
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>;
  /** Add one or more downloadable products to the specified cart. We recommend using `addProductsToCart` instead. */
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>;
  /** Add Guest Email To Abandonedcart */
  addGuestEmailToAbandonCart?: Maybe<Response>;
  /** Add Mobile To Abandonedcart */
  addMobiletoAbandonedcart?: Maybe<Response>;
  /** Add any type of product to the cart. */
  addProductsToCart?: Maybe<AddProductsToCartOutput>;
  /** Add products to the specified compare list. */
  addProductsToCompareList?: Maybe<CompareList>;
  /** Add one or more products to the specified wish list. This mutation supports all product types. */
  addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>;
  /** Add one or more simple products to the specified cart. We recommend using `addProductsToCart` instead. */
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>;
  /** Add one or more virtual products to the specified cart. We recommend using `addProductsToCart` instead. */
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>;
  /** Add items in the specified wishlist to the customer's cart. */
  addWishlistItemsToCart?: Maybe<AddWishlistItemsToCartOutput>;
  /** Apply a pre-defined coupon code to the specified cart. */
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>;
  /** Assign the specified compare list to the logged in customer. */
  assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>;
  /** Assign a logged-in customer to the specified guest shopping cart. */
  assignCustomerToGuestCart: Cart;
  /** Cancel the specified customer order. */
  cancelOrder?: Maybe<CancelOrderOutput>;
  /** Change the password for the logged-in customer. */
  changeCustomerPassword?: Maybe<Customer>;
  /** Confirm account */
  confirmAccount?: Maybe<ConfirmAccountOutput>;
  /** Confirms the email address for a customer. */
  confirmEmail?: Maybe<CustomerOutput>;
  /** Send a 'Contact Us' email to the merchant. */
  contactUs?: Maybe<ContactUsOutput>;
  /** About Us Enquiry */
  createAboutUs?: Maybe<AboutUsOutput>;
  /** Send Mobile OTP to create an Account */
  createAccountOTP?: Maybe<Response>;
  /** Verify Forgpt Password OTP */
  createAccountOTPVerify?: Maybe<Response>;
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String']['output'];
  /** Creates Client Token for Braintree PayPal Javascript SDK initialization. */
  createBraintreePayPalClientToken: Scalars['String']['output'];
  /** Creates Client Token for Braintree PayPal Vault Javascript SDK initialization. */
  createBraintreePayPalVaultClientToken: Scalars['String']['output'];
  /** Create Bulk Orders */
  createBulkOrder?: Maybe<BulkOrderOutput>;
  /** Create a new compare list. The compare list is saved for logged in customers. */
  createCompareList?: Maybe<CompareList>;
  /** Contact Us */
  createContactUs?: Maybe<ContactUsOutput>;
  /** Use `createCustomerV2` instead. */
  createCustomer?: Maybe<CustomerOutput>;
  /** Create an Account */
  createCustomerAccount?: Maybe<MobileCreateCustomerAccountOutput>;
  /** Create a billing or shipping address for a customer or guest. */
  createCustomerAddress?: Maybe<CustomerAddress>;
  /** Create a customer account. */
  createCustomerV2?: Maybe<CustomerOutput>;
  /**
   * Create an empty shopping cart for a guest or logged in user
   * @deprecated Use `Mutation.createGuestCart` or `Query.customerCart` for logged in customer
   */
  createEmptyCart?: Maybe<Scalars['String']['output']>;
  /** Create a new shopping cart */
  createGuestCart?: Maybe<CreateGuestCartOutput>;
  /** HOT Customization Request */
  createHotRequest?: Maybe<HotRequestOutput>;
  /** Initiate a transaction and receive a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>;
  /** Creates a payment order for further payment processing */
  createPaymentOrder?: Maybe<CreatePaymentOrderOutput>;
  /** Initiate an Express Checkout transaction and receive a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>;
  /** Create a product review for the specified product. */
  createProductReview: CreateProductReviewOutput;
  /** Creates a vault payment token */
  createVaultCardPaymentToken?: Maybe<CreateVaultCardPaymentTokenOutput>;
  /** Creates a vault card setup token */
  createVaultCardSetupToken?: Maybe<CreateVaultCardSetupTokenOutput>;
  /** Create WholeSaler an Account */
  createWholesalerAccount?: Maybe<WholeSalerCustomerAccountOutput>;
  /** Delete the specified compare list. */
  deleteCompareList?: Maybe<DeleteCompareListOutput>;
  /** Delete customer account */
  deleteCustomer?: Maybe<Scalars['Boolean']['output']>;
  /** Delete the billing or shipping address of a customer. */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a customer's payment token. */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>;
  /** Estimate shipping method(s) for cart based on address */
  estimateShippingMethods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
  /** Estimate totals for cart based on the address */
  estimateTotals: EstimateTotalsOutput;
  /** Send Forgot Password OTP */
  forgotPassworOTP?: Maybe<Response>;
  /** Verify Forgpt Password OTP */
  forgotPassworOTPVerify?: Maybe<Response>;
  generateAndSendOtp?: Maybe<OtpRequestOutput>;
  /** Generate a token for specified customer. */
  generateCustomerToken?: Maybe<CustomerToken>;
  /** Request a customer token so that an administrator can perform remote shopping assistance. */
  generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>;
  /** Handle a payment response and save the payment in Quote. Use this mutation for Payflow Pro and Payments Pro payment methods. */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>;
  /** Login */
  login?: Maybe<Response>;
  /** Send Mobile OTP */
  loginOTP?: Maybe<Response>;
  /** Verify Mobile OTP */
  loginOTPVerify?: Maybe<Response>;
  /** Transfer the contents of a guest cart into the cart of a logged-in customer. */
  mergeCarts: Cart;
  /** Save order notes. */
  orderNotes?: Maybe<OrderNoteOutput>;
  /** Convert the quote into an order. */
  placeOrder?: Maybe<PlaceOrderOutput>;
  /** Create Customer Feedback */
  postCustomerFeedback?: Maybe<CustomerFeedbackOutput>;
  /** Customer subscription for product alert */
  productAlertSubscribe?: Maybe<Scalars['Boolean']['output']>;
  /** Delete Stock alert Subscription */
  productAlertUnsubscribe?: Maybe<ProductAlertUnsubscribeOutput>;
  /** Remove a previously-applied coupon from the cart. The cart must contain at least one item in order to remove the coupon. */
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>;
  /** Delete the entire quantity of a specified item from the cart. If you remove all items from the cart, the cart continues to exist. */
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>;
  /** Remove products from the specified compare list. */
  removeProductsFromCompareList?: Maybe<CompareList>;
  /** Remove one or more products from the specified wish list. */
  removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>;
  /** Add all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>;
  /** Request an email with a reset password token for the registered customer identified by the specified email. */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']['output']>;
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using `requestPasswordResetEmail`. */
  resetPassword?: Maybe<Scalars['Boolean']['output']>;
  /** Reset Password */
  resetPasswordOtp?: Maybe<Response>;
  /** Revoke the customer token. */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>;
  /** Send a message on behalf of a customer to the specified email addresses. */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>;
  /** Set the billing address on a specific cart. */
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>;
  /** Assign the email address of a guest to the cart. */
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>;
  /**
   * Set the cart payment method and convert the cart into an order.
   * @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request.
   */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>;
  /** Apply a payment method to the cart. */
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>;
  /** Get product by SKU */
  setProductViewReport?: Maybe<ProductViewReportOutput>;
  /** Set one or more shipping addresses on a specific cart. */
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>;
  /** Set one or more delivery methods on a cart. */
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>;
  /** Subscribe the specified email to the store's newsletter. */
  subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>;
  /** update */
  syncPayfortInfo?: Maybe<Scalars['Boolean']['output']>;
  /** Synchronizes the payment order details for further payment processing */
  syncPaymentOrder?: Maybe<Scalars['Boolean']['output']>;
  /** Modify items in the cart. */
  updateCartItems?: Maybe<UpdateCartItemsOutput>;
  /** Use `updateCustomerV2` instead. */
  updateCustomer?: Maybe<CustomerOutput>;
  /** Update the billing or shipping address of a customer or guest. */
  updateCustomerAddress?: Maybe<CustomerAddress>;
  /** Change the email address for the logged-in customer. */
  updateCustomerEmail?: Maybe<CustomerOutput>;
  /** Update the customer's personal information. */
  updateCustomerV2?: Maybe<CustomerOutput>;
  /** Verify Forgpt Password OTP */
  updateMobileNumberOTPVerify?: Maybe<Response>;
  /** Update Mobile Number */
  updateMobilenumber?: Maybe<Response>;
  /** Update one or more products in the specified wish list. */
  updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>;
};


export type MutationMpRewardInviteArgs = {
  emails: Scalars['String']['input'];
  message: Scalars['String']['input'];
  send_from: Scalars['String']['input'];
};


export type MutationMpRewardReferArgs = {
  refer_code: Scalars['String']['input'];
};


export type MutationMpRewardSpendingPointArgs = {
  address_information: AddressInformationInput;
  cart_id: Scalars['String']['input'];
  points: Scalars['Int']['input'];
  rule_id: Scalars['String']['input'];
};


export type MutationMpRewardSubscribeArgs = {
  input: SubscribeInput;
};


export type MutationAddAdvCommentArgs = {
  input?: InputMaybe<AddAdvCommentInput>;
};


export type MutationAddAdvProductReviewArgs = {
  input?: InputMaybe<AddAdvProductReviewInput>;
};


export type MutationAddAdvReviewArgs = {
  input?: InputMaybe<AddAdvReviewInput>;
};


export type MutationAddAdvVoteArgs = {
  input?: InputMaybe<AddAdvVoteInput>;
};


export type MutationAddBundleProductsToCartArgs = {
  input?: InputMaybe<AddBundleProductsToCartInput>;
};


export type MutationAddConfigurableProductsToCartArgs = {
  input?: InputMaybe<AddConfigurableProductsToCartInput>;
};


export type MutationAddDownloadableProductsToCartArgs = {
  input?: InputMaybe<AddDownloadableProductsToCartInput>;
};


export type MutationAddGuestEmailToAbandonCartArgs = {
  countrycode?: InputMaybe<Scalars['String']['input']>;
  countryid?: InputMaybe<Scalars['Int']['input']>;
  customeremail?: InputMaybe<Scalars['String']['input']>;
  mobilenumber?: InputMaybe<Scalars['String']['input']>;
  quoteid?: InputMaybe<Scalars['Int']['input']>;
  storeid?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationAddMobiletoAbandonedcartArgs = {
  countrycode?: InputMaybe<Scalars['String']['input']>;
  countryid?: InputMaybe<Scalars['Int']['input']>;
  customerid?: InputMaybe<Scalars['String']['input']>;
  mobilenumber?: InputMaybe<Scalars['String']['input']>;
  quoteid?: InputMaybe<Scalars['Int']['input']>;
  storeid?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationAddProductsToCartArgs = {
  cartId: Scalars['String']['input'];
  cartItems: Array<CartItemInput>;
};


export type MutationAddProductsToCompareListArgs = {
  input?: InputMaybe<AddProductsToCompareListInput>;
};


export type MutationAddProductsToWishlistArgs = {
  wishlistId: Scalars['ID']['input'];
  wishlistItems: Array<WishlistItemInput>;
};


export type MutationAddSimpleProductsToCartArgs = {
  input?: InputMaybe<AddSimpleProductsToCartInput>;
};


export type MutationAddVirtualProductsToCartArgs = {
  input?: InputMaybe<AddVirtualProductsToCartInput>;
};


export type MutationAddWishlistItemsToCartArgs = {
  wishlistId: Scalars['ID']['input'];
  wishlistItemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};


export type MutationApplyCouponToCartArgs = {
  input?: InputMaybe<ApplyCouponToCartInput>;
};


export type MutationAssignCompareListToCustomerArgs = {
  uid: Scalars['ID']['input'];
};


export type MutationAssignCustomerToGuestCartArgs = {
  cart_id: Scalars['String']['input'];
};


export type MutationCancelOrderArgs = {
  input: CancelOrderInput;
};


export type MutationChangeCustomerPasswordArgs = {
  currentPassword: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
};


export type MutationConfirmAccountArgs = {
  id: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type MutationConfirmEmailArgs = {
  input: ConfirmEmailInput;
};


export type MutationContactUsArgs = {
  input: ContactUsInput;
};


export type MutationCreateAboutUsArgs = {
  email: Scalars['String']['input'];
  message: Scalars['String']['input'];
  mobile: Scalars['String']['input'];
  name: Scalars['String']['input'];
};


export type MutationCreateAccountOtpArgs = {
  isresend?: InputMaybe<Scalars['Boolean']['input']>;
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationCreateAccountOtpVerifyArgs = {
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationCreateBraintreePayPalVaultClientTokenArgs = {
  input?: InputMaybe<BraintreeVaultInput>;
};


export type MutationCreateBulkOrderArgs = {
  customer_name: Scalars['String']['input'];
  email: Scalars['String']['input'];
  message: Scalars['String']['input'];
  mobile: Scalars['String']['input'];
  product_id: Scalars['Int']['input'];
  quantity: Scalars['Int']['input'];
};


export type MutationCreateCompareListArgs = {
  input?: InputMaybe<CreateCompareListInput>;
};


export type MutationCreateContactUsArgs = {
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  message: Scalars['String']['input'];
  mobile: Scalars['String']['input'];
};


export type MutationCreateCustomerArgs = {
  input: CustomerInput;
};


export type MutationCreateCustomerAccountArgs = {
  input: CustomerInput;
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationCreateCustomerAddressArgs = {
  input: CustomerAddressInput;
};


export type MutationCreateCustomerV2Args = {
  input: CustomerCreateInput;
};


export type MutationCreateEmptyCartArgs = {
  input?: InputMaybe<CreateEmptyCartInput>;
};


export type MutationCreateGuestCartArgs = {
  input?: InputMaybe<CreateGuestCartInput>;
};


export type MutationCreateHotRequestArgs = {
  color?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  furnitureType: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  material?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  mobile: Scalars['String']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreatePayflowProTokenArgs = {
  input: PayflowProTokenInput;
};


export type MutationCreatePaymentOrderArgs = {
  input: CreatePaymentOrderInput;
};


export type MutationCreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput;
};


export type MutationCreateProductReviewArgs = {
  input: CreateProductReviewInput;
};


export type MutationCreateVaultCardPaymentTokenArgs = {
  input: CreateVaultCardPaymentTokenInput;
};


export type MutationCreateVaultCardSetupTokenArgs = {
  input: CreateVaultCardSetupTokenInput;
};


export type MutationCreateWholesalerAccountArgs = {
  companyName: Scalars['String']['input'];
  customerProof: ProofData;
  input: CustomerInput;
  licenceNumber: Scalars['String']['input'];
  mobileNumber: Scalars['String']['input'];
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationDeleteCompareListArgs = {
  uid: Scalars['ID']['input'];
};


export type MutationDeleteCustomerAddressArgs = {
  id: Scalars['Int']['input'];
};


export type MutationDeletePaymentTokenArgs = {
  public_hash: Scalars['String']['input'];
};


export type MutationEstimateShippingMethodsArgs = {
  input: EstimateTotalsInput;
};


export type MutationEstimateTotalsArgs = {
  input: EstimateTotalsInput;
};


export type MutationForgotPassworOtpArgs = {
  isresend?: InputMaybe<Scalars['Boolean']['input']>;
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationForgotPassworOtpVerifyArgs = {
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationGenerateAndSendOtpArgs = {
  input?: InputMaybe<OtpRequestInput>;
};


export type MutationGenerateCustomerTokenArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationGenerateCustomerTokenAsAdminArgs = {
  input: GenerateCustomerTokenAsAdminInput;
};


export type MutationHandlePayflowProResponseArgs = {
  input: PayflowProResponseInput;
};


export type MutationLoginArgs = {
  mobileEmail?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationLoginOtpArgs = {
  isresend?: InputMaybe<Scalars['Boolean']['input']>;
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationLoginOtpVerifyArgs = {
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationMergeCartsArgs = {
  destination_cart_id?: InputMaybe<Scalars['String']['input']>;
  source_cart_id: Scalars['String']['input'];
};


export type MutationOrderNotesArgs = {
  input: OrderNotesInput;
};


export type MutationPlaceOrderArgs = {
  input?: InputMaybe<PlaceOrderInput>;
};


export type MutationPostCustomerFeedbackArgs = {
  input: CustomerFeedbackInput;
};


export type MutationProductAlertSubscribeArgs = {
  sku: Scalars['String']['input'];
  type: Scalars['String']['input'];
};


export type MutationProductAlertUnsubscribeArgs = {
  productId?: InputMaybe<Scalars['Int']['input']>;
  type: Scalars['String']['input'];
};


export type MutationRemoveCouponFromCartArgs = {
  input?: InputMaybe<RemoveCouponFromCartInput>;
};


export type MutationRemoveItemFromCartArgs = {
  input?: InputMaybe<RemoveItemFromCartInput>;
};


export type MutationRemoveProductsFromCompareListArgs = {
  input?: InputMaybe<RemoveProductsFromCompareListInput>;
};


export type MutationRemoveProductsFromWishlistArgs = {
  wishlistId: Scalars['ID']['input'];
  wishlistItemsIds: Array<Scalars['ID']['input']>;
};


export type MutationReorderItemsArgs = {
  orderNumber: Scalars['String']['input'];
};


export type MutationRequestPasswordResetEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationResetPasswordArgs = {
  email: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
  resetPasswordToken: Scalars['String']['input'];
};


export type MutationResetPasswordOtpArgs = {
  mobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationSendEmailToFriendArgs = {
  input?: InputMaybe<SendEmailToFriendInput>;
};


export type MutationSetBillingAddressOnCartArgs = {
  input?: InputMaybe<SetBillingAddressOnCartInput>;
};


export type MutationSetGuestEmailOnCartArgs = {
  input?: InputMaybe<SetGuestEmailOnCartInput>;
};


export type MutationSetPaymentMethodAndPlaceOrderArgs = {
  input?: InputMaybe<SetPaymentMethodAndPlaceOrderInput>;
};


export type MutationSetPaymentMethodOnCartArgs = {
  input?: InputMaybe<SetPaymentMethodOnCartInput>;
};


export type MutationSetProductViewReportArgs = {
  sku: Scalars['String']['input'];
};


export type MutationSetShippingAddressesOnCartArgs = {
  input?: InputMaybe<SetShippingAddressesOnCartInput>;
};


export type MutationSetShippingMethodsOnCartArgs = {
  input?: InputMaybe<SetShippingMethodsOnCartInput>;
};


export type MutationSubscribeEmailToNewsletterArgs = {
  email: Scalars['String']['input'];
};


export type MutationSyncPayfortInfoArgs = {
  orderId: Scalars['String']['input'];
  response: Scalars['String']['input'];
};


export type MutationSyncPaymentOrderArgs = {
  input?: InputMaybe<SyncPaymentOrderInput>;
};


export type MutationUpdateCartItemsArgs = {
  input?: InputMaybe<UpdateCartItemsInput>;
};


export type MutationUpdateCustomerArgs = {
  input: CustomerInput;
};


export type MutationUpdateCustomerAddressArgs = {
  id: Scalars['Int']['input'];
  input?: InputMaybe<CustomerAddressInput>;
};


export type MutationUpdateCustomerEmailArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationUpdateCustomerV2Args = {
  input: CustomerUpdateInput;
};


export type MutationUpdateMobileNumberOtpVerifyArgs = {
  customerId?: InputMaybe<Scalars['String']['input']>;
  newmobileNumber?: InputMaybe<Scalars['String']['input']>;
  oldmobileNumber?: InputMaybe<Scalars['String']['input']>;
  otp?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationUpdateMobilenumberArgs = {
  customerId?: InputMaybe<Scalars['String']['input']>;
  isresend?: InputMaybe<Scalars['Boolean']['input']>;
  newmobileNumber?: InputMaybe<Scalars['String']['input']>;
  oldmobileNumber?: InputMaybe<Scalars['String']['input']>;
  websiteId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationUpdateProductsInWishlistArgs = {
  wishlistId: Scalars['ID']['input'];
  wishlistItems: Array<WishlistItemUpdateInput>;
};

/** Contains an error message when an invalid UID was specified. */
export type NoSuchEntityUidError = ErrorInterface & {
  __typename?: 'NoSuchEntityUidError';
  /** The returned error message. */
  message: Scalars['String']['output'];
  /** The specified invalid unique ID of an object. */
  uid: Scalars['ID']['output'];
};

/** Contains the order ID. */
export type Order = {
  __typename?: 'Order';
  /** @deprecated Use `order_number` instead. */
  order_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for an `Order` object. */
  order_number: Scalars['String']['output'];
};

/** Contains detailed information about an order's billing and shipping addresses. */
export type OrderAddress = {
  __typename?: 'OrderAddress';
  /** The city or town. */
  city: Scalars['String']['output'];
  /** The customer's company. */
  company?: Maybe<Scalars['String']['output']>;
  /** The customer's country. */
  country_code?: Maybe<CountryCodeEnum>;
  /** The fax number. */
  fax?: Maybe<Scalars['String']['output']>;
  /** The first name of the person associated with the shipping/billing address. */
  firstname: Scalars['String']['output'];
  /** The family name of the person associated with the shipping/billing address. */
  lastname: Scalars['String']['output'];
  /** The middle name of the person associated with the shipping/billing address. */
  middlename?: Maybe<Scalars['String']['output']>;
  /** The customer's ZIP or postal code. */
  postcode?: Maybe<Scalars['String']['output']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** The state or province name. */
  region?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `Region` object of a pre-defined region. */
  region_id?: Maybe<Scalars['ID']['output']>;
  /** An array of strings that define the street number and name. */
  street: Array<Maybe<Scalars['String']['output']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The telephone number. */
  telephone?: Maybe<Scalars['String']['output']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  vat_id?: Maybe<Scalars['String']['output']>;
};

/** Input to retrieve an order based on details. */
export type OrderInformationInput = {
  /** Order billing address email. */
  email: Scalars['String']['input'];
  /** Order number. */
  number: Scalars['String']['input'];
  /** Order billing address postcode. */
  postcode: Scalars['String']['input'];
};

export type OrderItem = OrderItemInterface & {
  __typename?: 'OrderItem';
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The selected gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The ProductInterface object, which contains details about the base product */
  product?: Maybe<ProductInterface>;
  product_image?: Maybe<Scalars['String']['output']>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']['output']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']['output']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']['output']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']['output']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']['output']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']['output']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']['output']>;
};

/** Order item details. */
export type OrderItemInterface = {
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The selected gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The ProductInterface object, which contains details about the base product */
  product?: Maybe<ProductInterface>;
  product_image?: Maybe<Scalars['String']['output']>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']['output']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']['output']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']['output']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']['output']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']['output']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']['output']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']['output']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']['output']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']['output']>;
};

/** Represents order item options like selected or entered. */
export type OrderItemOption = {
  __typename?: 'OrderItemOption';
  /** The name of the option. */
  label: Scalars['String']['output'];
  /** The value of the option. */
  value: Scalars['String']['output'];
};

export type OrderNoteOutput = {
  __typename?: 'OrderNoteOutput';
  order_note?: Maybe<Scalars['String']['output']>;
};

export type OrderNotesInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** Order note for orders */
  order_note: Scalars['String']['input'];
};

/** Contains details about the payment method used to pay for the order. */
export type OrderPaymentMethod = {
  __typename?: 'OrderPaymentMethod';
  /** Additional data per payment method type. */
  additional_data?: Maybe<Array<Maybe<KeyValue>>>;
  /** The label that describes the payment method. */
  name: Scalars['String']['output'];
  /** The payment method code that indicates how the order was paid for. */
  type: Scalars['String']['output'];
};

/** Sales Order graphql gather Data of specific order information */
export type OrderRecord = {
  __typename?: 'OrderRecord';
  /** Timestamp indicating when the order was placed */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Customername of Sales Order */
  customer_name?: Maybe<Scalars['String']['output']>;
  /** Grand total of Sales Order */
  grand_total?: Maybe<Scalars['String']['output']>;
  /** Increment Id of Sales Order */
  increment_id?: Maybe<Scalars['String']['output']>;
  /** Shipping method for order placed */
  shipping_method?: Maybe<Scalars['String']['output']>;
};

/** Contains order shipment details. */
export type OrderShipment = {
  __typename?: 'OrderShipment';
  /** Comments added to the shipment. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `OrderShipment` object. */
  id: Scalars['ID']['output'];
  /** An array of items included in the shipment. */
  items?: Maybe<Array<Maybe<ShipmentItemInterface>>>;
  /** The sequential credit shipment number. */
  number: Scalars['String']['output'];
  /** An array of shipment tracking details. */
  tracking?: Maybe<Array<Maybe<ShipmentTracking>>>;
};

/** Input to retrieve an order based on token. */
export type OrderTokenInput = {
  /** Order token. */
  token: Scalars['String']['input'];
};

/** Contains details about the sales total amounts used to calculate the final price. */
export type OrderTotal = {
  __typename?: 'OrderTotal';
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the order. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Mageplaza Reward Points Information. */
  mp_reward_points?: Maybe<MpRewardPointsOutput>;
  /** Details about the shipping and handling costs for the order. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the order, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The order tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the order. */
  total_shipping: Money;
  /** The amount of tax applied to the order. */
  total_tax: Money;
};

export type OtpRequestInput = {
  email: Scalars['String']['input'];
  website_id?: InputMaybe<Scalars['Int']['input']>;
};

export type OtpRequestOutput = {
  __typename?: 'OtpRequestOutput';
  response?: Maybe<Scalars['String']['output']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  /** Specifies which page of results to return. */
  currentPage?: Maybe<Scalars['Int']['output']>;
  /** End page. */
  endPage?: Maybe<Scalars['Int']['output']>;
  /** Has next page. */
  hasNextPage?: Maybe<Scalars['Boolean']['output']>;
  /** Has previous page. */
  hasPreviousPage?: Maybe<Scalars['Boolean']['output']>;
  /** How many items should show on the page. */
  pageSize?: Maybe<Scalars['Int']['output']>;
  /** Start page. */
  startPage?: Maybe<Scalars['Int']['output']>;
};

/** Contains required input for Payflow Express Checkout payments. */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user. */
  payer_id: Scalars['String']['input'];
  /** The token returned by the createPaypalExpressToken mutation. */
  token: Scalars['String']['input'];
};

/** A set of relative URLs that PayPal uses in response to various actions during the authorization process. Adobe Commerce prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']['input'];
  /** The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String']['input'];
  /** The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']['input'];
};

/** Indicates the mode for payment. Applies to the Payflow Link and Payments Advanced payment methods. */
export enum PayflowLinkMode {
  Live = 'LIVE',
  Test = 'TEST'
}

/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkToken = {
  __typename?: 'PayflowLinkToken';
  /** The mode for the Payflow transaction. */
  mode?: Maybe<PayflowLinkMode>;
  /** The PayPal URL used for requesting a Payflow form. */
  paypal_url?: Maybe<Scalars['String']['output']>;
  /** The secure token generated by PayPal. */
  secure_token?: Maybe<Scalars['String']['output']>;
  /** The secure token ID generated by PayPal. */
  secure_token_id?: Maybe<Scalars['String']['output']>;
};

/** Contains information required to fetch payment token information for the Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart. */
  cart_id: Scalars['String']['input'];
};

/** Contains input for the Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information. */
  cc_details: CreditCardDetailsInput;
  /** Indicates whether details about the shopper's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for the PayPal Payflow Pro payment integration. */
  is_active_payment_token_enabler?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String']['input'];
  /** The payload returned from PayPal. */
  paypal_payload: Scalars['String']['input'];
};

export type PayflowProResponseOutput = {
  __typename?: 'PayflowProResponseOutput';
  /** The cart with the updated selected payment method. */
  cart: Cart;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProToken = {
  __typename?: 'PayflowProToken';
  /** The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`. */
  response_message: Scalars['String']['output'];
  /** A non-zero value if any errors occurred. */
  result: Scalars['Int']['output'];
  /** The RESULT returned by PayPal. A value of `0` indicates the transaction was approved. */
  result_code: Scalars['Int']['output'];
  /** A secure token generated by PayPal. */
  secure_token: Scalars['String']['output'];
  /** A secure token ID generated by PayPal. */
  secure_token_id: Scalars['String']['output'];
};

/** Contains input required to fetch payment token information for the Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String']['input'];
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput;
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for the Payflow Pro and Payment Pro payment methods. */
export type PayflowProUrlInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']['input'];
  /** The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String']['input'];
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']['input'];
};

export type PaymentCommonConfig = PaymentConfigItem & {
  __typename?: 'PaymentCommonConfig';
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

/** Contains payment fields that are common to all types of payment methods. */
export type PaymentConfigItem = {
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

/** Retrieves the payment configuration for a given location */
export type PaymentConfigOutput = {
  __typename?: 'PaymentConfigOutput';
  /** ApplePay payment method configuration */
  apple_pay?: Maybe<ApplePayConfig>;
  /** GooglePay payment method configuration */
  google_pay?: Maybe<GooglePayConfig>;
  /** Hosted fields payment method configuration */
  hosted_fields?: Maybe<HostedFieldsConfig>;
  /** Smart Buttons payment method configuration */
  smart_buttons?: Maybe<SmartButtonsConfig>;
};

/** Defines the origin location for that payment request */
export enum PaymentLocation {
  Admin = 'ADMIN',
  Cart = 'CART',
  Checkout = 'CHECKOUT',
  Minicart = 'MINICART',
  ProductDetail = 'PRODUCT_DETAIL'
}

/** Defines the payment method. */
export type PaymentMethodInput = {
  braintree?: InputMaybe<BraintreeInput>;
  braintree_ach_direct_debit?: InputMaybe<BraintreeInput>;
  braintree_ach_direct_debit_vault?: InputMaybe<BraintreeVaultInput>;
  braintree_applepay_vault?: InputMaybe<BraintreeVaultInput>;
  braintree_cc_vault?: InputMaybe<BraintreeCcVaultInput>;
  braintree_googlepay_vault?: InputMaybe<BraintreeVaultInput>;
  braintree_paypal?: InputMaybe<BraintreeInput>;
  braintree_paypal_vault?: InputMaybe<BraintreeVaultInput>;
  /** The internal name for the payment method. */
  code: Scalars['String']['input'];
  /** Required input for PayPal Hosted pro payments. */
  hosted_pro?: InputMaybe<HostedProInput>;
  /** Required input for Payflow Express Checkout payments. */
  payflow_express?: InputMaybe<PayflowExpressInput>;
  /** Required input for PayPal Payflow Link and Payments Advanced payments. */
  payflow_link?: InputMaybe<PayflowLinkInput>;
  /** Required input for PayPal Payflow Pro and Payment Pro payments. */
  payflowpro?: InputMaybe<PayflowProInput>;
  /** Required input for PayPal Payflow Pro vault payments. */
  payflowpro_cc_vault?: InputMaybe<VaultTokenInput>;
  /** Required input for Apple Pay button */
  payment_services_paypal_apple_pay?: InputMaybe<ApplePayMethodInput>;
  /** Required input for Google Pay button */
  payment_services_paypal_google_pay?: InputMaybe<GooglePayMethodInput>;
  /** Required input for Hosted Fields */
  payment_services_paypal_hosted_fields?: InputMaybe<HostedFieldsInput>;
  /** Required input for Smart buttons */
  payment_services_paypal_smart_buttons?: InputMaybe<SmartButtonMethodInput>;
  /** Required input for vault */
  payment_services_paypal_vault?: InputMaybe<VaultMethodInput>;
  /** Required input for Express Checkout and Payments Standard payments. */
  paypal_express?: InputMaybe<PaypalExpressInput>;
  /** The purchase order number. Optional for most payment methods. */
  purchase_order_number?: InputMaybe<Scalars['String']['input']>;
};

/** Contains the payment order details */
export type PaymentOrderOutput = {
  __typename?: 'PaymentOrderOutput';
  /** PayPal order ID */
  id?: Maybe<Scalars['String']['output']>;
  /** The order ID generated by Payment Services */
  mp_order_id?: Maybe<Scalars['String']['output']>;
  /** Details about the card used on the order */
  payment_source_details?: Maybe<PaymentSourceDetails>;
  /** The status of the payment order */
  status?: Maybe<Scalars['String']['output']>;
};

export type PaymentSdkParamsItem = {
  __typename?: 'PaymentSDKParamsItem';
  /** The payment method code used in the order */
  code?: Maybe<Scalars['String']['output']>;
  /** The payment SDK parameters */
  params?: Maybe<Array<Maybe<SdkParams>>>;
};

export type PaymentSourceDetails = {
  __typename?: 'PaymentSourceDetails';
  /** Details about the card used on the order */
  card?: Maybe<Card>;
};

/** The payment source information */
export type PaymentSourceInput = {
  /** The card payment source information */
  card: CardPaymentSourceInput;
};

/** The payment source information */
export type PaymentSourceOutput = {
  __typename?: 'PaymentSourceOutput';
  /** The card payment source information */
  card: CardPaymentSourceOutput;
};

/** The stored payment method available to the customer. */
export type PaymentToken = {
  __typename?: 'PaymentToken';
  /** A description of the stored account details. */
  details?: Maybe<Scalars['String']['output']>;
  /** The payment method code associated with the token. */
  payment_method_code: Scalars['String']['output'];
  /** The public hash of the token. */
  public_hash: Scalars['String']['output'];
  /** Specifies the payment token type. */
  type: PaymentTokenTypeEnum;
};

/** The list of available payment token types. */
export enum PaymentTokenTypeEnum {
  /** phpcs:ignore Magento2.GraphQL.ValidArgumentName */
  Account = 'account',
  /** phpcs:ignore Magento2.GraphQL.ValidArgumentName */
  Card = 'card'
}

/** Contains required input for Express Checkout and Payments Standard payments. */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user. */
  payer_id: Scalars['String']['input'];
  /** The token returned by the `createPaypalExpressToken` mutation. */
  token: Scalars['String']['input'];
};

/** Deprecated. Use `PaypalExpressTokenOutput` instead. */
export type PaypalExpressToken = {
  __typename?: 'PaypalExpressToken';
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details.
   * @deprecated Use `PaypalExpressTokenOutput.paypal_urls` instead.
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /**
   * The token returned by PayPal.
   * @deprecated Use `PaypalExpressTokenOutput.token` instead.
   */
  token?: Maybe<Scalars['String']['output']>;
};

/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart. */
  cart_id: Scalars['String']['input'];
  /** The payment method code. */
  code: Scalars['String']['input'];
  /** Indicates whether the buyer selected the quick checkout button. The default value is false. */
  express_button?: InputMaybe<Scalars['Boolean']['input']>;
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process. */
  urls: PaypalExpressUrlsInput;
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false. */
  use_paypal_credit?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenOutput = {
  __typename?: 'PaypalExpressTokenOutput';
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details. */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /** The token returned by PayPal. */
  token?: Maybe<Scalars['String']['output']>;
};

/** Contains a set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export type PaypalExpressUrlList = {
  __typename?: 'PaypalExpressUrlList';
  /** The PayPal URL that allows the buyer to edit their checkout details. */
  edit?: Maybe<Scalars['String']['output']>;
  /** The URL to the PayPal login page. */
  start?: Maybe<Scalars['String']['output']>;
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressUrlsInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']['input'];
  /** The relative URL of the page that PayPal redirects to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html. */
  pending_url?: InputMaybe<Scalars['String']['input']>;
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']['input'];
  /** The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
  success_url?: InputMaybe<Scalars['String']['input']>;
};

/** Contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']['output']>;
};

/** Defines Pickup Location information. */
export type PickupLocation = {
  __typename?: 'PickupLocation';
  city?: Maybe<Scalars['String']['output']>;
  contact_name?: Maybe<Scalars['String']['output']>;
  country_id?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  fax?: Maybe<Scalars['String']['output']>;
  latitude?: Maybe<Scalars['Float']['output']>;
  longitude?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  pickup_location_code?: Maybe<Scalars['String']['output']>;
  postcode?: Maybe<Scalars['String']['output']>;
  region?: Maybe<Scalars['String']['output']>;
  region_id?: Maybe<Scalars['Int']['output']>;
  street?: Maybe<Scalars['String']['output']>;
};

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: InputMaybe<FilterTypeInput>;
  /** Filter by country. */
  country_id?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location name. */
  name?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location code. */
  pickup_location_code?: InputMaybe<FilterTypeInput>;
  /** Filter by postcode. */
  postcode?: InputMaybe<FilterTypeInput>;
  /** Filter by region. */
  region?: InputMaybe<FilterTypeInput>;
  /** Filter by region id. */
  region_id?: InputMaybe<FilterTypeInput>;
  /** Filter by street. */
  street?: InputMaybe<FilterTypeInput>;
};

/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: InputMaybe<SortEnum>;
  /** Name of the contact person. */
  contact_name?: InputMaybe<SortEnum>;
  /** Id of the country in two letters. */
  country_id?: InputMaybe<SortEnum>;
  /** Description of the pickup location. */
  description?: InputMaybe<SortEnum>;
  /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
  distance?: InputMaybe<SortEnum>;
  /** Contact email of the pickup location. */
  email?: InputMaybe<SortEnum>;
  /** Contact fax of the pickup location. */
  fax?: InputMaybe<SortEnum>;
  /** Geographic latitude where pickup location is placed. */
  latitude?: InputMaybe<SortEnum>;
  /** Geographic longitude where pickup location is placed. */
  longitude?: InputMaybe<SortEnum>;
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: InputMaybe<SortEnum>;
  /** Contact phone number of the pickup location. */
  phone?: InputMaybe<SortEnum>;
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: InputMaybe<SortEnum>;
  /** Postcode where pickup location is placed. */
  postcode?: InputMaybe<SortEnum>;
  /** Name of the region. */
  region?: InputMaybe<SortEnum>;
  /** Id of the region. */
  region_id?: InputMaybe<SortEnum>;
  /** Street where pickup location is placed. */
  street?: InputMaybe<SortEnum>;
};

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  __typename?: 'PickupLocations';
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** An error encountered while placing an order. */
export type PlaceOrderError = {
  __typename?: 'PlaceOrderError';
  /** An error code that is specific to place order. */
  code: PlaceOrderErrorCodes;
  /** A localized error message. */
  message: Scalars['String']['output'];
};

export enum PlaceOrderErrorCodes {
  CartNotActive = 'CART_NOT_ACTIVE',
  CartNotFound = 'CART_NOT_FOUND',
  GuestEmailMissing = 'GUEST_EMAIL_MISSING',
  UnableToPlaceOrder = 'UNABLE_TO_PLACE_ORDER',
  Undefined = 'UNDEFINED'
}

/** Specifies the quote to be converted to an order. */
export type PlaceOrderInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
};

/** Contains the results of the request to place an order. */
export type PlaceOrderOutput = {
  __typename?: 'PlaceOrderOutput';
  /** An array of place order errors. */
  errors: Array<Maybe<PlaceOrderError>>;
  /**
   * The ID of the order.
   * @deprecated Use `orderV2` instead.
   */
  order?: Maybe<Order>;
  /** Full order information. */
  orderV2?: Maybe<CustomerOrder>;
};

export type PopUp = Block & BlockData & {
  __typename?: 'PopUp';
  block_identifier?: Maybe<Scalars['String']['output']>;
  click_url?: Maybe<LinkItems>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  end_date?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  popup_image?: Maybe<Scalars['String']['output']>;
  popup_type?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  start_date?: Maybe<Scalars['String']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  video_link?: Maybe<Scalars['String']['output']>;
  video_thumbnail?: Maybe<Scalars['String']['output']>;
};

export type Post = {
  __typename?: 'Post';
  /** Indicates whether users can write a comment. */
  allow_comment?: Maybe<Scalars['Int']['output']>;
  /** An ID that identifies the author. */
  author_id?: Maybe<Scalars['Int']['output']>;
  /** The name of the author. */
  author_name?: Maybe<Scalars['String']['output']>;
  /** The full url of the author. */
  author_url?: Maybe<Scalars['String']['output']>;
  /** The url key of the author. */
  author_url_key?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a post */
  categories?: Maybe<CategoriesOutputNoPage>;
  /** Timestamp indicating when the post was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a post is enabled. */
  enabled?: Maybe<Scalars['Int']['output']>;
  /** The image of the post. */
  image?: Maybe<Scalars['String']['output']>;
  /** The import source of the post. */
  import_source?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a post in rss. */
  in_rss?: Maybe<Scalars['Int']['output']>;
  /** The layout of the post */
  layout?: Maybe<Scalars['String']['output']>;
  /** The meta description of the post. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** The meta keywords of the post. */
  meta_keywords?: Maybe<Scalars['String']['output']>;
  /** The meta robot of the post. */
  meta_robots?: Maybe<Scalars['String']['output']>;
  /** The meta title of the post. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The name of the post. */
  name?: Maybe<Scalars['String']['output']>;
  /** The content of the post. */
  post_content?: Maybe<Scalars['String']['output']>;
  /** An ID that uniquely identifies the post. */
  post_id?: Maybe<Scalars['Int']['output']>;
  /** The related post assigned to a post */
  posts?: Maybe<PostsOutputNoPage>;
  /** The products assigned to a post */
  products?: Maybe<ProductsOutputNoPage>;
  /** Timestamp indicating when the post was publish. */
  publish_date?: Maybe<Scalars['String']['output']>;
  /** The short description of the post. */
  short_description?: Maybe<Scalars['String']['output']>;
  /** An ID that identifies the store. */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** The tags assigned to a post */
  tags?: Maybe<TagsOutputNoPage>;
  /** The topics assigned to a post */
  topics?: Maybe<TopicsOutputNoPage>;
  /** Timestamp indicating when the post was updated. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The url key of the post. */
  url_key?: Maybe<Scalars['String']['output']>;
  /** The view count of the post. */
  view_traffic?: Maybe<Scalars['Int']['output']>;
};

export type PostsFilterInput = {
  /** Indicates whether the post allow comment */
  allow_comment?: InputMaybe<FilterTypeInput>;
  /** Author Id the post belongs to. */
  author_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the post was created */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Enabled */
  enabled?: InputMaybe<FilterTypeInput>;
  /** Import Source */
  import_source?: InputMaybe<FilterTypeInput>;
  /** The post name. Customers use this name to identify the post. */
  name?: InputMaybe<FilterTypeInput>;
  /** The post id. Customers use this name to identify the post. */
  post_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the post was publish */
  publish_date?: InputMaybe<FilterTypeInput>;
  /** The store id */
  store_ids?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the post was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The post url_key */
  url_key?: InputMaybe<FilterTypeInput>;
};

export type PostsOutput = {
  __typename?: 'PostsOutput';
  /** An array of post that match the specified search criteria */
  items?: Maybe<Array<Maybe<Post>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of posts returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type PostsOutputNoPage = {
  __typename?: 'PostsOutputNoPage';
  /** An array of post that match the specified search criteria */
  items?: Maybe<Array<Maybe<Post>>>;
  /** The number of posts returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Deprecated. Use `ProductPrice` instead. Defines the price of a product as well as any tax-related adjustments. */
export type Price = {
  __typename?: 'Price';
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Use `ProductPrice` instead.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>;
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Use `ProductPrice` instead.
   */
  amount?: Maybe<Money>;
};

/** Deprecated. Taxes will be included or excluded in the price. Defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export type PriceAdjustment = {
  __typename?: 'PriceAdjustment';
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>;
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated `PriceAdjustment` is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>;
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated `PriceAdjustment` is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>;
};

/** `PriceAdjustment.code` is deprecated. */
export enum PriceAdjustmentCodesEnum {
  /** @deprecated `PriceAdjustmentCodesEnum` is deprecated. Tax is included or excluded in the price. Tax is not shown separately in Catalog. */
  Tax = 'TAX',
  /** @deprecated WEEE code is deprecated. Use `fixed_product_taxes.label` instead. */
  Weee = 'WEEE',
  /** @deprecated Use `fixed_product_taxes` instead.  Tax is included or excluded in price. The tax is not shown separtely in Catalog. */
  WeeeTax = 'WEEE_TAX'
}

/** `PriceAdjustmentDescriptionEnum` is deprecated. States whether a price adjustment is included or excluded. */
export enum PriceAdjustmentDescriptionEnum {
  Excluded = 'EXCLUDED',
  Included = 'INCLUDED'
}

/** Can be used to retrieve the main price details in case of bundle product */
export type PriceDetails = {
  __typename?: 'PriceDetails';
  /** The percentage of discount applied to the main product price */
  discount_percentage?: Maybe<Scalars['Float']['output']>;
  /** The final price after applying the discount to the main product */
  main_final_price?: Maybe<Scalars['Float']['output']>;
  /** The regular price of the main product */
  main_price?: Maybe<Scalars['Float']['output']>;
};

/** Contains the price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export type PriceRange = {
  __typename?: 'PriceRange';
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>;
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice;
};

/** Defines the price type. */
export enum PriceTypeEnum {
  Dynamic = 'DYNAMIC',
  Fixed = 'FIXED',
  Percent = 'PERCENT'
}

/** Defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export enum PriceViewEnum {
  AsLowAs = 'AS_LOW_AS',
  PriceRange = 'PRICE_RANGE'
}

export type Product = {
  __typename?: 'Product';
  /** The attribute set assigned to the product. */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** The ID number assigned to the product. */
  entity_id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether a product option is available. */
  has_options?: Maybe<Scalars['Int']['output']>;
  /** The images of the product. */
  images?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Indicates whether a product option is required. */
  required_options?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** One of simple, virtual, bundle, downloadable, grouped, or configurable. */
  type_id?: Maybe<Scalars['String']['output']>;
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The url key of the product. */
  url_key?: Maybe<Scalars['String']['output']>;
};

export type ProductAlertUnsubscribeOutput = {
  __typename?: 'ProductAlertUnsubscribeOutput';
  /** The id */
  id?: Maybe<Scalars['Int']['output']>;
  /** Success or error Message */
  message?: Maybe<Scalars['String']['output']>;
};

/** Contains a product attribute code and value. */
export type ProductAttribute = {
  __typename?: 'ProductAttribute';
  /** The unique identifier for a product attribute code. */
  code: Scalars['String']['output'];
  /** The display value of the attribute. */
  value: Scalars['String']['output'];
};

/** ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductAttributeFilterInput = {
  /** Attribute label: Brand */
  brand?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use `category_uid` to filter product by category ID. */
  category_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter product by the unique ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Filter product by category URL path. */
  category_url_path?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Color */
  color?: InputMaybe<FilterEqualTypeInput>;
  created_at?: InputMaybe<FilterTypeInput>;
  /** Attribute label: Description */
  description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Name */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Filter product by news_from_date. */
  news_from_date?: InputMaybe<FilterTypeInput>;
  /** Filter product by news_to_date. */
  news_to_date?: InputMaybe<FilterTypeInput>;
  /** Attribute label: Price */
  price?: InputMaybe<FilterRangeTypeInput>;
  /** Attribute label: Short Description */
  short_description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Size */
  size?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: SKU */
  sku?: InputMaybe<FilterEqualTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterEqualTypeInput>;
};

/** Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export type ProductAttributeSortInput = {
  /** Attribute label: Brand */
  brand?: InputMaybe<SortEnum>;
  /** Attribute label: Name */
  name?: InputMaybe<SortEnum>;
  /** Sort by the position assigned to each product. */
  position?: InputMaybe<SortEnum>;
  /** Attribute label: Price */
  price?: InputMaybe<SortEnum>;
  /** Sort by the search relevance score (default). */
  relevance?: InputMaybe<SortEnum>;
};

export type ProductBlock = Block & BlockData & {
  __typename?: 'ProductBlock';
  description?: Maybe<Scalars['String']['output']>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  display_style?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  product_type?: Maybe<Scalars['String']['output']>;
  products?: Maybe<Array<Maybe<ProductInterface>>>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  viewall_status?: Maybe<Scalars['Boolean']['output']>;
};

export type ProductConfig = {
  __typename?: 'ProductConfig';
  ranking?: Maybe<Scalars['String']['output']>;
  search_attributes?: Maybe<Array<Maybe<SearchAttributes>>>;
  show_price?: Maybe<Scalars['Boolean']['output']>;
  show_sku?: Maybe<Scalars['Boolean']['output']>;
};

/** Product custom attributes */
export type ProductCustomAttributes = {
  __typename?: 'ProductCustomAttributes';
  /** Errors when retrieving custom attributes metadata. */
  errors: Array<Maybe<AttributeMetadataError>>;
  /** Requested custom attributes */
  items: Array<Maybe<AttributeValueInterface>>;
};

/** Contains the discount applied to a product price. */
export type ProductDiscount = {
  __typename?: 'ProductDiscount';
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']['output']>;
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']['output']>;
};

/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductFilterInput = {
  /** The category ID the product belongs to. */
  category_id?: InputMaybe<FilterTypeInput>;
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<FilterTypeInput>;
  /** The timestamp indicating when the product was created. */
  created_at?: InputMaybe<FilterTypeInput>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<FilterTypeInput>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<FilterTypeInput>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<FilterTypeInput>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<FilterTypeInput>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<FilterTypeInput>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<FilterTypeInput>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<FilterTypeInput>;
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: InputMaybe<FilterTypeInput>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<FilterTypeInput>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<FilterTypeInput>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<FilterTypeInput>;
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: InputMaybe<FilterTypeInput>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<FilterTypeInput>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<FilterTypeInput>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<FilterTypeInput>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<FilterTypeInput>;
  /** The keyword required to perform a logical OR comparison. */
  or?: InputMaybe<ProductFilterInput>;
  /** The price of an item. */
  price?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<FilterTypeInput>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<FilterTypeInput>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<FilterTypeInput>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<FilterTypeInput>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<FilterTypeInput>;
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: InputMaybe<FilterTypeInput>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<FilterTypeInput>;
  /** The file name of a swatch image. */
  swatch_image?: InputMaybe<FilterTypeInput>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<FilterTypeInput>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<FilterTypeInput>;
  /** The timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterTypeInput>;
  url_path?: InputMaybe<FilterTypeInput>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<FilterTypeInput>;
};

/** Contains product image information, including the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  __typename?: 'ProductImage';
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']['output']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']['output']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']['output']>;
};

/** Product Information used for Pickup Locations search. */
export type ProductInfoInput = {
  /** Product SKU. */
  sku: Scalars['String']['input'];
};

/** Contains fields that are common to all types of products. */
export type ProductInterface = {
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Contains fields that are common to all types of products. */
export type ProductInterfaceCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Contains fields that are common to all types of products. */
export type ProductInterfaceReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

export type ProductInventory = {
  __typename?: 'ProductInventory';
  enable_qty_increments?: Maybe<Scalars['Boolean']['output']>;
  is_qty_decimal?: Maybe<Scalars['Boolean']['output']>;
  max_sale_qty?: Maybe<Scalars['Float']['output']>;
  min_sale_qty?: Maybe<Scalars['Float']['output']>;
  qty_increments?: Maybe<Scalars['Float']['output']>;
};

export type ProductItems = {
  __typename?: 'ProductItems';
  price?: Maybe<Scalars['String']['output']>;
  product_name?: Maybe<Scalars['String']['output']>;
  sku?: Maybe<Scalars['String']['output']>;
};

/** An implementation of `ProductLinksInterface`. */
export type ProductLinks = ProductLinksInterface & {
  __typename?: 'ProductLinks';
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']['output']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']['output']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']['output']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']['output']>;
};

/** Contains information about linked products, including the link type and product type of each item. */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']['output']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']['output']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']['output']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']['output']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']['output']>;
};

/** Contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  __typename?: 'ProductMediaGalleryEntriesContent';
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']['output']>;
  /** The file name of the image. */
  name?: Maybe<Scalars['String']['output']>;
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']['output']>;
};

/** Contains a link to a video file and basic information about the video. */
export type ProductMediaGalleryEntriesVideoContent = {
  __typename?: 'ProductMediaGalleryEntriesVideoContent';
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']['output']>;
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']['output']>;
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']['output']>;
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']['output']>;
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']['output']>;
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']['output']>;
};

/** Represents a product price. */
export type ProductPrice = {
  __typename?: 'ProductPrice';
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>;
  /** The final price of the product after applying discounts. */
  final_price: Money;
  /** An array of the multiple Fixed Product Taxes that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The regular price of the product. */
  regular_price: Money;
};

/** Deprecated. Use `PriceRange` instead. Contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export type ProductPrices = {
  __typename?: 'ProductPrices';
  /**
   * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `to` value.
   * @deprecated Use `PriceRange.maximum_price` instead.
   */
  maximalPrice?: Maybe<Price>;
  /**
   * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `from` value.
   * @deprecated Use `PriceRange.minimum_price` instead.
   */
  minimalPrice?: Maybe<Price>;
  /**
   * The base price of a product.
   * @deprecated Use `regular_price` from `PriceRange.minimum_price` or `PriceRange.maximum_price` instead.
   */
  regularPrice?: Maybe<Price>;
};

/** Contains details of a product review. */
export type ProductReview = {
  __typename?: 'ProductReview';
  /** The average of all ratings for this product. */
  average_rating: Scalars['Float']['output'];
  /** The date the review was created. */
  created_at: Scalars['String']['output'];
  /** The customer's nickname. Defaults to the customer name, if logged in. */
  nickname: Scalars['String']['output'];
  /** The reviewed product. */
  product: ProductInterface;
  /** An array of ratings by rating category, such as quality, price, and value. */
  ratings_breakdown: Array<Maybe<ProductReviewRating>>;
  /** The summary (title) of the review. */
  summary: Scalars['String']['output'];
  /** The review text. */
  text: Scalars['String']['output'];
};

/** Contains data about a single aspect of a product review. */
export type ProductReviewRating = {
  __typename?: 'ProductReviewRating';
  /** The label assigned to an aspect of a product that is being rated, such as quality or price. */
  name: Scalars['String']['output'];
  /** The rating value given by customer. By default, possible values range from 1 to 5. */
  value: Scalars['String']['output'];
};

/** Contains the reviewer's rating for a single aspect of a review. */
export type ProductReviewRatingInput = {
  /** An encoded rating ID. */
  id: Scalars['String']['input'];
  /** An encoded rating value ID. */
  value_id: Scalars['String']['input'];
};

/** Contains details about a single aspect of a product review. */
export type ProductReviewRatingMetadata = {
  __typename?: 'ProductReviewRatingMetadata';
  /** An encoded rating ID. */
  id: Scalars['String']['output'];
  /** The label assigned to an aspect of a product that is being rated, such as quality or price. */
  name: Scalars['String']['output'];
  /** List of product review ratings sorted by position. */
  values: Array<Maybe<ProductReviewRatingValueMetadata>>;
};

/** Contains details about a single value in a product review. */
export type ProductReviewRatingValueMetadata = {
  __typename?: 'ProductReviewRatingValueMetadata';
  /** A ratings scale, such as the number of stars awarded. */
  value: Scalars['String']['output'];
  /** An encoded rating value ID. */
  value_id: Scalars['String']['output'];
};

/** Contains an array of metadata about each aspect of a product review. */
export type ProductReviewRatingsMetadata = {
  __typename?: 'ProductReviewRatingsMetadata';
  /** An array of product reviews sorted by position. */
  items: Array<Maybe<ProductReviewRatingMetadata>>;
};

/** Contains an array of product reviews. */
export type ProductReviews = {
  __typename?: 'ProductReviews';
  /** An array of product reviews. */
  items: Array<Maybe<ProductReview>>;
  /** Metadata for pagination rendering. */
  page_info: SearchResultPageInfo;
};

/** Deprecated. Use `ProductAttributeSortInput` instead. Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<SortEnum>;
  /** The timestamp indicating when the product was created. */
  created_at?: InputMaybe<SortEnum>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<SortEnum>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<SortEnum>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<SortEnum>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<SortEnum>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<SortEnum>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<SortEnum>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<SortEnum>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<SortEnum>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<SortEnum>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<SortEnum>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<SortEnum>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<SortEnum>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<SortEnum>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<SortEnum>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<SortEnum>;
  /** The price of the item. */
  price?: InputMaybe<SortEnum>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<SortEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<SortEnum>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<SortEnum>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<SortEnum>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<SortEnum>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<SortEnum>;
  /** The discounted price of the product. */
  special_price?: InputMaybe<SortEnum>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<SortEnum>;
  /** Indicates the criteria to sort swatches. */
  swatch_image?: InputMaybe<SortEnum>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<SortEnum>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<SortEnum>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<SortEnum>;
  /** The timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<SortEnum>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<SortEnum>;
  url_path?: InputMaybe<SortEnum>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<SortEnum>;
};

/** This enumeration states whether a product stock status is in stock or out of stock */
export enum ProductStockStatus {
  InStock = 'IN_STOCK',
  OutOfStock = 'OUT_OF_STOCK'
}

/** Deprecated. Use `TierPrice` instead. Defines a tier price, which is a quantity discount offered to a specific customer group. */
export type ProductTierPrices = {
  __typename?: 'ProductTierPrices';
  /**
   * The ID of the customer group.
   * @deprecated Not relevant for the storefront.
   */
  customer_group_id?: Maybe<Scalars['String']['output']>;
  /**
   * The percentage discount of the item.
   * @deprecated Use `TierPrice.discount` instead.
   */
  percentage_value?: Maybe<Scalars['Float']['output']>;
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated Use `TierPrice.quantity` instead.
   */
  qty?: Maybe<Scalars['Float']['output']>;
  /**
   * The price of the fixed price item.
   * @deprecated Use `TierPrice.final_price` instead.
   */
  value?: Maybe<Scalars['Float']['output']>;
  /**
   * The ID assigned to the website.
   * @deprecated Not relevant for the storefront.
   */
  website_id?: Maybe<Scalars['Float']['output']>;
};

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  __typename?: 'ProductVideo';
  content?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']['output']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']['output']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']['output']>;
  thumbnail?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']['output']>;
  /** Contains a `ProductMediaGalleryEntriesVideoContent` object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
  video_file?: Maybe<Scalars['String']['output']>;
  video_id?: Maybe<Scalars['Int']['output']>;
  video_type?: Maybe<Scalars['String']['output']>;
  video_url?: Maybe<Scalars['String']['output']>;
};

export type ProductViewReportOutput = {
  __typename?: 'ProductViewReportOutput';
  status?: Maybe<Scalars['Boolean']['output']>;
};

/** Contains the results of a `products` query. */
export type Products = {
  __typename?: 'Products';
  /** A bucket that contains the attribute code and label for each filterable option. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>;
  /**
   * Layered navigation filters array.
   * @deprecated Use `aggregations` instead.
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>;
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>;
  /** An array of search suggestions for case when search query have no results. */
  suggestions?: Maybe<Array<Maybe<SearchSuggestion>>>;
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']['output']>;
};


/** Contains the results of a `products` query. */
export type ProductsAggregationsArgs = {
  filter?: InputMaybe<AggregationsFilterInput>;
};

export type ProductsFilterInput = {
  /** Product Attribute Set Id the product belongs to */
  attribute_set_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was created */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Product Id */
  entity_id?: InputMaybe<FilterTypeInput>;
  /** Indicates whether additional attributes have been created for the product */
  has_options?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the product has required options */
  required_options?: InputMaybe<FilterTypeInput>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer */
  sku?: InputMaybe<FilterTypeInput>;
  /** Product Type the product belongs to */
  type_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
};

export type ProductsOutput = {
  __typename?: 'ProductsOutput';
  /** An array of products that match the specified search criteria */
  items?: Maybe<Array<Maybe<Product>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of products returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type ProductsOutputNoPage = {
  __typename?: 'ProductsOutputNoPage';
  /** An array of products that match the specified search criteria */
  items?: Maybe<Array<Maybe<Product>>>;
  /** The number of products returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type ProofData = {
  base64_data: Scalars['String']['input'];
  file_name: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  /** The query searches for label rules that match the criteria specified in the filter. */
  LabelRules?: Maybe<LabelRulesOutput>;
  /** Get configs */
  MpRewardConfig?: Maybe<RewardConfig>;
  /** Get icon url */
  MpRewardIcon?: Maybe<Icon>;
  /** The spending rule applied for shopping cart  */
  MpRewardShoppingCartSpendingRules?: Maybe<SpendingConfiguration>;
  advreview?: Maybe<ReviewsData>;
  amReviewSetting?: Maybe<AmReviewSetting>;
  amReviewWidget?: Maybe<AmReviewWidget>;
  /** The coupons query returns information about a discount code */
  applyCouponsList?: Maybe<CouponsCollection>;
  /** Retrieve EAV attributes associated to a frontend form. Use countries query provided by DirectoryGraphQl module to retrieve region_id and country_id attribute options. */
  attributesForm: AttributesFormOutput;
  /** Returns a list of attributes metadata for a given entity type. */
  attributesList?: Maybe<AttributesMetadataOutput>;
  /** Get a list of available store views and their config information. */
  availableStores?: Maybe<Array<Maybe<StoreConfig>>>;
  /** Return information about the specified shopping cart. */
  cart?: Maybe<Cart>;
  /** Return a list of categories that match the specified filter. */
  categories?: Maybe<CategoryResult>;
  /**
   * Search for categories that match the criteria specified in the `search` and `filter` attributes.
   * @deprecated Use `categories` instead.
   */
  category?: Maybe<CategoryTree>;
  /**
   * Return an array of categories based on the specified filters.
   * @deprecated Use `categories` instead.
   */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>;
  /** Return Terms and Conditions configuration information. */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>;
  /** Return information about CMS blocks. */
  cmsBlocks?: Maybe<CmsBlocks>;
  /** Return details about a CMS page. */
  cmsPage?: Maybe<CmsPage>;
  /** Return products that have been added to the specified compare list. */
  compareList?: Maybe<CompareList>;
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>;
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>;
  /** Return information about the store's currency. */
  currency?: Maybe<Currency>;
  /**
   * Return the attribute type, given an attribute code and entity type.
   * @deprecated Use `customAttributeMetadataV2` query instead.
   */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>;
  /** Retrieve EAV attributes metadata. */
  customAttributeMetadataV2: AttributesMetadataOutput;
  /** Return detailed information about a customer account. */
  customer?: Maybe<Customer>;
  /** Return information about the customer's shopping cart. */
  customerCart: Cart;
  /** Return a list of downloadable products the customer has purchased. */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>;
  /** @deprecated Use the `customer` query instead. */
  customerOrders?: Maybe<CustomerOrders>;
  /** Return a list of customer payment tokens stored in the vault. */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  /** The Sales Order query returns information about customer all placed order */
  customerPlacedOrder?: Maybe<SalesOrderCollection>;
  /** The viewRma query returns information about rma */
  getAddress?: Maybe<Array<Maybe<Address>>>;
  /** This will give the block info with ID */
  getBlockData?: Maybe<Array<Maybe<BlockData>>>;
  /** Get All brand Details */
  getBrandDetails?: Maybe<Array<Maybe<BrandData>>>;
  /** Get All Emirates */
  getEmirates?: Maybe<Array<Maybe<Emirates>>>;
  /** Retrieve the secure PayPal URL for a Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>;
  /** Get Menu */
  getMenu?: Maybe<Menu>;
  /** Retrieve payment credentials for a transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>;
  /** Retrieves the payment configuration for a given location */
  getPaymentConfig?: Maybe<PaymentConfigOutput>;
  /** Retrieves the payment details for the order */
  getPaymentOrder?: Maybe<PaymentOrderOutput>;
  /** Gets the payment SDK urls and values */
  getPaymentSDK?: Maybe<GetPaymentSdkOutput>;
  /** Retrieves the vault configuration */
  getVaultConfig?: Maybe<VaultConfigOutput>;
  /** Retrieve guest order details based on number, email and postcode. */
  guestOrder: CustomerOrder;
  /** Retrieve guest order details based on token. */
  guestOrderByToken: CustomerOrder;
  /** The Homepage graphql */
  homepage?: Maybe<HomePage>;
  /** Check whether the specified email has already been used to create a customer account. */
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>;
  /** The mpBlogCategories query searches for Category that match the criteria specified in the filter. */
  mpBlogCategories?: Maybe<CategoriesOutput>;
  /** The mpBlogComments query searches for Category that match the criteria specified in the filter. */
  mpBlogComments?: Maybe<CommentsOutput>;
  /** The mpBlogConfigs query gets the config of Blog extension. */
  mpBlogConfigs?: Maybe<ConfigsOutput>;
  /** The mpBlogMonthlyArchive query gets posts follow monthly archive. */
  mpBlogMonthlyArchive?: Maybe<MonthlyArchiveOutput>;
  /** Returns the total number of likes for the post */
  mpBlogPostLikes?: Maybe<LikesOutput>;
  /** The mpBlogPosts query searches for post that match the criteria specified in the filter. */
  mpBlogPosts?: Maybe<PostsOutput>;
  /** The mpBlogProducts query searches for Category that match the criteria specified in the filter. */
  mpBlogProducts?: Maybe<ProductsOutput>;
  /** The mpBlogTags query searches for tag that match the criteria specified in the filter. */
  mpBlogTags?: Maybe<TagsOutput>;
  /** The mpBlogTopics query searches for topic that match the criteria specified in the filter. */
  mpBlogTopics?: Maybe<TopicsOutput>;
  /** Get the code matching with the filter. */
  mpGTMCode?: Maybe<GtmCodeOutput>;
  /** Get the code of the homepage. */
  mpGTMCodeHome?: Maybe<GtmCodeOutput>;
  /** Get the head matching with the filter. */
  mpGTMHead?: Maybe<GtmHeadOutput>;
  /** Searches for Best Sellers information matches the filter. */
  mpSmtpBestsellers?: Maybe<SmtpBestsellersOutput>;
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>;
  /** Return the active ratings attributes and the values each rating can have. */
  productReviewRatingsMetadata: ProductReviewRatingsMetadata;
  /** Search for products that match the criteria specified in the `search` and `filter` attributes. */
  products?: Maybe<Products>;
  /** Returns details about Google reCAPTCHA V3-Invisible configuration. */
  recaptchaV3Config?: Maybe<ReCaptchaConfigurationV3>;
  /** The Recent viewed products query for logged in customer. */
  recentViewedProducts?: Maybe<RecentViewProducts>;
  /** Perform Result page Action */
  resultPage?: Maybe<ResultPage>;
  /** Return the full details for a specified product, category, or CMS page. */
  route?: Maybe<RoutableInterface>;
  /** The Sales Order query returns information about a Sales order */
  salesOrder?: Maybe<SalesOrder>;
  /** Return details about the store's configuration. */
  storeConfig?: Maybe<StoreConfig>;
  /** System configuration of typsense */
  typeseSenseSystemConfig?: Maybe<TypeseSenseSystemConfig>;
  /**
   * Return the relative URL for a specified product, category or CMS page.
   * @deprecated Use the `route` query instead.
   */
  urlResolver?: Maybe<EntityUrl>;
  /** The Homepage view all graphql */
  viewallProducts?: Maybe<ViewAllProducts>;
  /**
   * Return the contents of a customer's wish list.
   * @deprecated Moved under `Customer.wishlist`.
   */
  wishlist?: Maybe<WishlistOutput>;
};


export type QueryLabelRulesArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<LabelRulesFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpRewardShoppingCartSpendingRulesArgs = {
  cart_id: Scalars['String']['input'];
};


export type QueryAdvreviewArgs = {
  amreviewDir?: InputMaybe<Scalars['String']['input']>;
  amreviewSort?: InputMaybe<Scalars['String']['input']>;
  isRecommended?: InputMaybe<Scalars['Boolean']['input']>;
  page: Scalars['Int']['input'];
  productId: Scalars['Int']['input'];
  stars?: InputMaybe<Scalars['Int']['input']>;
  verifiedBuyer?: InputMaybe<Scalars['Boolean']['input']>;
  withImages?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryAmReviewWidgetArgs = {
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  productId?: InputMaybe<Scalars['Int']['input']>;
  widgetId: Scalars['Int']['input'];
};


export type QueryApplyCouponsListArgs = {
  cart_id: Scalars['String']['input'];
};


export type QueryAttributesFormArgs = {
  formCode: Scalars['String']['input'];
};


export type QueryAttributesListArgs = {
  entityType: AttributeEntityTypeEnum;
  filters?: InputMaybe<AttributeFilterInput>;
};


export type QueryAvailableStoresArgs = {
  useCurrentGroup?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryCartArgs = {
  cart_id: Scalars['String']['input'];
};


export type QueryCategoriesArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filters?: InputMaybe<CategoryFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCategoryArgs = {
  id?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCategoryListArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filters?: InputMaybe<CategoryFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCmsBlocksArgs = {
  identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryCmsPageArgs = {
  id?: InputMaybe<Scalars['Int']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCompareListArgs = {
  uid: Scalars['ID']['input'];
};


export type QueryCountryArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>;
};


export type QueryCustomAttributeMetadataV2Args = {
  attributes?: InputMaybe<Array<AttributeInput>>;
};


export type QueryCustomerPlacedOrderArgs = {
  customer_id?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryGetAddressArgs = {
  input?: InputMaybe<GetLatLong>;
};


export type QueryGetBlockDataArgs = {
  blockId: Scalars['Int']['input'];
};


export type QueryGetHostedProUrlArgs = {
  input: HostedProUrlInput;
};


export type QueryGetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput;
};


export type QueryGetPaymentConfigArgs = {
  location: PaymentLocation;
};


export type QueryGetPaymentOrderArgs = {
  cartId: Scalars['String']['input'];
  id: Scalars['String']['input'];
};


export type QueryGetPaymentSdkArgs = {
  location: PaymentLocation;
};


export type QueryGuestOrderArgs = {
  input: OrderInformationInput;
};


export type QueryGuestOrderByTokenArgs = {
  input: OrderTokenInput;
};


export type QueryIsEmailAvailableArgs = {
  email: Scalars['String']['input'];
};


export type QueryMpBlogCategoriesArgs = {
  action: Scalars['String']['input'];
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<CategoriesFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  postId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogCommentsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<CommentsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogConfigsArgs = {
  storeId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogMonthlyArchiveArgs = {
  monthly?: InputMaybe<Scalars['Int']['input']>;
  storeId?: InputMaybe<Scalars['Int']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogPostLikesArgs = {
  postId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogPostsArgs = {
  action: Scalars['String']['input'];
  authorName?: InputMaybe<Scalars['String']['input']>;
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  categoryKey?: InputMaybe<Scalars['String']['input']>;
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<PostsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  postId?: InputMaybe<Scalars['Int']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  tagName?: InputMaybe<Scalars['String']['input']>;
  topicId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<ProductsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  postId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogTagsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<TagsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpBlogTopicsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<TopicsFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMpGtmCodeArgs = {
  filters?: InputMaybe<MpGtmCodeFilters>;
};


export type QueryMpGtmHeadArgs = {
  filters?: InputMaybe<MpGtmHeadFilters>;
};


export type QueryMpSmtpBestsellersArgs = {
  app_id: Scalars['String']['input'];
  filters?: InputMaybe<MpFilters>;
  secret_key: Scalars['String']['input'];
};


export type QueryPickupLocationsArgs = {
  area?: InputMaybe<AreaInput>;
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filters?: InputMaybe<PickupLocationFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  productsInfo?: InputMaybe<Array<InputMaybe<ProductInfoInput>>>;
  sort?: InputMaybe<PickupLocationSortInput>;
};


export type QueryProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<ProductAttributeFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};


export type QueryRecentViewedProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryResultPageArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  filters?: InputMaybe<Array<InputMaybe<SearchFilterInput>>>;
  keyword: Scalars['String']['input'];
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<SearchSortOrderInput>;
};


export type QueryRouteArgs = {
  url: Scalars['String']['input'];
};


export type QuerySalesOrderArgs = {
  id?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryUrlResolverArgs = {
  url: Scalars['String']['input'];
};


export type QueryViewallProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  input: Id;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Specifies the field to use for sorting quote items */
export type QuoteItemsSortInput = {
  /** Specifies the quote items field to sort by */
  field: SortQuoteItemsEnum;
  /** Specifies the order of quote items' sorting */
  order: SortEnum;
};

export type Rating = {
  __typename?: 'Rating';
  rating_code: Scalars['String']['output'];
  rating_id: Scalars['Int']['output'];
  rating_options?: Maybe<Array<Maybe<RatingOption>>>;
};

export type RatingOption = {
  __typename?: 'RatingOption';
  option_id: Scalars['Int']['output'];
  value: Scalars['Int']['output'];
};

export type RatingVote = {
  __typename?: 'RatingVote';
  /** Customer id. */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Product id. */
  entity_pk_value?: Maybe<Scalars['Int']['output']>;
  /** Option id. */
  option_id?: Maybe<Scalars['Int']['output']>;
  /** Percent. */
  percent?: Maybe<Scalars['Int']['output']>;
  /** Rating code. */
  rating_code?: Maybe<Scalars['String']['output']>;
  /** Rating id. */
  rating_id?: Maybe<Scalars['Int']['output']>;
  /** Review id. */
  review_id?: Maybe<Scalars['Int']['output']>;
  /** Store id. */
  store_id?: Maybe<Scalars['Int']['output']>;
  /** Value. */
  value?: Maybe<Scalars['Int']['output']>;
  /** Vote id. */
  vote_id?: Maybe<Scalars['Int']['output']>;
};

/** Contains reCAPTCHA V3-Invisible configuration details. */
export type ReCaptchaConfigurationV3 = {
  __typename?: 'ReCaptchaConfigurationV3';
  /** The position of the invisible reCAPTCHA badge on each page. */
  badge_position: Scalars['String']['output'];
  /** The message that appears to the user if validation fails. */
  failure_message: Scalars['String']['output'];
  /** A list of forms on the storefront that have been configured to use reCAPTCHA V3. */
  forms: Array<Maybe<ReCaptchaFormEnum>>;
  /** Return whether recaptcha is enabled or not */
  is_enabled: Scalars['Boolean']['output'];
  /** A two-character code that specifies the language that is used for Google reCAPTCHA text and messaging. */
  language_code?: Maybe<Scalars['String']['output']>;
  /** The minimum score that identifies a user interaction as a potential risk. */
  minimum_score: Scalars['Float']['output'];
  /** The website key generated when the Google reCAPTCHA account was registered. */
  website_key: Scalars['String']['output'];
};

export enum ReCaptchaFormEnum {
  Braintree = 'BRAINTREE',
  Contact = 'CONTACT',
  CustomerCreate = 'CUSTOMER_CREATE',
  CustomerEdit = 'CUSTOMER_EDIT',
  CustomerForgotPassword = 'CUSTOMER_FORGOT_PASSWORD',
  CustomerLogin = 'CUSTOMER_LOGIN',
  Newsletter = 'NEWSLETTER',
  PlaceOrder = 'PLACE_ORDER',
  ProductReview = 'PRODUCT_REVIEW',
  Sendfriend = 'SENDFRIEND'
}

export type RecentViewProducts = {
  __typename?: 'RecentViewProducts';
  /** Current Page Number */
  currentPage?: Maybe<Scalars['Int']['output']>;
  /** An array of recent viewed products that match the specified search criteria */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Page Size */
  pageSize?: Maybe<Scalars['Int']['output']>;
  /** Total Pages */
  totalPages?: Maybe<Scalars['Int']['output']>;
  /** The number of recent viewed products */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type Region = {
  __typename?: 'Region';
  /** The two-letter code for the region, such as TX for Texas. */
  code?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `Region` object. */
  id?: Maybe<Scalars['String']['output']>;
  /** The name of the region, such as Texas. */
  name?: Maybe<Scalars['String']['output']>;
};

/** Specifies the cart from which to remove a coupon. */
export type RemoveCouponFromCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
};

/** Contains details about the cart after removing a coupon. */
export type RemoveCouponFromCartOutput = {
  __typename?: 'RemoveCouponFromCartOutput';
  /** The cart after removing a coupon. */
  cart?: Maybe<Cart>;
};

/** Specifies which items to remove from the cart. */
export type RemoveItemFromCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']['input']>;
  /** Required field. The unique ID for a `CartItemInterface` object. */
  cart_item_uid?: InputMaybe<Scalars['ID']['input']>;
};

/** Contains details about the cart after removing an item. */
export type RemoveItemFromCartOutput = {
  __typename?: 'RemoveItemFromCartOutput';
  /** The cart after removing an item. */
  cart: Cart;
};

/** Defines which products to remove from a compare list. */
export type RemoveProductsFromCompareListInput = {
  /** An array of product IDs to remove from the compare list. */
  products: Array<InputMaybe<Scalars['ID']['input']>>;
  /** The unique identifier of the compare list to modify. */
  uid: Scalars['ID']['input'];
};

/** Contains the customer's wish list and any errors encountered. */
export type RemoveProductsFromWishlistOutput = {
  __typename?: 'RemoveProductsFromWishlistOutput';
  /** An array of errors encountered while deleting products from a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with after items were successfully deleted. */
  wishlist: Wishlist;
};

/** Contains the cart and any errors after adding products. */
export type ReorderItemsOutput = {
  __typename?: 'ReorderItemsOutput';
  /** Detailed information about the customer's cart. */
  cart: Cart;
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>;
};

/** Api response */
export type Response = {
  __typename?: 'Response';
  data?: Maybe<Scalars['String']['output']>;
  /** Data or message of api call */
  response?: Maybe<Scalars['String']['output']>;
  /** Status of api call */
  status: Scalars['Boolean']['output'];
};

export type ResultPage = {
  __typename?: 'ResultPage';
  facetData?: Maybe<Array<Maybe<FacetData>>>;
  productItems?: Maybe<Array<Maybe<ProductItems>>>;
  product_count?: Maybe<Scalars['Int']['output']>;
};

export type Review = {
  __typename?: 'Review';
  /** Answer. */
  answer?: Maybe<Scalars['String']['output']>;
  /** Comments. */
  comments?: Maybe<Array<Maybe<Comment>>>;
  /** Created at. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Reviewer id. */
  customer_id?: Maybe<Scalars['Int']['output']>;
  /** Review detail. */
  detail?: Maybe<Scalars['String']['output']>;
  /** Detail id. */
  detail_id?: Maybe<Scalars['Int']['output']>;
  /** Entity code. */
  entity_code?: Maybe<Scalars['String']['output']>;
  /** Entity id. */
  entity_id?: Maybe<Scalars['Int']['output']>;
  /** Product id. */
  entity_pk_value?: Maybe<Scalars['Int']['output']>;
  /** Guest email. */
  guest_email?: Maybe<Scalars['String']['output']>;
  /** Images. */
  images?: Maybe<Array<Maybe<Images>>>;
  /** Reomended. */
  is_recommended?: Maybe<Scalars['Boolean']['output']>;
  /** Advantages. */
  like_about?: Maybe<Scalars['String']['output']>;
  /** Minus review. */
  minus_review?: Maybe<Scalars['String']['output']>;
  /** Reviewer name. */
  nickname?: Maybe<Scalars['String']['output']>;
  /** Disadvantages. */
  not_like_about?: Maybe<Scalars['String']['output']>;
  /** Plus review. */
  plus_review?: Maybe<Scalars['String']['output']>;
  /** Rating votes. */
  rating_votes?: Maybe<Array<Maybe<RatingVote>>>;
  /** Review id. */
  review_id?: Maybe<Scalars['Int']['output']>;
  /** Status id. */
  status_id?: Maybe<Scalars['Int']['output']>;
  /** Review title. */
  title?: Maybe<Scalars['String']['output']>;
  /** Verified buyer. */
  verified_buyer?: Maybe<Scalars['Int']['output']>;
};

export type ReviewData = {
  base64_data: Scalars['String']['input'];
  file_name: Scalars['String']['input'];
};

export type ReviewFilter = {
  __typename?: 'ReviewFilter';
  code: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type ReviewOrder = {
  __typename?: 'ReviewOrder';
  code: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type ReviewSource = {
  __typename?: 'ReviewSource';
  image?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ReviewsData = {
  __typename?: 'ReviewsData';
  /** Detailed summary. */
  detailedSummary?: Maybe<DetailedSummary>;
  /** Reviews. */
  items?: Maybe<Array<Maybe<Review>>>;
  /** Rating summary. */
  ratingSummary?: Maybe<Scalars['Int']['output']>;
  /** Rating summary value. */
  ratingSummaryValue?: Maybe<Scalars['Float']['output']>;
  /** Recomended percent. */
  recomendedPercent?: Maybe<Scalars['Int']['output']>;
  /** Total records. */
  totalRecords?: Maybe<Scalars['Int']['output']>;
  /** Total records with applied filters. */
  totalRecordsFiltered?: Maybe<Scalars['Int']['output']>;
};

/** Contains the result of a request to revoke a customer token. */
export type RevokeCustomerTokenOutput = {
  __typename?: 'RevokeCustomerTokenOutput';
  /** The result of a request to revoke a customer token. */
  result: Scalars['Boolean']['output'];
};

export type RewardCartAddressInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country_code?: InputMaybe<Scalars['String']['input']>;
  firstname?: InputMaybe<Scalars['String']['input']>;
  lastname?: InputMaybe<Scalars['String']['input']>;
  postcode?: InputMaybe<Scalars['String']['input']>;
  region?: InputMaybe<Scalars['String']['input']>;
  save_in_address_book?: InputMaybe<Scalars['Boolean']['input']>;
  street?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  telephone?: InputMaybe<Scalars['String']['input']>;
};

export type RewardConfig = {
  __typename?: 'RewardConfig';
  /** icon url */
  display?: Maybe<DisplayConfig>;
  /** Earning configs */
  earning?: Maybe<EarningConfig>;
  /** General configs */
  general?: Maybe<GeneralConfig>;
  /** Spending configs */
  spending?: Maybe<SpendingConfig>;
};

/** The object contains reward data details */
export type RewardEarning = {
  __typename?: 'RewardEarning';
  /** Earning point */
  earning_point?: Maybe<Scalars['Int']['output']>;
  /** Earning point format */
  earning_point_format?: Maybe<Scalars['String']['output']>;
  /** Get icon url */
  reward_icon?: Maybe<Icon>;
};

export type RewardExchangeRate = {
  __typename?: 'RewardExchangeRate';
  /** Earning rate message */
  earning_rate?: Maybe<Scalars['String']['output']>;
  /** Spending rate message */
  spending_rate?: Maybe<Scalars['String']['output']>;
};

export type RewardShippingMethodInput = {
  carrier_code?: InputMaybe<Scalars['String']['input']>;
  method_code?: InputMaybe<Scalars['String']['input']>;
};

/** Routable entities serve as the model for a rendered page. */
export type RoutableInterface = {
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** Default implementation of RoutableInterface. This type is returned when the URL is not linked to an entity. */
export type RoutableUrl = RoutableInterface & {
  __typename?: 'RoutableUrl';
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** Defines the name and value of a SDK parameter */
export type SdkParams = {
  __typename?: 'SDKParams';
  /** The name of the SDK parameter */
  name?: Maybe<Scalars['String']['output']>;
  /** The value of the SDK parameter */
  value?: Maybe<Scalars['String']['output']>;
};

export type SaleEarnConfigs = {
  __typename?: 'SaleEarnConfigs';
  /** Earn point after invoice created */
  earn_point_after_invoice_created?: Maybe<Scalars['Boolean']['output']>;
  /** Point expired after */
  point_expired?: Maybe<Scalars['Int']['output']>;
};

/** Contains details about a comment. */
export type SalesCommentItem = {
  __typename?: 'SalesCommentItem';
  /** The text of the message. */
  message: Scalars['String']['output'];
  /** The timestamp of the comment. */
  timestamp: Scalars['String']['output'];
};

export type SalesItemInterface = {
  __typename?: 'SalesItemInterface';
  /** The entered gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
};

/** Sales Order graphql gather Data of specific order information */
export type SalesOrder = {
  __typename?: 'SalesOrder';
  /** An array of billing data of order */
  billing?: Maybe<Array<Maybe<Billing>>>;
  /** Creation date of Sales Order */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Customername of Sales Order */
  customer_name?: Maybe<Scalars['String']['output']>;
  /** Grand total of Sales Order */
  grand_total?: Maybe<Scalars['String']['output']>;
  /** Increment Id of Sales Order */
  increment_id?: Maybe<Scalars['String']['output']>;
  /** Specifies if this otder was placed by Guest cusotmer */
  is_guest_customer?: Maybe<Scalars['Boolean']['output']>;
  /** An array of all items data of order */
  items?: Maybe<Array<Maybe<Items>>>;
  /** An array of shipping data of order */
  shipping?: Maybe<Array<Maybe<Shipping>>>;
  /** Shipping method of Sales Order */
  shipping_method?: Maybe<Scalars['String']['output']>;
};

/** Sales order item information */
export type SalesOrderCollection = {
  __typename?: 'SalesOrderCollection';
  /** An array containing the all the CMS Page from Magento */
  allOrderRecords?: Maybe<Array<Maybe<OrderRecord>>>;
};

/** This enumeration defines the scope type for customer orders. */
export enum ScopeTypeEnum {
  Global = 'GLOBAL',
  Store = 'STORE',
  Website = 'WEBSITE'
}

export type SearchAttributes = {
  __typename?: 'SearchAttributes';
  code?: Maybe<Scalars['String']['output']>;
};

export type SearchConfig = {
  __typename?: 'SearchConfig';
  enable_addto_cart?: Maybe<Scalars['Boolean']['output']>;
  enable_price_slider?: Maybe<Scalars['Boolean']['output']>;
  image_height?: Maybe<Scalars['Int']['output']>;
  image_width?: Maybe<Scalars['Int']['output']>;
  product_per_page?: Maybe<Scalars['Int']['output']>;
  search_filters?: Maybe<Array<Maybe<SearchFilters>>>;
  sort_option?: Maybe<Array<Maybe<SortOption>>>;
  status?: Maybe<Scalars['Boolean']['output']>;
};

export type SearchFilterInput = {
  attribute: Scalars['String']['input'];
  value_string: Scalars['String']['input'];
};

export type SearchFilters = {
  __typename?: 'SearchFilters';
  attribute?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

/** Provides navigation for the query response. */
export type SearchResultPageInfo = {
  __typename?: 'SearchResultPageInfo';
  /** The specific page to return. */
  current_page?: Maybe<Scalars['Int']['output']>;
  /** The maximum number of items to return per page of results. */
  page_size?: Maybe<Scalars['Int']['output']>;
  /** The total number of pages in the response. */
  total_pages?: Maybe<Scalars['Int']['output']>;
};

export type SearchSortOrderInput = {
  attribute: Scalars['String']['input'];
  sort_order: SortEnumData;
};

/** A string that contains search suggestion */
export type SearchSuggestion = {
  __typename?: 'SearchSuggestion';
  /** The search suggestion of existing product. */
  search: Scalars['String']['output'];
};

/** Contains details about a selected bundle option. */
export type SelectedBundleOption = {
  __typename?: 'SelectedBundleOption';
  /** @deprecated Use `uid` instead */
  id: Scalars['Int']['output'];
  /** The display name of the selected bundle product option. */
  label: Scalars['String']['output'];
  /** The type of selected bundle product option. */
  type: Scalars['String']['output'];
  /** The unique ID for a `SelectedBundleOption` object */
  uid: Scalars['ID']['output'];
  /** An array of selected bundle option values. */
  values: Array<Maybe<SelectedBundleOptionValue>>;
};

/** Contains details about a value for a selected bundle option. */
export type SelectedBundleOptionValue = {
  __typename?: 'SelectedBundleOptionValue';
  /** Use `uid` instead */
  id: Scalars['Int']['output'];
  /** The display name of the value for the selected bundle product option. */
  label: Scalars['String']['output'];
  /** The price of the value for the selected bundle product option. */
  price: Scalars['Float']['output'];
  /** The quantity of the value for the selected bundle product option. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `SelectedBundleOptionValue` object */
  uid: Scalars['ID']['output'];
};

/** Contains details about a selected configurable option. */
export type SelectedConfigurableOption = {
  __typename?: 'SelectedConfigurableOption';
  /** The unique ID for a `ConfigurableProductOptions` object. */
  configurable_product_option_uid: Scalars['ID']['output'];
  /** The unique ID for a `ConfigurableProductOptionsValues` object. */
  configurable_product_option_value_uid: Scalars['ID']['output'];
  /** @deprecated Use `SelectedConfigurableOption.configurable_product_option_uid` instead. */
  id: Scalars['Int']['output'];
  /** The display text for the option. */
  option_label: Scalars['String']['output'];
  /** @deprecated Use `SelectedConfigurableOption.configurable_product_option_value_uid` instead. */
  value_id: Scalars['Int']['output'];
  /** The display name of the selected configurable option. */
  value_label: Scalars['String']['output'];
};

/** Identifies a customized product that has been placed in a cart. */
export type SelectedCustomizableOption = {
  __typename?: 'SelectedCustomizableOption';
  /** The unique ID for a specific `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object. */
  customizable_option_uid: Scalars['ID']['output'];
  /** @deprecated Use `SelectedCustomizableOption.customizable_option_uid` instead. */
  id: Scalars['Int']['output'];
  /** Indicates whether the customizable option is required. */
  is_required: Scalars['Boolean']['output'];
  /** The display name of the selected customizable option. */
  label: Scalars['String']['output'];
  /** A value indicating the order to display this option. */
  sort_order: Scalars['Int']['output'];
  /** The type of `CustomizableOptionInterface` object. */
  type: Scalars['String']['output'];
  /** An array of selectable values. */
  values: Array<Maybe<SelectedCustomizableOptionValue>>;
};

/** Identifies the value of the selected customized option. */
export type SelectedCustomizableOptionValue = {
  __typename?: 'SelectedCustomizableOptionValue';
  /** The unique ID for a value object that corresponds to the object represented by the `customizable_option_uid` attribute. */
  customizable_option_value_uid: Scalars['ID']['output'];
  /** @deprecated Use `SelectedCustomizableOptionValue.customizable_option_value_uid` instead. */
  id: Scalars['Int']['output'];
  /** The display name of the selected value. */
  label: Scalars['String']['output'];
  /** The price of the selected customizable value. */
  price: CartItemSelectedOptionValuePrice;
  /** The text identifying the selected value. */
  value: Scalars['String']['output'];
};

/** Describes the payment method the shopper selected. */
export type SelectedPaymentMethod = {
  __typename?: 'SelectedPaymentMethod';
  /** The payment method code. */
  code: Scalars['String']['output'];
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']['output']>;
  /** The payment method title. */
  title: Scalars['String']['output'];
};

/** Contains details about the selected shipping method and carrier. */
export type SelectedShippingMethod = {
  __typename?: 'SelectedShippingMethod';
  /** The cost of shipping using this shipping method. */
  amount: Money;
  /** @deprecated The field should not be used on the storefront. */
  base_amount?: Maybe<Money>;
  /** A string that identifies a commercial carrier or an offline shipping method. */
  carrier_code: Scalars['String']['output'];
  /** The label for the carrier code. */
  carrier_title: Scalars['String']['output'];
  /** A shipping method code associated with a carrier. */
  method_code: Scalars['String']['output'];
  /** The label for the method code. */
  method_title: Scalars['String']['output'];
  /** The cost of shipping using this shipping method, excluding tax. */
  price_excl_tax: Money;
  /** The cost of shipping using this shipping method, including tax. */
  price_incl_tax: Money;
};

export type SemanticSearch = {
  __typename?: 'SemanticSearch';
  enable?: Maybe<Scalars['Boolean']['output']>;
  enable_hybrid?: Maybe<Scalars['Boolean']['output']>;
};

/** Defines the referenced product and the email sender and recipients. */
export type SendEmailToFriendInput = {
  /** The ID of the product that the sender is referencing. */
  product_id: Scalars['Int']['input'];
  /** An array containing information about each recipient. */
  recipients: Array<InputMaybe<SendEmailToFriendRecipientInput>>;
  /** Information about the customer and the content of the message. */
  sender: SendEmailToFriendSenderInput;
};

/** Contains information about the sender and recipients. */
export type SendEmailToFriendOutput = {
  __typename?: 'SendEmailToFriendOutput';
  /** An array containing information about each recipient. */
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>;
  /** Information about the customer and the content of the message. */
  sender?: Maybe<SendEmailToFriendSender>;
};

/** An output object that contains information about the recipient. */
export type SendEmailToFriendRecipient = {
  __typename?: 'SendEmailToFriendRecipient';
  /** The email address of the recipient. */
  email: Scalars['String']['output'];
  /** The name of the recipient. */
  name: Scalars['String']['output'];
};

/** Contains details about a recipient. */
export type SendEmailToFriendRecipientInput = {
  /** The email address of the recipient. */
  email: Scalars['String']['input'];
  /** The name of the recipient. */
  name: Scalars['String']['input'];
};

/** An output object that contains information about the sender. */
export type SendEmailToFriendSender = {
  __typename?: 'SendEmailToFriendSender';
  /** The email address of the sender. */
  email: Scalars['String']['output'];
  /** The text of the message to be sent. */
  message: Scalars['String']['output'];
  /** The name of the sender. */
  name: Scalars['String']['output'];
};

/** Contains details about the sender. */
export type SendEmailToFriendSenderInput = {
  /** The email address of the sender. */
  email: Scalars['String']['input'];
  /** The text of the message to be sent. */
  message: Scalars['String']['input'];
  /** The name of the sender. */
  name: Scalars['String']['input'];
};

/** Contains details about the configuration of the Email to a Friend feature. */
export type SendFriendConfiguration = {
  __typename?: 'SendFriendConfiguration';
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean']['output'];
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean']['output'];
};

export type Seo = {
  __typename?: 'Seo';
  /** Meta description. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** Meta title. */
  meta_title?: Maybe<Scalars['String']['output']>;
};

export type SeoDetails = {
  __typename?: 'SeoDetails';
  meta_description?: Maybe<Scalars['String']['output']>;
  meta_keywords?: Maybe<Scalars['String']['output']>;
  meta_title?: Maybe<Scalars['String']['output']>;
  miscellaneous_html?: Maybe<Scalars['String']['output']>;
  url_key?: Maybe<Scalars['String']['output']>;
};

/** Sets the billing address. */
export type SetBillingAddressOnCartInput = {
  /** The billing address. */
  billing_address: BillingAddressInput;
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
};

/** Contains details about the cart after setting the billing address. */
export type SetBillingAddressOnCartOutput = {
  __typename?: 'SetBillingAddressOnCartOutput';
  /** The cart after setting the billing address. */
  cart: Cart;
};

/** Defines the guest email and cart. */
export type SetGuestEmailOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** The email address of the guest. */
  email: Scalars['String']['input'];
};

/** Contains details about the cart after setting the email of a guest. */
export type SetGuestEmailOnCartOutput = {
  __typename?: 'SetGuestEmailOnCartOutput';
  /** The cart after setting the guest email. */
  cart: Cart;
};

/** Applies a payment method to the quote. */
export type SetPaymentMethodAndPlaceOrderInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** The payment method data to apply to the cart. */
  payment_method: PaymentMethodInput;
};

/** Applies a payment method to the cart. */
export type SetPaymentMethodOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** The payment method data to apply to the cart. */
  payment_method: PaymentMethodInput;
};

/** Contains details about the cart after setting the payment method. */
export type SetPaymentMethodOnCartOutput = {
  __typename?: 'SetPaymentMethodOnCartOutput';
  /** The cart after setting the payment method. */
  cart: Cart;
};

/** Specifies an array of addresses to use for shipping. */
export type SetShippingAddressesOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** An array of shipping addresses. */
  shipping_addresses: Array<InputMaybe<ShippingAddressInput>>;
};

/** Contains details about the cart after setting the shipping addresses. */
export type SetShippingAddressesOnCartOutput = {
  __typename?: 'SetShippingAddressesOnCartOutput';
  /** The cart after setting the shipping addresses. */
  cart: Cart;
};

/** Applies one or shipping methods to the cart. */
export type SetShippingMethodsOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** An array of shipping methods. */
  shipping_methods: Array<InputMaybe<ShippingMethodInput>>;
};

/** Contains details about the cart after setting the shipping methods. */
export type SetShippingMethodsOnCartOutput = {
  __typename?: 'SetShippingMethodsOnCartOutput';
  /** The cart after setting the shipping methods. */
  cart: Cart;
};

/** Defines whether bundle items must be shipped together. */
export enum ShipBundleItemsEnum {
  Separately = 'SEPARATELY',
  Together = 'TOGETHER'
}

export type ShipmentItem = ShipmentItemInterface & {
  __typename?: 'ShipmentItem';
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float']['output'];
};

/** Order shipment item details. */
export type ShipmentItemInterface = {
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID']['output'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']['output']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String']['output'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float']['output'];
};

/** Contains order shipment tracking details. */
export type ShipmentTracking = {
  __typename?: 'ShipmentTracking';
  /** The shipping carrier for the order delivery. */
  carrier: Scalars['String']['output'];
  /** The tracking number of the order shipment. */
  number?: Maybe<Scalars['String']['output']>;
  /** The shipment tracking title. */
  title: Scalars['String']['output'];
};

/** An array containing all the shipping fields of order */
export type Shipping = {
  __typename?: 'Shipping';
  /** Shipping City of Sales Order */
  city?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  company?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  country?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  fax?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  name?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  postcode?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  region?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  street?: Maybe<Scalars['String']['output']>;
  /** Shipping City of Sales Order */
  telephone?: Maybe<Scalars['String']['output']>;
};

/** Defines a single shipping address. */
export type ShippingAddressInput = {
  /** Defines a shipping address. */
  address?: InputMaybe<CartAddressInput>;
  /** An ID from the customer's address book that uniquely identifies the address to be used for shipping. */
  customer_address_id?: InputMaybe<Scalars['Int']['input']>;
  /** Text provided by the shopper. */
  customer_notes?: InputMaybe<Scalars['String']['input']>;
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: InputMaybe<Scalars['String']['input']>;
};

/** Contains shipping addresses and methods. */
export type ShippingCartAddress = CartAddressInterface & {
  __typename?: 'ShippingCartAddress';
  /** An array that lists the shipping methods that can be applied to the cart. */
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
  /** @deprecated Use `cart_items_v2` instead. */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>;
  /** An array that lists the items in the cart. */
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>;
  /** The city specified for the billing or shipping address. */
  city: Scalars['String']['output'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']['output']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  customer_address_id?: Maybe<Scalars['Int']['output']>;
  /** Text provided by the shopper. */
  customer_notes?: Maybe<Scalars['String']['output']>;
  /** The customer's fax number. */
  fax?: Maybe<Scalars['String']['output']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String']['output'];
  /** @deprecated This information should not be exposed on the frontend. */
  items_weight?: Maybe<Scalars['Float']['output']>;
  /** The last name of the customer or guest. */
  lastname: Scalars['String']['output'];
  /** Shipping location latitude longitude. */
  lat_lng?: Maybe<Array<Maybe<LatLng>>>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: Maybe<Scalars['String']['output']>;
  pickup_location_code?: Maybe<Scalars['String']['output']>;
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']['output']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']['output']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An object that describes the selected shipping method. */
  selected_shipping_method?: Maybe<SelectedShippingMethod>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']['output']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']['output']>;
  /** The unique id of the customer address. */
  uid: Scalars['String']['output'];
  /** The VAT company number for billing or shipping address. */
  vat_id?: Maybe<Scalars['String']['output']>;
};

/** Defines an individual shipping discount. This discount can be applied to shipping. */
export type ShippingDiscount = {
  __typename?: 'ShippingDiscount';
  /** The amount of the discount. */
  amount: Money;
};

/** Contains details about shipping and handling costs. */
export type ShippingHandling = {
  __typename?: 'ShippingHandling';
  /** The shipping amount, excluding tax. */
  amount_excluding_tax?: Maybe<Money>;
  /** The shipping amount, including tax. */
  amount_including_tax?: Maybe<Money>;
  /** The applied discounts to the shipping. */
  discounts?: Maybe<Array<Maybe<ShippingDiscount>>>;
  /** Details about taxes applied for shipping. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The total amount for shipping. */
  total_amount: Money;
};

/** Defines the shipping carrier and method. */
export type ShippingMethodInput = {
  /** A string that identifies a commercial carrier or an offline delivery method. */
  carrier_code: Scalars['String']['input'];
  /** A string that indicates which service a commercial carrier will use to ship items. For offline delivery methods, this value is similar to the label displayed on the checkout page. */
  method_code: Scalars['String']['input'];
};

export type Sidebar = {
  __typename?: 'Sidebar';
  /** Number of most view posts. */
  number_mostview_posts?: Maybe<Scalars['Int']['output']>;
  /** Number of recent posts. */
  number_recent_posts?: Maybe<Scalars['Int']['output']>;
};

/** An implementation for simple product cart items. */
export type SimpleCartItem = CartItemInterface & {
  __typename?: 'SimpleCartItem';
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities. */
export type SimpleProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'SimpleProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']['output']>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities. */
export type SimpleProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities. */
export type SimpleProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Defines a single product to add to the cart. */
export type SimpleProductCartItemInput = {
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** An object containing the `sku`, `quantity`, and other relevant information about the product. */
  data: CartItemInput;
};

/** Contains a simple product wish list item. */
export type SimpleWishlistItem = WishlistItemInterface & {
  __typename?: 'SimpleWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

export type Slider = {
  __typename?: 'Slider';
  button_label?: Maybe<Scalars['String']['output']>;
  button_position?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  description_color?: Maybe<Scalars['String']['output']>;
  description_position?: Maybe<Scalars['String']['output']>;
  display_button?: Maybe<Scalars['Boolean']['output']>;
  end_date?: Maybe<Scalars['String']['output']>;
  /** @deprecated use link_info array instead */
  link?: Maybe<LinkItems>;
  link_info?: Maybe<LinkItems>;
  link_type?: Maybe<Scalars['String']['output']>;
  position?: Maybe<Scalars['Int']['output']>;
  slider_image?: Maybe<Scalars['String']['output']>;
  start_date?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  title_color?: Maybe<Scalars['String']['output']>;
};

export type SliderBlock = Block & BlockData & {
  __typename?: 'SliderBlock';
  autoplay?: Maybe<Scalars['Boolean']['output']>;
  autoplay_hover_pause?: Maybe<Scalars['Boolean']['output']>;
  autoplay_timeout?: Maybe<Scalars['String']['output']>;
  banners?: Maybe<Array<Maybe<BannerItems>>>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_dots?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated show_title insted */
  show_slider_title?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  slider_width?: Maybe<Scalars['String']['output']>;
  sliders?: Maybe<Array<Maybe<Slider>>>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  templateType?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

/** Smart button payment inputs */
export type SmartButtonMethodInput = {
  /** The payment source for the payment method */
  payment_source?: InputMaybe<Scalars['String']['input']>;
  /** The payment services order ID */
  payments_order_id?: InputMaybe<Scalars['String']['input']>;
  /** PayPal order ID */
  paypal_order_id?: InputMaybe<Scalars['String']['input']>;
};

export type SmartButtonsConfig = PaymentConfigItem & {
  __typename?: 'SmartButtonsConfig';
  /** The styles for the PayPal Smart Button configuration */
  button_styles?: Maybe<ButtonStyles>;
  /** The payment method code as defined in the payment gateway */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether to display the PayPal Pay Later message */
  display_message?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether to display Venmo */
  display_venmo?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the payment method is displayed */
  is_visible?: Maybe<Scalars['Boolean']['output']>;
  /** Contains details about the styles for the PayPal Pay Later message */
  message_styles?: Maybe<MessageStyles>;
  /** Defines the payment intent (Authorize or Capture */
  payment_intent?: Maybe<Scalars['String']['output']>;
  /** The PayPal parameters required to load the JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** The relative order the payment method is displayed on the checkout page */
  sort_order?: Maybe<Scalars['String']['output']>;
  /** The name displayed for the payment method */
  title?: Maybe<Scalars['String']['output']>;
};

export type SmtpBestsellersOutput = {
  __typename?: 'SmtpBestsellersOutput';
  /** Bestsellers Product Information. */
  mpBestsellers?: Maybe<Array<Maybe<BestsellersProductOutput>>>;
};

/** Indicates whether to return results in ascending or descending order. */
export enum SortEnum {
  Asc = 'ASC',
  Desc = 'DESC'
}

/** Indicates whether to return results in ascending or descending order. */
export enum SortEnumData {
  Asc = 'ASC',
  Desc = 'DESC'
}

/** Defines a possible sort field. */
export type SortField = {
  __typename?: 'SortField';
  /** The label of the sort field. */
  label?: Maybe<Scalars['String']['output']>;
  /** The attribute code of the sort field. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  __typename?: 'SortFields';
  /** The default sort field value. */
  default?: Maybe<Scalars['String']['output']>;
  /** An array of possible sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>;
};

export type SortOption = {
  __typename?: 'SortOption';
  attribute?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['String']['output']>;
};

/** Specifies the field to use for sorting quote items */
export enum SortQuoteItemsEnum {
  BaseDiscountAmount = 'BASE_DISCOUNT_AMOUNT',
  BaseDiscountTaxCompensationAmount = 'BASE_DISCOUNT_TAX_COMPENSATION_AMOUNT',
  BasePrice = 'BASE_PRICE',
  BasePriceIncTax = 'BASE_PRICE_INC_TAX',
  BaseRowTotal = 'BASE_ROW_TOTAL',
  BaseRowTotalIncTax = 'BASE_ROW_TOTAL_INC_TAX',
  BaseTaxAmount = 'BASE_TAX_AMOUNT',
  BaseTaxBeforeDiscount = 'BASE_TAX_BEFORE_DISCOUNT',
  CreatedAt = 'CREATED_AT',
  CustomPrice = 'CUSTOM_PRICE',
  Description = 'DESCRIPTION',
  DiscountAmount = 'DISCOUNT_AMOUNT',
  DiscountPercent = 'DISCOUNT_PERCENT',
  DiscountTaxCompensationAmount = 'DISCOUNT_TAX_COMPENSATION_AMOUNT',
  FreeShipping = 'FREE_SHIPPING',
  ItemId = 'ITEM_ID',
  Name = 'NAME',
  OriginalCustomPrice = 'ORIGINAL_CUSTOM_PRICE',
  Price = 'PRICE',
  PriceIncTax = 'PRICE_INC_TAX',
  ProductId = 'PRODUCT_ID',
  ProductType = 'PRODUCT_TYPE',
  Qty = 'QTY',
  RowTotal = 'ROW_TOTAL',
  RowTotalIncTax = 'ROW_TOTAL_INC_TAX',
  RowTotalWithDiscount = 'ROW_TOTAL_WITH_DISCOUNT',
  RowWeight = 'ROW_WEIGHT',
  Sku = 'SKU',
  TaxAmount = 'TAX_AMOUNT',
  TaxBeforeDiscount = 'TAX_BEFORE_DISCOUNT',
  TaxPercent = 'TAX_PERCENT',
  UpdatedAt = 'UPDATED_AT',
  Weight = 'WEIGHT'
}

export type SpendingConfiguration = {
  __typename?: 'SpendingConfiguration';
  /** Point spent on current cart */
  pointSpent?: Maybe<Scalars['Int']['output']>;
  /** Rule applied on current cart */
  ruleApplied?: Maybe<Scalars['String']['output']>;
  /** List rule available on cart */
  rules?: Maybe<Array<Maybe<SpendingRules>>>;
};

export type SpendingRules = {
  __typename?: 'SpendingRules';
  /** Rule Id */
  id?: Maybe<Scalars['String']['output']>;
  /** Label rule */
  label?: Maybe<Scalars['String']['output']>;
  /** Max */
  max?: Maybe<Scalars['Int']['output']>;
  /** Min */
  min?: Maybe<Scalars['Int']['output']>;
  /** Step spending point */
  step?: Maybe<Scalars['Int']['output']>;
};

/** The type contains information about a store config */
export type StoreConfig = {
  __typename?: 'StoreConfig';
  /** Contains scripts that must be included in the HTML before the closing `<body>` tag. */
  absolute_footer?: Maybe<Scalars['String']['output']>;
  /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No). */
  allow_guests_to_write_product_reviews?: Maybe<Scalars['String']['output']>;
  /** The value of the Allow Gift Messages for Order Items option */
  allow_items?: Maybe<Scalars['String']['output']>;
  /** The value of the Allow Gift Messages on Order Level option */
  allow_order?: Maybe<Scalars['String']['output']>;
  /** Indicates whether to enable autocomplete on login and forgot password forms. */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']['output']>;
  /** The base currency code. */
  base_currency_code?: Maybe<Scalars['String']['output']>;
  /** A fully-qualified URL that is used to create relative links to the `base_url`. */
  base_link_url?: Maybe<Scalars['String']['output']>;
  /** The fully-qualified URL that specifies the location of media files. */
  base_media_url?: Maybe<Scalars['String']['output']>;
  /** The fully-qualified URL that specifies the location of static view files. */
  base_static_url?: Maybe<Scalars['String']['output']>;
  /** The store’s fully-qualified base URL. */
  base_url?: Maybe<Scalars['String']['output']>;
  /** Braintree 3D Secure, should 3D Secure be used for specific countries. */
  braintree_3dsecure_allowspecific?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree 3D Secure, always request 3D Secure flag. */
  braintree_3dsecure_always_request_3ds?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree 3D Secure, the specific countries to use 3D Secure in, to be used if allow specific is status is enabled. */
  braintree_3dsecure_specificcountry?: Maybe<Scalars['String']['output']>;
  /** Braintree 3D Secure, threshold above which 3D Secure should be requested. */
  braintree_3dsecure_threshold_amount?: Maybe<Scalars['String']['output']>;
  /** Braintree 3D Secure enabled/active status. */
  braintree_3dsecure_verify_3dsecure?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree ACH vault status. */
  braintree_ach_direct_debit_vault_active?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree Apple Pay merchant name. */
  braintree_applepay_merchant_name?: Maybe<Scalars['String']['output']>;
  /** Braintree Apple Pay vault status. */
  braintree_applepay_vault_active?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree cc vault status. */
  braintree_cc_vault_active?: Maybe<Scalars['String']['output']>;
  /** Braintree cc vault CVV re-verification enabled status. */
  braintree_cc_vault_cvv?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree environment. */
  braintree_environment?: Maybe<Scalars['String']['output']>;
  /** Braintree Google Pay button color. */
  braintree_googlepay_btn_color?: Maybe<Scalars['String']['output']>;
  /** Braintree Google Pay Card types supported. */
  braintree_googlepay_cctypes?: Maybe<Scalars['String']['output']>;
  /** Braintree Google Pay merchant ID. */
  braintree_googlepay_merchant_id?: Maybe<Scalars['String']['output']>;
  /** Braintree Google Pay vault status. */
  braintree_googlepay_vault_active?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree Local Payment Methods allowed payment methods. */
  braintree_local_payment_allowed_methods?: Maybe<Scalars['String']['output']>;
  /** Braintree Local Payment Methods fallback button text. */
  braintree_local_payment_fallback_button_text?: Maybe<Scalars['String']['output']>;
  /** Braintree Local Payment Methods redirect URL on failed payment. */
  braintree_local_payment_redirect_on_fail?: Maybe<Scalars['String']['output']>;
  /** Braintree Merchant Account ID. */
  braintree_merchant_account_id?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit mini-cart & cart button style color. */
  braintree_paypal_button_location_cart_type_credit_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit mini-cart & cart button style label. */
  braintree_paypal_button_location_cart_type_credit_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit mini-cart & cart button style shape. */
  braintree_paypal_button_location_cart_type_credit_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit mini-cart & cart button show status. */
  braintree_paypal_button_location_cart_type_credit_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging mini-cart & cart style layout. */
  braintree_paypal_button_location_cart_type_messaging_layout?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging mini-cart & cart style logo. */
  braintree_paypal_button_location_cart_type_messaging_logo?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging mini-cart & cart style logo position. */
  braintree_paypal_button_location_cart_type_messaging_logo_position?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging mini-cart & cart show status. */
  braintree_paypal_button_location_cart_type_messaging_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging checkout style text color. */
  braintree_paypal_button_location_cart_type_messaging_text_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later mini-cart & cart button style color. */
  braintree_paypal_button_location_cart_type_paylater_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later mini-cart & cart button style label. */
  braintree_paypal_button_location_cart_type_paylater_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later mini-cart & cart button style shape. */
  braintree_paypal_button_location_cart_type_paylater_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later mini-cart & cart button show status. */
  braintree_paypal_button_location_cart_type_paylater_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal mini-cart & cart button style color. */
  braintree_paypal_button_location_cart_type_paypal_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal mini-cart & cart button style label. */
  braintree_paypal_button_location_cart_type_paypal_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal mini-cart & cart button style shape. */
  braintree_paypal_button_location_cart_type_paypal_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal mini-cart & cart button show. */
  braintree_paypal_button_location_cart_type_paypal_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Credit checkout button style color. */
  braintree_paypal_button_location_checkout_type_credit_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit checkout button style label. */
  braintree_paypal_button_location_checkout_type_credit_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit checkout button style shape. */
  braintree_paypal_button_location_checkout_type_credit_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit checkout button show status. */
  braintree_paypal_button_location_checkout_type_credit_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging checkout style layout. */
  braintree_paypal_button_location_checkout_type_messaging_layout?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging checkout style logo. */
  braintree_paypal_button_location_checkout_type_messaging_logo?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging checkout style logo position. */
  braintree_paypal_button_location_checkout_type_messaging_logo_position?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging checkout show status. */
  braintree_paypal_button_location_checkout_type_messaging_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging checkout style text color. */
  braintree_paypal_button_location_checkout_type_messaging_text_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later checkout button style color. */
  braintree_paypal_button_location_checkout_type_paylater_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later checkout button style label. */
  braintree_paypal_button_location_checkout_type_paylater_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later checkout button style shape. */
  braintree_paypal_button_location_checkout_type_paylater_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later checkout button show status. */
  braintree_paypal_button_location_checkout_type_paylater_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal checkout button style color. */
  braintree_paypal_button_location_checkout_type_paypal_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal checkout button style label. */
  braintree_paypal_button_location_checkout_type_paypal_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal checkout button style shape. */
  braintree_paypal_button_location_checkout_type_paypal_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal checkout button show. */
  braintree_paypal_button_location_checkout_type_paypal_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Credit PDP button style color. */
  braintree_paypal_button_location_productpage_type_credit_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit PDP button style label. */
  braintree_paypal_button_location_productpage_type_credit_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit PDP button style shape. */
  braintree_paypal_button_location_productpage_type_credit_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Credit PDP button show status. */
  braintree_paypal_button_location_productpage_type_credit_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging PDP style layout. */
  braintree_paypal_button_location_productpage_type_messaging_layout?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging PDP style logo. */
  braintree_paypal_button_location_productpage_type_messaging_logo?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging PDP style logo position. */
  braintree_paypal_button_location_productpage_type_messaging_logo_position?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later messaging PDP show status. */
  braintree_paypal_button_location_productpage_type_messaging_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Pay Later messaging PDP style text color. */
  braintree_paypal_button_location_productpage_type_messaging_text_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later PDP button style color. */
  braintree_paypal_button_location_productpage_type_paylater_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later PDP button style label. */
  braintree_paypal_button_location_productpage_type_paylater_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later PDP button style shape. */
  braintree_paypal_button_location_productpage_type_paylater_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal Pay Later PDP button show status. */
  braintree_paypal_button_location_productpage_type_paylater_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal PDP button style color. */
  braintree_paypal_button_location_productpage_type_paypal_color?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal PDP button style label. */
  braintree_paypal_button_location_productpage_type_paypal_label?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal PDP button style shape. */
  braintree_paypal_button_location_productpage_type_paypal_shape?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal PDP button show. */
  braintree_paypal_button_location_productpage_type_paypal_show?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal Credit Merchant Name on the FCA Register. */
  braintree_paypal_credit_uk_merchant_name?: Maybe<Scalars['String']['output']>;
  /** Should display Braintree PayPal in mini-cart & cart? */
  braintree_paypal_display_on_shopping_cart?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal merchant's country. */
  braintree_paypal_merchant_country?: Maybe<Scalars['String']['output']>;
  /** Braintree PayPal override for Merchant Name. */
  braintree_paypal_merchant_name_override?: Maybe<Scalars['String']['output']>;
  /** Does Braintree PayPal require the customer's billing address? */
  braintree_paypal_require_billing_address?: Maybe<Scalars['Boolean']['output']>;
  /** Does Braintree PayPal require the order line items? */
  braintree_paypal_send_cart_line_items?: Maybe<Scalars['Boolean']['output']>;
  /** Braintree PayPal vault status. */
  braintree_paypal_vault_active?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - checkout/cart/delete_quote_after */
  cart_expires_in_days?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - checkout/cart_link/use_qty */
  cart_summary_display_quantity?: Maybe<Scalars['Int']['output']>;
  /** The default sort order of the search results list. */
  catalog_default_sort_by?: Maybe<Scalars['String']['output']>;
  /** Corresponds to the 'Display Prices In Product Lists' field in the Admin. It indicates how FPT information is displayed on category pages. */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** The suffix applied to category pages, such as `.htm` or `.html`. */
  category_url_suffix?: Maybe<Scalars['String']['output']>;
  /** Indicates whether only specific countries can use this payment method. */
  check_money_order_enable_for_specific_countries?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the Check/Money Order payment method is enabled. */
  check_money_order_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** The name of the party to whom the check must be payable. */
  check_money_order_make_check_payable_to?: Maybe<Scalars['String']['output']>;
  /** The maximum order amount required to qualify for the Check/Money Order payment method. */
  check_money_order_max_order_total?: Maybe<Scalars['String']['output']>;
  /** The minimum order amount required to qualify for the Check/Money Order payment method. */
  check_money_order_min_order_total?: Maybe<Scalars['String']['output']>;
  /** The status of new orders placed using the Check/Money Order payment method. */
  check_money_order_new_order_status?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of specific countries allowed to use the Check/Money Order payment method. */
  check_money_order_payment_from_specific_countries?: Maybe<Scalars['String']['output']>;
  /** The full street address or PO Box where the checks are mailed. */
  check_money_order_send_check_to?: Maybe<Scalars['String']['output']>;
  /** A number indicating the position of the Check/Money Order payment method in the list of available payment methods during checkout. */
  check_money_order_sort_order?: Maybe<Scalars['Int']['output']>;
  /** The title of the Check/Money Order payment method displayed on the storefront. */
  check_money_order_title?: Maybe<Scalars['String']['output']>;
  /** The name of the CMS page that identifies the home page for the store. */
  cms_home_page?: Maybe<Scalars['String']['output']>;
  /** A specific CMS page that displays when cookies are not enabled for the browser. */
  cms_no_cookies?: Maybe<Scalars['String']['output']>;
  /** A specific CMS page that displays when a 404 'Page Not Found' error occurs. */
  cms_no_route?: Maybe<Scalars['String']['output']>;
  /**
   * A code assigned to the store to identify it.
   * @deprecated Use `store_code` instead.
   */
  code?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the `parent` or child (`itself`) thumbnail should be used in the cart for configurable products. */
  configurable_thumbnail_source?: Maybe<Scalars['String']['output']>;
  /** Indicates whether the Contact Us form in enabled. */
  contact_enabled: Scalars['Boolean']['output'];
  /** The copyright statement that appears at the bottom of each page. */
  copyright?: Maybe<Scalars['String']['output']>;
  /** Extended Config Data - general/region/state_required */
  countries_with_required_region?: Maybe<Scalars['String']['output']>;
  /** Indicates if the new accounts need confirmation. */
  create_account_confirmation?: Maybe<Scalars['Boolean']['output']>;
  /** The store config query */
  custom?: Maybe<Custom>;
  /** Customer access token lifetime. */
  customer_access_token_lifetime?: Maybe<Scalars['Float']['output']>;
  /** Extended Config Data - general/country/default */
  default_country?: Maybe<Scalars['String']['output']>;
  /** The description that provides a summary of your site for search engine listings. It should not be more than 160 characters in length. */
  default_description?: Maybe<Scalars['String']['output']>;
  /** The default display currency code. */
  default_display_currency_code?: Maybe<Scalars['String']['output']>;
  /** A series of keywords that describe your store, each separated by a comma. */
  default_keywords?: Maybe<Scalars['String']['output']>;
  /** The title that appears at the title bar of each page when viewed in a browser. */
  default_title?: Maybe<Scalars['String']['output']>;
  /** Controls the display of the demo store notice at the top of the page. Options: 0 (No) or 1 (Yes). */
  demonotice?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - general/region/display_all */
  display_state_if_optional?: Maybe<Scalars['Boolean']['output']>;
  /** The landing page that is associated with the base URL. */
  front?: Maybe<Scalars['String']['output']>;
  /** Google Map pin address */
  google_map_pin_address?: Maybe<MapPinAddress>;
  /** The default number of products per page in Grid View. */
  grid_per_page?: Maybe<Scalars['Int']['output']>;
  /** A list of numbers that define how many products can be displayed in Grid View. */
  grid_per_page_values?: Maybe<Scalars['String']['output']>;
  /** Scripts that must be included in the HTML before the closing `<head>` tag. */
  head_includes?: Maybe<Scalars['String']['output']>;
  /** The small graphic image (favicon) that appears in the address bar and tab of the browser. */
  head_shortcut_icon?: Maybe<Scalars['String']['output']>;
  /** The path to the logo that appears in the header. */
  header_logo_src?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the store.
   * @deprecated Use `store_code` instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the store view has been designated as the default within the store group. */
  is_default_store?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the store group has been designated as the default within the website. */
  is_default_store_group?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - checkout/options/guest_checkout */
  is_guest_checkout_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - checkout/options/onepage_checkout_enabled */
  is_one_page_checkout_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** The format of the search results list. */
  list_mode?: Maybe<Scalars['String']['output']>;
  /** The default number of products per page in List View. */
  list_per_page?: Maybe<Scalars['Int']['output']>;
  /** A list of numbers that define how many products can be displayed in List View. */
  list_per_page_values?: Maybe<Scalars['String']['output']>;
  /** The store locale. */
  locale?: Maybe<Scalars['String']['output']>;
  /** The Alt text that is associated with the logo. */
  logo_alt?: Maybe<Scalars['String']['output']>;
  /** The height of the logo image, in pixels. */
  logo_height?: Maybe<Scalars['Int']['output']>;
  /** The width of the logo image, in pixels. */
  logo_width?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether wishlists are enabled (1) or disabled (0). */
  magento_wishlist_general_is_enabled?: Maybe<Scalars['String']['output']>;
  /** Extended Config Data - checkout/options/max_items_display_count */
  max_items_in_order_summary?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - checkout/sidebar/display */
  minicart_display?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - checkout/sidebar/count */
  minicart_max_items?: Maybe<Scalars['Int']['output']>;
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']['output']>;
  /** Indicates whether newsletters are enabled. */
  newsletter_enabled: Scalars['Boolean']['output'];
  /** The default page that displays when a 404 'Page not Found' error occurs. */
  no_route?: Maybe<Scalars['String']['output']>;
  /** Extended Config Data - general/country/optional_zip_countries */
  optional_zip_countries?: Maybe<Scalars['String']['output']>;
  /** Indicates whether orders can be cancelled by customers or not. */
  order_cancellation_enabled: Scalars['Boolean']['output'];
  /** An array containing available cancellation reasons. */
  order_cancellation_reasons: Array<Maybe<CancellationReason>>;
  /** Payflow Pro vault status. */
  payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']['output']>;
  /** Corresponds to the 'Display Prices On Product View Page' field in the Admin. It indicates how FPT information is displayed on product pages. */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No). */
  product_reviews_enabled?: Maybe<Scalars['String']['output']>;
  /** The suffix applied to product pages, such as `.htm` or `.html`. */
  product_url_suffix?: Maybe<Scalars['String']['output']>;
  /** The number of different character classes (lowercase, uppercase, digits, special characters) required in a password. */
  required_character_classes_number?: Maybe<Scalars['String']['output']>;
  /**
   * The ID of the root category.
   * @deprecated Use `root_category_uid` instead.
   */
  root_category_id?: Maybe<Scalars['Int']['output']>;
  /** The unique ID for a `CategoryInterface` object. */
  root_category_uid?: Maybe<Scalars['ID']['output']>;
  /** Corresponds to the 'Display Prices In Sales Modules' field in the Admin. It indicates how FPT information is displayed on cart, checkout, and order pages. */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** A secure fully-qualified URL that is used to create relative links to the `base_url`. */
  secure_base_link_url?: Maybe<Scalars['String']['output']>;
  /** The secure fully-qualified URL that specifies the location of media files. */
  secure_base_media_url?: Maybe<Scalars['String']['output']>;
  /** The secure fully-qualified URL that specifies the location of static view files. */
  secure_base_static_url?: Maybe<Scalars['String']['output']>;
  /** The store’s fully-qualified secure base URL. */
  secure_base_url?: Maybe<Scalars['String']['output']>;
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>;
  /** Extended Config Data - tax/cart_display/full_summary */
  shopping_cart_display_full_summary?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - tax/cart_display/grandtotal */
  shopping_cart_display_grand_total?: Maybe<Scalars['Boolean']['output']>;
  /** Extended Config Data - tax/cart_display/price */
  shopping_cart_display_price?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - tax/cart_display/shipping */
  shopping_cart_display_shipping?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - tax/cart_display/subtotal */
  shopping_cart_display_subtotal?: Maybe<Scalars['Int']['output']>;
  /** Extended Config Data - tax/cart_display/gift_wrapping */
  shopping_cart_display_tax_gift_wrapping?: Maybe<TaxWrappingEnum>;
  /** Extended Config Data - tax/cart_display/zero_tax */
  shopping_cart_display_zero_tax?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether a breadcrumb trail appears on all CMS pages in the catalog. 0 (No) or 1 (Yes). */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']['output']>;
  /** The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope. */
  store_code?: Maybe<Scalars['ID']['output']>;
  /** The unique ID assigned to the store group. In the Admin, this is called the Store Name. */
  store_group_code?: Maybe<Scalars['ID']['output']>;
  /** The label assigned to the store group. */
  store_group_name?: Maybe<Scalars['String']['output']>;
  /** Store Location */
  store_location?: Maybe<StoreLocation>;
  /** The label assigned to the store view. */
  store_name?: Maybe<Scalars['String']['output']>;
  /** The store view sort order. */
  store_sort_order?: Maybe<Scalars['Int']['output']>;
  /** The time zone of the store. */
  timezone?: Maybe<Scalars['String']['output']>;
  /** A prefix that appears before the title to create a two- or three-part title. */
  title_prefix?: Maybe<Scalars['String']['output']>;
  /** The character that separates the category name and subcategory in the browser title bar. */
  title_separator?: Maybe<Scalars['String']['output']>;
  /** A suffix that appears after the title to create a two- or three-part title. */
  title_suffix?: Maybe<Scalars['String']['output']>;
  /** Typesense configration */
  typesense_config?: Maybe<TypesenseConfig>;
  /** Indicates whether the store code should be used in the URL. */
  use_store_in_url?: Maybe<Scalars['Boolean']['output']>;
  /** The unique ID for the website. */
  website_code?: Maybe<Scalars['ID']['output']>;
  /**
   * The ID number assigned to the website store.
   * @deprecated The field should not be used on the storefront.
   */
  website_id?: Maybe<Scalars['Int']['output']>;
  /** The label assigned to the website. */
  website_name?: Maybe<Scalars['String']['output']>;
  /** The unit of weight. */
  weight_unit?: Maybe<Scalars['String']['output']>;
  /** Text that appears in the header of the page and includes the name of the logged in customer. */
  welcome?: Maybe<Scalars['String']['output']>;
  /** Indicates whether only specific countries can use this payment method. */
  zero_subtotal_enable_for_specific_countries?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the Zero Subtotal payment method is enabled. */
  zero_subtotal_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** The status of new orders placed using the Zero Subtotal payment method. */
  zero_subtotal_new_order_status?: Maybe<Scalars['String']['output']>;
  /** When the new order status is 'Processing', this can be set to `authorize_capture` to automatically invoice all items that have a zero balance. */
  zero_subtotal_payment_action?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of specific countries allowed to use the Zero Subtotal payment method. */
  zero_subtotal_payment_from_specific_countries?: Maybe<Scalars['String']['output']>;
  /** A number indicating the position of the Zero Subtotal payment method in the list of available payment methods during checkout. */
  zero_subtotal_sort_order?: Maybe<Scalars['Int']['output']>;
  /** The title of the Zero Subtotal payment method displayed on the storefront. */
  zero_subtotal_title?: Maybe<Scalars['String']['output']>;
};

export type StoreLocation = {
  __typename?: 'StoreLocation';
  city?: Maybe<Scalars['String']['output']>;
  contact_name?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  latitude?: Maybe<Scalars['String']['output']>;
  longitude?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  postcode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  street?: Maybe<Scalars['String']['output']>;
};

/** Indicates where an attribute can be displayed. */
export type StorefrontProperties = {
  __typename?: 'StorefrontProperties';
  /** The relative position of the attribute in the layered navigation block. */
  position?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether the attribute is filterable with results, without results, or not at all. */
  use_in_layered_navigation?: Maybe<UseInLayeredNavigationOptions>;
  /** Indicates whether the attribute is displayed in product listings. */
  use_in_product_listing?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the attribute can be used in layered navigation on search results pages. */
  use_in_search_results_layered_navigation?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the attribute is displayed on product pages. */
  visible_on_catalog_pages?: Maybe<Scalars['Boolean']['output']>;
};

/** Contains the result of the `subscribeEmailToNewsletter` operation. */
export type SubscribeEmailToNewsletterOutput = {
  __typename?: 'SubscribeEmailToNewsletterOutput';
  /** The status of the subscription request. */
  status?: Maybe<SubscriptionStatusesEnum>;
};

/** Indicates the status of the request. */
export enum SubscriptionStatusesEnum {
  NotActive = 'NOT_ACTIVE',
  Subscribed = 'SUBSCRIBED',
  Unconfirmed = 'UNCONFIRMED',
  Unsubscribed = 'UNSUBSCRIBED'
}

/** Describes the swatch type and a value. */
export type SwatchData = {
  __typename?: 'SwatchData';
  /** Type of swatch filter item: 1 - text, 2 - image */
  type?: Maybe<Scalars['String']['output']>;
  /** Value for swatch item (text or image link) */
  value?: Maybe<Scalars['String']['output']>;
};

export type SwatchDataInterface = {
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']['output']>;
};

/** Swatch attribute metadata input types. */
export enum SwatchInputTypeEnum {
  Boolean = 'BOOLEAN',
  Date = 'DATE',
  Datetime = 'DATETIME',
  Dropdown = 'DROPDOWN',
  File = 'FILE',
  Gallery = 'GALLERY',
  Hidden = 'HIDDEN',
  Image = 'IMAGE',
  MediaImage = 'MEDIA_IMAGE',
  Multiline = 'MULTILINE',
  Multiselect = 'MULTISELECT',
  Price = 'PRICE',
  Select = 'SELECT',
  Text = 'TEXT',
  Textarea = 'TEXTAREA',
  Undefined = 'UNDEFINED',
  Visual = 'VISUAL',
  Weight = 'WEIGHT'
}

export type SwatchLayerFilterItem = LayerFilterItemInterface & SwatchLayerFilterItemInterface & {
  __typename?: 'SwatchLayerFilterItem';
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']['output']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']['output']>;
  /** Data required to render a swatch filter item. */
  swatch_data?: Maybe<SwatchData>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']['output']>;
};

export type SwatchLayerFilterItemInterface = {
  /** Data required to render a swatch filter item. */
  swatch_data?: Maybe<SwatchData>;
};

/** Synchronizes the payment order details */
export type SyncPaymentOrderInput = {
  /** The customer cart ID */
  cartId: Scalars['String']['input'];
  /** PayPal order ID */
  id: Scalars['String']['input'];
};

export type Tag = {
  __typename?: 'Tag';
  /** Timestamp indicating when the tag was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** The description of the tag. */
  description?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a tag is enabled. */
  enabled?: Maybe<Scalars['Int']['output']>;
  /** The import source of the tag. */
  import_source?: Maybe<Scalars['String']['output']>;
  /** The meta description of the tag. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** The meta keywords of the tag. */
  meta_keywords?: Maybe<Scalars['String']['output']>;
  /** The meta robot of the tag. */
  meta_robots?: Maybe<Scalars['String']['output']>;
  /** The meta title of the tag. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The name of the tag. */
  name?: Maybe<Scalars['String']['output']>;
  /** The posts assigned to a tag */
  posts?: Maybe<PostsOutputNoPage>;
  /** An ID that identifies the store. */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** An ID that uniquely identifies the tag. */
  tag_id?: Maybe<Scalars['Int']['output']>;
  /** Timestamp indicating when the tag was updated. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The url key of the tag. */
  url_key?: Maybe<Scalars['String']['output']>;
};

export type TaggedImageBlock = Block & BlockData & {
  __typename?: 'TaggedImageBlock';
  banner_template?: Maybe<Scalars['String']['output']>;
  block_status?: Maybe<Scalars['Boolean']['output']>;
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mapped_image?: Maybe<Array<Maybe<MappedImage>>>;
  mapped_mobile_image?: Maybe<Array<Maybe<MappedImage>>>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  page_type?: Maybe<Scalars['String']['output']>;
  position?: Maybe<Scalars['Int']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  title_image?: Maybe<Scalars['String']['output']>;
  title_position?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type TagsFilterInput = {
  /** Timestamp indicating when the tag was created */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Enabled */
  enabled?: InputMaybe<FilterTypeInput>;
  /** Import Source */
  import_source?: InputMaybe<FilterTypeInput>;
  /** The tag name. Customers use this name to identify the tag. */
  name?: InputMaybe<FilterTypeInput>;
  /** The store id */
  store_ids?: InputMaybe<FilterTypeInput>;
  /** The tag id. Customers use this name to identify the tag. */
  tag_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the tag was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The tag url_key */
  url_key?: InputMaybe<FilterTypeInput>;
};

export type TagsOutput = {
  __typename?: 'TagsOutput';
  /** An array of tags that match the specified search criteria */
  items?: Maybe<Array<Maybe<Tag>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of tags returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type TagsOutputNoPage = {
  __typename?: 'TagsOutputNoPage';
  /** An array of tags that match the specified search criteria */
  items?: Maybe<Array<Maybe<Tag>>>;
  /** The number of tags returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

/** Contains tax item details. */
export type TaxItem = {
  __typename?: 'TaxItem';
  /** The amount of tax applied to the item. */
  amount: Money;
  /** The rate used to calculate the tax. */
  rate: Scalars['Float']['output'];
  /** A title that describes the tax. */
  title: Scalars['String']['output'];
};

export enum TaxWrappingEnum {
  DisplayExcludingTax = 'DISPLAY_EXCLUDING_TAX',
  DisplayIncludingTax = 'DISPLAY_INCLUDING_TAX',
  DisplayTypeBoth = 'DISPLAY_TYPE_BOTH'
}

export type Testimonial = {
  __typename?: 'Testimonial';
  added_at?: Maybe<Scalars['String']['output']>;
  customer_name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  source?: Maybe<ReviewSource>;
  status?: Maybe<Scalars['Int']['output']>;
  testimonial_id?: Maybe<Scalars['Int']['output']>;
};

export type TestimonialBlock = Block & BlockData & {
  __typename?: 'TestimonialBlock';
  desktop_status?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mobile_status?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use title instead */
  name?: Maybe<Scalars['String']['output']>;
  show_title?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated use desktop_status instead */
  status?: Maybe<Scalars['Boolean']['output']>;
  store?: Maybe<Scalars['String']['output']>;
  store_label?: Maybe<Scalars['String']['output']>;
  /** Testimonial Details. */
  testimonial_info?: Maybe<Array<Maybe<Testimonial>>>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type TextSwatchData = SwatchDataInterface & {
  __typename?: 'TextSwatchData';
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']['output']>;
};

/** 3D Secure mode. */
export enum ThreeDsMode {
  Off = 'OFF',
  ScaAlways = 'SCA_ALWAYS',
  ScaWhenRequired = 'SCA_WHEN_REQUIRED'
}

/** Defines a price based on the quantity purchased. */
export type TierPrice = {
  __typename?: 'TierPrice';
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>;
  /** The price of the product at this tier. */
  final_price?: Maybe<Money>;
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']['output']>;
};

export type Topic = {
  __typename?: 'Topic';
  /** Timestamp indicating when the topic was created. */
  created_at?: Maybe<Scalars['String']['output']>;
  /** The description of the topic. */
  description?: Maybe<Scalars['String']['output']>;
  /** Indicates whether a topic is enabled. */
  enabled?: Maybe<Scalars['Int']['output']>;
  /** The import source of the topic. */
  import_source?: Maybe<Scalars['String']['output']>;
  /** The meta description of the topic. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** The meta keywords of the topic. */
  meta_keywords?: Maybe<Scalars['String']['output']>;
  /** The meta robot of the topic. */
  meta_robots?: Maybe<Scalars['String']['output']>;
  /** The meta title of the topic. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** The name of the topic. */
  name?: Maybe<Scalars['String']['output']>;
  /** The post assigned to a topic */
  posts?: Maybe<PostsOutputNoPage>;
  /** An ID that identifies the store. */
  store_ids?: Maybe<Scalars['String']['output']>;
  /** An ID that uniquely identifies the topic. */
  topic_id?: Maybe<Scalars['Int']['output']>;
  /** Timestamp indicating when the topic was updated. */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** The url key of the topic. */
  url_key?: Maybe<Scalars['String']['output']>;
};

export type TopicsFilterInput = {
  /** Timestamp indicating when the topic was created */
  created_at?: InputMaybe<FilterTypeInput>;
  /** Enabled */
  enabled?: InputMaybe<FilterTypeInput>;
  /** Import Source */
  import_source?: InputMaybe<FilterTypeInput>;
  /** The topic name. Customers use this name to identify the topic. */
  name?: InputMaybe<FilterTypeInput>;
  /** The store id */
  store_ids?: InputMaybe<FilterTypeInput>;
  /** The topic id. Customers use this name to identify the topic. */
  topic_id?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the topic was updated */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The topic url_key */
  url_key?: InputMaybe<FilterTypeInput>;
};

export type TopicsOutput = {
  __typename?: 'TopicsOutput';
  /** An array of topics that match the specified search criteria */
  items?: Maybe<Array<Maybe<Topic>>>;
  /** An object that includes the page_info and currentPage values specified in the query */
  pageInfo?: Maybe<PageInfo>;
  /** The number of topics returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type TopicsOutputNoPage = {
  __typename?: 'TopicsOutputNoPage';
  /** An array of topics that match the specified search criteria */
  items?: Maybe<Array<Maybe<Topic>>>;
  /** The number of topics returned */
  total_count?: Maybe<Scalars['Int']['output']>;
};

export type TotalSegmentsOutput = {
  __typename?: 'TotalSegmentsOutput';
  code?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
};

export type TypeTolernace = {
  __typename?: 'TypeTolernace';
  enable?: Maybe<Scalars['Boolean']['output']>;
  word_length?: Maybe<Scalars['Int']['output']>;
};

export type TypeseSenseSystemConfig = {
  __typename?: 'TypeseSenseSystemConfig';
  additional_configuration?: Maybe<AdditionalConfig>;
  autocomplete_menu?: Maybe<AutoCompleteSection>;
  category_config?: Maybe<CategoryConfig>;
  general?: Maybe<GeneralConfig>;
  product_config?: Maybe<ProductConfig>;
  search_result?: Maybe<SearchConfig>;
  semantic_search?: Maybe<SemanticSearch>;
  typo_tolernace?: Maybe<TypeTolernace>;
};

export type TypesenseConfig = {
  __typename?: 'TypesenseConfig';
  enable_category?: Maybe<Scalars['Boolean']['output']>;
  enable_frontend?: Maybe<Scalars['String']['output']>;
  enable_suggestions?: Maybe<Scalars['Boolean']['output']>;
  highlights?: Maybe<Scalars['String']['output']>;
  index_prefix?: Maybe<Scalars['String']['output']>;
  nb_of_categories_suggestions?: Maybe<Scalars['Int']['output']>;
  nb_of_products_suggestions?: Maybe<Scalars['Int']['output']>;
  nb_of_suggestions_count?: Maybe<Scalars['Int']['output']>;
  nearest_node?: Maybe<Scalars['String']['output']>;
  node?: Maybe<Scalars['String']['output']>;
  port?: Maybe<Scalars['String']['output']>;
  protocol?: Maybe<Scalars['String']['output']>;
  search_key?: Maybe<Scalars['String']['output']>;
};

/** Modifies the specified items in the cart. */
export type UpdateCartItemsInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String']['input'];
  /** An array of items to be updated. */
  cart_items: Array<InputMaybe<CartItemUpdateInput>>;
};

/** Contains details about the cart after updating items. */
export type UpdateCartItemsOutput = {
  __typename?: 'UpdateCartItemsOutput';
  /** The cart after updating products. */
  cart: Cart;
};

/** Contains the customer's wish list and any errors encountered. */
export type UpdateProductsInWishlistOutput = {
  __typename?: 'UpdateProductsInWishlistOutput';
  /** An array of errors encountered while updating products in a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully updated. */
  wishlist: Wishlist;
};

/** Contains URL rewrite details. */
export type UrlRewrite = {
  __typename?: 'UrlRewrite';
  /** An array of request parameters. */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>;
  /** The request URL. */
  url?: Maybe<Scalars['String']['output']>;
};

/** This enumeration defines the entity type. */
export enum UrlRewriteEntityTypeEnum {
  Category = 'CATEGORY',
  CmsPage = 'CMS_PAGE',
  Product = 'PRODUCT'
}

/** Defines whether the attribute is filterable in layered navigation. */
export enum UseInLayeredNavigationOptions {
  FilterableNoResult = 'FILTERABLE_NO_RESULT',
  FilterableWithResults = 'FILTERABLE_WITH_RESULTS',
  No = 'NO'
}

/** Defines a customer attribute validation rule. */
export type ValidationRule = {
  __typename?: 'ValidationRule';
  /** Validation rule name applied to a customer attribute. */
  name?: Maybe<ValidationRuleEnum>;
  /** Validation rule value. */
  value?: Maybe<Scalars['String']['output']>;
};

/** List of validation rule names applied to a customer attribute. */
export enum ValidationRuleEnum {
  DateRangeMax = 'DATE_RANGE_MAX',
  DateRangeMin = 'DATE_RANGE_MIN',
  FileExtensions = 'FILE_EXTENSIONS',
  InputValidation = 'INPUT_VALIDATION',
  MaxFileSize = 'MAX_FILE_SIZE',
  MaxImageHeight = 'MAX_IMAGE_HEIGHT',
  MaxImageWidth = 'MAX_IMAGE_WIDTH',
  MaxTextLength = 'MAX_TEXT_LENGTH',
  MinTextLength = 'MIN_TEXT_LENGTH'
}

/** Retrieves the vault configuration */
export type VaultConfigOutput = {
  __typename?: 'VaultConfigOutput';
  /** Credit card vault method configuration */
  credit_card?: Maybe<VaultCreditCardConfig>;
};

export type VaultCreditCardConfig = {
  __typename?: 'VaultCreditCardConfig';
  /** Is vault enabled */
  is_vault_enabled?: Maybe<Scalars['Boolean']['output']>;
  /** The parameters required to load the Paypal JS SDK */
  sdk_params?: Maybe<Array<Maybe<SdkParams>>>;
  /** 3DS mode */
  three_ds_mode?: Maybe<ThreeDsMode>;
};

/** Vault payment inputs */
export type VaultMethodInput = {
  /** The payment source for the payment method */
  payment_source?: InputMaybe<Scalars['String']['input']>;
  /** The payment services order ID */
  payments_order_id?: InputMaybe<Scalars['String']['input']>;
  /** PayPal order ID */
  paypal_order_id?: InputMaybe<Scalars['String']['input']>;
  /** The public hash of the token. */
  public_hash?: InputMaybe<Scalars['String']['input']>;
};

/** The payment source information */
export type VaultSetupTokenInput = {
  /** The payment source information */
  payment_source: PaymentSourceInput;
};

/** Contains required input for payment methods with Vault support. */
export type VaultTokenInput = {
  /** The public hash of the payment token. */
  public_hash: Scalars['String']['input'];
};

export type ViewAllProducts = {
  __typename?: 'ViewAllProducts';
  /** A bucket that contains the attribute code and label for each filterable option. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>;
  /** comment for page_info. */
  page_info?: Maybe<SearchResultPageInfo>;
  products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']['output']>;
};


export type ViewAllProductsAggregationsArgs = {
  filter?: InputMaybe<AggregationsFilterInput>;
};

/** An implementation for virtual product cart items. */
export type VirtualCartItem = CartItemInterface & {
  __typename?: 'VirtualCartItem';
  /** An array containing customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String']['output'];
  /** True if requested quantity is less than available stock, false otherwise. */
  is_available: Scalars['Boolean']['output'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float']['output'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID']['output'];
};

/** Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProduct = CustomizableProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'VirtualProduct';
  /** The additional attributes */
  additional_info?: Maybe<Array<Maybe<AdditionalInfo>>>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use the `custom_attributes` field instead. */
  brand?: Maybe<Scalars['Int']['output']>;
  /** Product Custom Attribute Show */
  brand_info?: Maybe<BrandInfo>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']['output']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  color?: Maybe<Scalars['Int']['output']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']['output']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']['output']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Product custom attributes. */
  custom_attributesV2?: Maybe<ProductCustomAttributes>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** @deprecated Use the `custom_attributes` field instead. */
  individual_shipping?: Maybe<Scalars['Int']['output']>;
  /**
   * A number representing the product's manufacturer.
   * @deprecated Use the `custom_attributes` field instead.
   */
  manufacturer?: Maybe<Scalars['Int']['output']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']['output']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']['output']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']['output']>;
  /** Mageplaza labels applied on the product */
  mp_label_data?: Maybe<Array<Maybe<LabelRules>>>;
  /** Reward earning */
  mp_reward?: Maybe<RewardEarning>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']['output']>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']['output']>;
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']['output']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']['output']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']['output']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** Product inventory */
  product_inventory?: Maybe<ProductInventory>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** Product video */
  product_videos?: Maybe<Array<Maybe<ProductVideo>>>;
  /** @deprecated Use the `custom_attributes` field instead. */
  qr_code_attributes?: Maybe<Scalars['String']['output']>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']['output'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int']['output'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']['output']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']['output'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** @deprecated Use the `custom_attributes` field instead. */
  size?: Maybe<Scalars['Int']['output']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']['output']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']['output']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']['output']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']['output']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']['output']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']['output']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']['output'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']['output']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']['output']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** To Check Wishlist Product  */
  wishlistData?: Maybe<WishlistData>;
};


/** Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProductCustom_AttributesV2Args = {
  filters?: InputMaybe<AttributeFilterInput>;
};


/** Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Defines a single product to add to the cart. */
export type VirtualProductCartItemInput = {
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** An object containing the `sku`, `quantity`, and other relevant information about the product. */
  data: CartItemInput;
};

/** Contains a virtual product wish list item. */
export type VirtualWishlistItem = WishlistItemInterface & {
  __typename?: 'VirtualWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

/** Deprecated. It should not be used on the storefront. Contains information about a website. */
export type Website = {
  __typename?: 'Website';
  /**
   * A code assigned to the website to identify it.
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']['output']>;
  /**
   * The default group ID of the website.
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']['output']>;
  /**
   * The ID number assigned to the website.
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']['output']>;
  /**
   * Indicates whether this is the default website.
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * The attribute to use for sorting websites.
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']['output']>;
};

export type WholeSalerCustomerAccountOutput = {
  __typename?: 'WholeSalerCustomerAccountOutput';
  customer?: Maybe<Customer>;
  message?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['Boolean']['output']>;
};

/** An error encountered while performing operations with WishList. */
export type WishListUserInputError = {
  __typename?: 'WishListUserInputError';
  /** A wish list-specific error code. */
  code: WishListUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String']['output'];
};

/** A list of possible error types. */
export enum WishListUserInputErrorType {
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  Undefined = 'UNDEFINED'
}

/** Contains a customer wish list. */
export type Wishlist = {
  __typename?: 'Wishlist';
  /** The unique ID for a `Wishlist` object. */
  id?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Use the `items_v2` field instead. */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /** The number of items in the wish list. */
  items_count?: Maybe<Scalars['Int']['output']>;
  /** An array of items in the customer's wish list. */
  items_v2?: Maybe<WishlistItems>;
  /** An encrypted code that Magento uses to link to the wish list. */
  sharing_code?: Maybe<Scalars['String']['output']>;
  /** The time of the last modification to the wish list. */
  updated_at?: Maybe<Scalars['String']['output']>;
};


/** Contains a customer wish list. */
export type WishlistItems_V2Args = {
  currentPage?: InputMaybe<Scalars['Int']['input']>;
  pageSize?: InputMaybe<Scalars['Int']['input']>;
};

/** Contains details about errors encountered when a customer added wish list items to the cart. */
export type WishlistCartUserInputError = {
  __typename?: 'WishlistCartUserInputError';
  /** An error code that describes the error encountered. */
  code: WishlistCartUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String']['output'];
  /** The unique ID of the `Wishlist` object containing an error. */
  wishlistId: Scalars['ID']['output'];
  /** The unique ID of the wish list item containing an error. */
  wishlistItemId: Scalars['ID']['output'];
};

/** A list of possible error types. */
export enum WishlistCartUserInputErrorType {
  InsufficientStock = 'INSUFFICIENT_STOCK',
  NotSalable = 'NOT_SALABLE',
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  Undefined = 'UNDEFINED'
}

export type WishlistData = {
  __typename?: 'WishlistData';
  wishlistItem?: Maybe<Scalars['Int']['output']>;
};

/** Contains details about a wish list item. */
export type WishlistItem = {
  __typename?: 'WishlistItem';
  /** The time when the customer added the item to the wish list. */
  added_at?: Maybe<Scalars['String']['output']>;
  /** The customer's comment about this item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItem` object. */
  id?: Maybe<Scalars['Int']['output']>;
  /** Details about the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']['output']>;
};

/** Defines the items to add to a wish list. */
export type WishlistItemInput = {
  /** An array of options that the customer entered. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For complex product types, the SKU of the parent product. */
  parent_sku?: InputMaybe<Scalars['String']['input']>;
  /** The amount or number of items to add. */
  quantity: Scalars['Float']['input'];
  /** An array of strings corresponding to options the customer selected. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** The SKU of the product to add. For complex product types, specify the child product SKU. */
  sku: Scalars['String']['input'];
};

/** The interface for wish list items. */
export type WishlistItemInterface = {
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String']['output'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID']['output'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float']['output'];
};

/** Defines updates to items in a wish list. */
export type WishlistItemUpdateInput = {
  /** Customer-entered comments about the item. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** An array of options that the customer entered. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** The new amount or number of this item. */
  quantity?: InputMaybe<Scalars['Float']['input']>;
  /** An array of strings corresponding to options the customer selected. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** The unique ID for a `WishlistItemInterface` object. */
  wishlist_item_id: Scalars['ID']['input'];
};

/** Contains an array of items in a wish list. */
export type WishlistItems = {
  __typename?: 'WishlistItems';
  /** A list of items in the wish list. */
  items: Array<Maybe<WishlistItemInterface>>;
  /** Contains pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
};

/** Deprecated: Use the `Wishlist` type instead. */
export type WishlistOutput = {
  __typename?: 'WishlistOutput';
  /**
   * An array of items in the customer's wish list
   * @deprecated Use the `Wishlist.items` field instead.
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /**
   * The number of items in the wish list.
   * @deprecated Use the `Wishlist.items_count` field instead.
   */
  items_count?: Maybe<Scalars['Int']['output']>;
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist.
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source.
   */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * An encrypted code that links to the wish list.
   * @deprecated Use the `Wishlist.sharing_code` field instead.
   */
  sharing_code?: Maybe<Scalars['String']['output']>;
  /**
   * The time of the last modification to the wish list.
   * @deprecated Use the `Wishlist.updated_at` field instead.
   */
  updated_at?: Maybe<Scalars['String']['output']>;
};

/** Assigns a specific `cart_id` to the empty cart. */
export type CreateEmptyCartInput = {
  /** The ID to assign to the cart. */
  cart_id?: InputMaybe<Scalars['String']['input']>;
};

export type DisplayConfig = {
  __typename?: 'displayConfig';
  /** Display earning points on Minicart */
  mini_cart?: Maybe<Scalars['Boolean']['output']>;
  /** Display total points on Top Links */
  top_page?: Maybe<Scalars['Boolean']['output']>;
};

export type EarningConfig = {
  __typename?: 'earningConfig';
  /** Earn points from tax */
  earn_from_tax?: Maybe<Scalars['Boolean']['output']>;
  /** Earn points from shipping fee */
  earn_shipping?: Maybe<Scalars['Boolean']['output']>;
  /** Point refund */
  point_refund?: Maybe<Scalars['Boolean']['output']>;
  /** Round method */
  round_method?: Maybe<Scalars['String']['output']>;
  /** Sales earn configs */
  sales_earn?: Maybe<SaleEarnConfigs>;
};

// export type GeneralConfig = {
//   __typename?: 'generalConfig';
//   /** Label in My Account Navigation */
//   account_navigation_label?: Maybe<Scalars['String']['output']>;
//   /** Display point label */
//   display_point_label?: Maybe<Scalars['String']['output']>;
//   /** Enabled */
//   enabled?: Maybe<Scalars['Boolean']['output']>;
//   /** Reward Points Icon */
//   icon?: Maybe<Scalars['String']['output']>;
//   /** Maximum available points balance */
//   maximum_point?: Maybe<Scalars['Int']['output']>;
//   /** Plural point label */
//   plural_point_label?: Maybe<Scalars['String']['output']>;
//   /** Point label */
//   point_label?: Maybe<Scalars['String']['output']>;
//   /** Show Point Icon */
//   show_point_icon?: Maybe<Scalars['Boolean']['output']>;
//   /** Zero amount label */
//   zero_amount?: Maybe<Scalars['String']['output']>;
// };

export type SpendingConfig = {
  __typename?: 'spendingConfig';
  /** Discount label */
  discount_label?: Maybe<Scalars['String']['output']>;
  /** Maximum spending points per order */
  maximum_point_per_order?: Maybe<Scalars['Int']['output']>;
  /** Minimum balance to spend points */
  minimum_balance?: Maybe<Scalars['Int']['output']>;
  /** Restore spent points after order refunding */
  restore_point_after_refund?: Maybe<Scalars['Boolean']['output']>;
  /** Spending points on shipping fee */
  spend_on_ship?: Maybe<Scalars['Boolean']['output']>;
  /** Spending points on tax */
  spend_on_tax?: Maybe<Scalars['Boolean']['output']>;
  /** Use max points by default */
  use_max_point?: Maybe<Scalars['Boolean']['output']>;
};

export type SubscribeInput = {
  /** Is expire */
  isExpire: Scalars['Boolean']['input'];
  /** Is update */
  isUpdate: Scalars['Boolean']['input'];
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  AggregationOptionInterface: ( AggregationOption );
  AttributeSelectedOptionInterface: ( AttributeSelectedOption );
  AttributeValueInterface: ( Omit<AttributeSelectedOptions, 'selected_options'> & { selected_options: Array<Maybe<_RefType['AttributeSelectedOptionInterface']>> } ) | ( AttributeValue );
  Block: ( BannerBlock ) | ( CategoryBlock ) | ( ContentBlock ) | ( Omit<CustomBlock, 'products'> & { products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( FeaturedBrandsBlock ) | ( PopUp ) | ( Omit<ProductBlock, 'products'> & { products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( SliderBlock ) | ( TaggedImageBlock ) | ( TestimonialBlock );
  BlockData: ( BannerBlock ) | ( CategoryBlock ) | ( ContentBlock ) | ( Omit<CustomBlock, 'products'> & { products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( FeaturedBrandsBlock ) | ( PopUp ) | ( Omit<ProductBlock, 'products'> & { products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( SliderBlock ) | ( TaggedImageBlock ) | ( TestimonialBlock );
  CartAddressInterface: ( BillingCartAddress ) | ( Omit<ShippingCartAddress, 'available_shipping_methods' | 'cart_items_v2'> & { available_shipping_methods?: Maybe<Array<Maybe<_RefType['AvailableShippingMethod']>>>, cart_items_v2?: Maybe<Array<Maybe<_RefType['CartItemInterface']>>> } );
  CartItemInterface: ( Omit<BundleCartItem, 'prices' | 'product'> & { prices?: Maybe<_RefType['CartItemPrices']>, product: _RefType['ProductInterface'] } ) | ( Omit<ConfigurableCartItem, 'configured_variant' | 'prices' | 'product'> & { configured_variant: _RefType['ProductInterface'], prices?: Maybe<_RefType['CartItemPrices']>, product: _RefType['ProductInterface'] } ) | ( Omit<DownloadableCartItem, 'prices' | 'product'> & { prices?: Maybe<_RefType['CartItemPrices']>, product: _RefType['ProductInterface'] } ) | ( Omit<SimpleCartItem, 'prices' | 'product'> & { prices?: Maybe<_RefType['CartItemPrices']>, product: _RefType['ProductInterface'] } ) | ( Omit<VirtualCartItem, 'prices' | 'product'> & { prices?: Maybe<_RefType['CartItemPrices']>, product: _RefType['ProductInterface'] } );
  CategoryInterface: ( Omit<CategoryTree, 'breadcrumbs' | 'children' | 'products'> & { breadcrumbs?: Maybe<Array<Maybe<_RefType['Breadcrumb']>>>, children?: Maybe<Array<Maybe<_RefType['CategoryTree']>>>, products?: Maybe<_RefType['CategoryProducts']> } );
  CreditMemoItemInterface: ( Omit<BundleCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } ) | ( Omit<CreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } ) | ( Omit<DownloadableCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } );
  CustomAttributeMetadataInterface: ( Omit<AttributeMetadata, 'options'> & { options: Array<Maybe<_RefType['CustomAttributeOptionInterface']>> } ) | ( Omit<CatalogAttributeMetadata, 'options'> & { options: Array<Maybe<_RefType['CustomAttributeOptionInterface']>> } ) | ( Omit<CustomerAttributeMetadata, 'options'> & { options: Array<Maybe<_RefType['CustomAttributeOptionInterface']>> } );
  CustomAttributeOptionInterface: ( AttributeOptionMetadata );
  CustomizableOptionInterface: ( CustomizableAreaOption ) | ( CustomizableCheckboxOption ) | ( CustomizableDateOption ) | ( CustomizableDropDownOption ) | ( CustomizableFieldOption ) | ( CustomizableFileOption ) | ( CustomizableMultipleOption ) | ( CustomizableRadioOption );
  CustomizableProductInterface: ( Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<_RefType['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<_RefType['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, variants?: Maybe<Array<Maybe<_RefType['ConfigurableVariant']>>> } ) | ( Omit<DownloadableProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<VirtualProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } );
  ErrorInterface: ( InternalError ) | ( NoSuchEntityUidError );
  InvoiceItemInterface: ( Omit<BundleInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } ) | ( Omit<DownloadableInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } ) | ( Omit<InvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, order_item?: Maybe<_RefType['OrderItemInterface']> } );
  LayerFilterItemInterface: ( LayerFilterItem ) | ( SwatchLayerFilterItem );
  MediaGalleryInterface: ( ProductImage ) | ( ProductVideo );
  OrderItemInterface: ( Omit<BundleOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<DownloadableOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<OrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<_RefType['Discount']>>>, product?: Maybe<_RefType['ProductInterface']> } );
  PaymentConfigItem: ( ApplePayConfig ) | ( GooglePayConfig ) | ( HostedFieldsConfig ) | ( PaymentCommonConfig ) | ( SmartButtonsConfig );
  PhysicalProductInterface: ( Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<_RefType['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<_RefType['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, variants?: Maybe<Array<Maybe<_RefType['ConfigurableVariant']>>> } ) | ( Omit<GroupedProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['GroupedProductItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } );
  ProductInterface: ( Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<_RefType['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<_RefType['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, variants?: Maybe<Array<Maybe<_RefType['ConfigurableVariant']>>> } ) | ( Omit<DownloadableProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<GroupedProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['GroupedProductItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<VirtualProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } );
  ProductLinksInterface: ( ProductLinks );
  RoutableInterface: ( Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<CategoryTree, 'breadcrumbs' | 'children' | 'products'> & { breadcrumbs?: Maybe<Array<Maybe<_RefType['Breadcrumb']>>>, children?: Maybe<Array<Maybe<_RefType['CategoryTree']>>>, products?: Maybe<_RefType['CategoryProducts']> } ) | ( CmsPage ) | ( Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<_RefType['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<_RefType['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, variants?: Maybe<Array<Maybe<_RefType['ConfigurableVariant']>>> } ) | ( Omit<DownloadableProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<GroupedProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<_RefType['GroupedProductItem']>>>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( RoutableUrl ) | ( Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } ) | ( Omit<VirtualProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<_RefType['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, custom_attributesV2?: Maybe<_RefType['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<_RefType['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<_RefType['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<_RefType['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>>, reviews: _RefType['ProductReviews'], upsell_products?: Maybe<Array<Maybe<_RefType['ProductInterface']>>> } );
  ShipmentItemInterface: ( Omit<BundleShipmentItem, 'order_item'> & { order_item?: Maybe<_RefType['OrderItemInterface']> } ) | ( Omit<ShipmentItem, 'order_item'> & { order_item?: Maybe<_RefType['OrderItemInterface']> } );
  SwatchDataInterface: ( ColorSwatchData ) | ( ImageSwatchData ) | ( TextSwatchData );
  SwatchLayerFilterItemInterface: ( SwatchLayerFilterItem );
  WishlistItemInterface: ( Omit<BundleWishlistItem, 'product'> & { product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<ConfigurableWishlistItem, 'configured_variant' | 'product'> & { configured_variant?: Maybe<_RefType['ProductInterface']>, product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<DownloadableWishlistItem, 'product'> & { product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<GroupedProductWishlistItem, 'product'> & { product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<SimpleWishlistItem, 'product'> & { product?: Maybe<_RefType['ProductInterface']> } ) | ( Omit<VirtualWishlistItem, 'product'> & { product?: Maybe<_RefType['ProductInterface']> } );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AboutUsOutput: ResolverTypeWrapper<AboutUsOutput>;
  AddAdvCommentInput: AddAdvCommentInput;
  AddAdvCommentOutput: ResolverTypeWrapper<AddAdvCommentOutput>;
  AddAdvProductReviewInput: AddAdvProductReviewInput;
  AddAdvProductReviewOutput: ResolverTypeWrapper<AddAdvProductReviewOutput>;
  AddAdvReviewInput: AddAdvReviewInput;
  AddAdvReviewOutput: ResolverTypeWrapper<AddAdvReviewOutput>;
  AddAdvVoteInput: AddAdvVoteInput;
  AddAdvVoteOutput: ResolverTypeWrapper<AddAdvVoteOutput>;
  AddBundleProductsToCartInput: AddBundleProductsToCartInput;
  AddBundleProductsToCartOutput: ResolverTypeWrapper<Omit<AddBundleProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
  AddConfigurableProductsToCartOutput: ResolverTypeWrapper<Omit<AddConfigurableProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
  AddDownloadableProductsToCartOutput: ResolverTypeWrapper<Omit<AddDownloadableProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddProductsToCartOutput: ResolverTypeWrapper<Omit<AddProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddProductsToCompareListInput: AddProductsToCompareListInput;
  AddProductsToWishlistOutput: ResolverTypeWrapper<Omit<AddProductsToWishlistOutput, 'wishlist'> & { wishlist: ResolversTypes['Wishlist'] }>;
  AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
  AddSimpleProductsToCartOutput: ResolverTypeWrapper<Omit<AddSimpleProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
  AddVirtualProductsToCartOutput: ResolverTypeWrapper<Omit<AddVirtualProductsToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AddWishlistItemsToCartOutput: ResolverTypeWrapper<Omit<AddWishlistItemsToCartOutput, 'wishlist'> & { wishlist: ResolversTypes['Wishlist'] }>;
  AdditionalConfig: ResolverTypeWrapper<AdditionalConfig>;
  AdditionalInfo: ResolverTypeWrapper<AdditionalInfo>;
  Address: ResolverTypeWrapper<Address>;
  AddressInformationInput: AddressInformationInput;
  Aggregation: ResolverTypeWrapper<Aggregation>;
  AggregationOption: ResolverTypeWrapper<AggregationOption>;
  AggregationOptionInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['AggregationOptionInterface']>;
  AggregationsCategoryFilterInput: AggregationsCategoryFilterInput;
  AggregationsFilterInput: AggregationsFilterInput;
  AmReviewSetting: ResolverTypeWrapper<AmReviewSetting>;
  AmReviewWidget: ResolverTypeWrapper<AmReviewWidget>;
  AmReviewWidgetItem: ResolverTypeWrapper<AmReviewWidgetItem>;
  ApplePayConfig: ResolverTypeWrapper<ApplePayConfig>;
  ApplePayMethodInput: ApplePayMethodInput;
  AppliedCoupon: ResolverTypeWrapper<AppliedCoupon>;
  ApplyCouponToCartInput: ApplyCouponToCartInput;
  ApplyCouponToCartOutput: ResolverTypeWrapper<Omit<ApplyCouponToCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  AreaInput: AreaInput;
  AssignCompareListToCustomerOutput: ResolverTypeWrapper<Omit<AssignCompareListToCustomerOutput, 'compare_list'> & { compare_list?: Maybe<ResolversTypes['CompareList']> }>;
  Attribute: ResolverTypeWrapper<Attribute>;
  AttributeEntityTypeEnum: AttributeEntityTypeEnum;
  AttributeFilterInput: AttributeFilterInput;
  AttributeFrontendInputEnum: AttributeFrontendInputEnum;
  AttributeInput: AttributeInput;
  AttributeInputSelectedOption: AttributeInputSelectedOption;
  AttributeMetadata: ResolverTypeWrapper<Omit<AttributeMetadata, 'options'> & { options: Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>> }>;
  AttributeMetadataError: ResolverTypeWrapper<AttributeMetadataError>;
  AttributeMetadataErrorType: AttributeMetadataErrorType;
  AttributeOption: ResolverTypeWrapper<AttributeOption>;
  AttributeOptionMetadata: ResolverTypeWrapper<AttributeOptionMetadata>;
  AttributeSelectedOption: ResolverTypeWrapper<AttributeSelectedOption>;
  AttributeSelectedOptionInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['AttributeSelectedOptionInterface']>;
  AttributeSelectedOptions: ResolverTypeWrapper<Omit<AttributeSelectedOptions, 'selected_options'> & { selected_options: Array<Maybe<ResolversTypes['AttributeSelectedOptionInterface']>> }>;
  AttributeValue: ResolverTypeWrapper<AttributeValue>;
  AttributeValueInput: AttributeValueInput;
  AttributeValueInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['AttributeValueInterface']>;
  AttributesFormOutput: ResolverTypeWrapper<Omit<AttributesFormOutput, 'items'> & { items: Array<Maybe<ResolversTypes['CustomAttributeMetadataInterface']>> }>;
  AttributesMetadataOutput: ResolverTypeWrapper<Omit<AttributesMetadataOutput, 'items'> & { items: Array<Maybe<ResolversTypes['CustomAttributeMetadataInterface']>> }>;
  AutoCompleteSection: ResolverTypeWrapper<AutoCompleteSection>;
  AvailablePaymentMethod: ResolverTypeWrapper<AvailablePaymentMethod>;
  AvailableShippingMethod: ResolverTypeWrapper<AvailableShippingMethod>;
  BannerBlock: ResolverTypeWrapper<BannerBlock>;
  BannerItems: ResolverTypeWrapper<BannerItems>;
  BatchMutationStatus: BatchMutationStatus;
  BestsellersProductOutput: ResolverTypeWrapper<BestsellersProductOutput>;
  Billing: ResolverTypeWrapper<Billing>;
  BillingAddressInput: BillingAddressInput;
  BillingAddressPaymentSourceInput: BillingAddressPaymentSourceInput;
  BillingCartAddress: ResolverTypeWrapper<BillingCartAddress>;
  Block: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Block']>;
  BlockData: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['BlockData']>;
  BlockFilterInput: BlockFilterInput;
  Blocks: ResolverTypeWrapper<Omit<Blocks, 'data'> & { data?: Maybe<Array<Maybe<ResolversTypes['Block']>>> }>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  BraintreeCcVaultInput: BraintreeCcVaultInput;
  BraintreeInput: BraintreeInput;
  BraintreeVaultInput: BraintreeVaultInput;
  BrandData: ResolverTypeWrapper<BrandData>;
  BrandInfo: ResolverTypeWrapper<BrandInfo>;
  Breadcrumb: ResolverTypeWrapper<Breadcrumb>;
  BulkOrderOutput: ResolverTypeWrapper<BulkOrderOutput>;
  BundleCartItem: ResolverTypeWrapper<Omit<BundleCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversTypes['CartItemPrices']>, product: ResolversTypes['ProductInterface'] }>;
  BundleCreditMemoItem: ResolverTypeWrapper<Omit<BundleCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  BundleInvoiceItem: ResolverTypeWrapper<Omit<BundleInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  BundleItem: ResolverTypeWrapper<Omit<BundleItem, 'options'> & { options?: Maybe<Array<Maybe<ResolversTypes['BundleItemOption']>>> }>;
  BundleItemOption: ResolverTypeWrapper<Omit<BundleItemOption, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  BundleOptionInput: BundleOptionInput;
  BundleOrderItem: ResolverTypeWrapper<Omit<BundleOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, product?: Maybe<ResolversTypes['ProductInterface']> }>;
  BundleProduct: ResolverTypeWrapper<Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<ResolversTypes['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  BundleProductCartItemInput: BundleProductCartItemInput;
  BundleShipmentItem: ResolverTypeWrapper<Omit<BundleShipmentItem, 'order_item'> & { order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  BundleWishlistItem: ResolverTypeWrapper<Omit<BundleWishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  ButtonStyles: ResolverTypeWrapper<ButtonStyles>;
  CancelOrderInput: CancelOrderInput;
  CancelOrderOutput: ResolverTypeWrapper<Omit<CancelOrderOutput, 'order'> & { order?: Maybe<ResolversTypes['CustomerOrder']> }>;
  CancellationReason: ResolverTypeWrapper<CancellationReason>;
  Card: ResolverTypeWrapper<Card>;
  CardBin: ResolverTypeWrapper<CardBin>;
  CardPaymentSourceInput: CardPaymentSourceInput;
  CardPaymentSourceOutput: ResolverTypeWrapper<CardPaymentSourceOutput>;
  Cart: ResolverTypeWrapper<Omit<Cart, 'applied_coupon' | 'applied_coupons' | 'items' | 'itemsV2' | 'prices' | 'shipping_addresses'> & { applied_coupon?: Maybe<ResolversTypes['AppliedCoupon']>, applied_coupons?: Maybe<Array<Maybe<ResolversTypes['AppliedCoupon']>>>, items?: Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, itemsV2?: Maybe<ResolversTypes['CartItems']>, prices?: Maybe<ResolversTypes['CartPrices']>, shipping_addresses: Array<Maybe<ResolversTypes['ShippingCartAddress']>> }>;
  CartAddressCountry: ResolverTypeWrapper<CartAddressCountry>;
  CartAddressInput: CartAddressInput;
  CartAddressInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CartAddressInterface']>;
  CartAddressRegion: ResolverTypeWrapper<CartAddressRegion>;
  CartDiscount: ResolverTypeWrapper<CartDiscount>;
  CartDiscountType: CartDiscountType;
  CartItemError: ResolverTypeWrapper<CartItemError>;
  CartItemErrorType: CartItemErrorType;
  CartItemInput: CartItemInput;
  CartItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CartItemInterface']>;
  CartItemPrices: ResolverTypeWrapper<Omit<CartItemPrices, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>> }>;
  CartItemQuantity: ResolverTypeWrapper<CartItemQuantity>;
  CartItemSelectedOptionValuePrice: ResolverTypeWrapper<CartItemSelectedOptionValuePrice>;
  CartItemUpdateInput: CartItemUpdateInput;
  CartItems: ResolverTypeWrapper<Omit<CartItems, 'items'> & { items: Array<Maybe<ResolversTypes['CartItemInterface']>> }>;
  CartPrices: ResolverTypeWrapper<Omit<CartPrices, 'discount' | 'discounts'> & { discount?: Maybe<ResolversTypes['CartDiscount']>, discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>> }>;
  CartTaxItem: ResolverTypeWrapper<CartTaxItem>;
  CartUserInputError: ResolverTypeWrapper<CartUserInputError>;
  CartUserInputErrorType: CartUserInputErrorType;
  CatalogAttributeApplyToEnum: CatalogAttributeApplyToEnum;
  CatalogAttributeMetadata: ResolverTypeWrapper<Omit<CatalogAttributeMetadata, 'options'> & { options: Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>> }>;
  CategoriesFilterInput: CategoriesFilterInput;
  CategoriesOutput: ResolverTypeWrapper<CategoriesOutput>;
  CategoriesOutputNoPage: ResolverTypeWrapper<CategoriesOutputNoPage>;
  Category: ResolverTypeWrapper<Category>;
  CategoryBlock: ResolverTypeWrapper<CategoryBlock>;
  CategoryConfig: ResolverTypeWrapper<CategoryConfig>;
  CategoryFilterInput: CategoryFilterInput;
  CategoryInfo: ResolverTypeWrapper<CategoryInfo>;
  CategoryInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CategoryInterface']>;
  CategoryProducts: ResolverTypeWrapper<Omit<CategoryProducts, 'items'> & { items?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  CategoryResult: ResolverTypeWrapper<Omit<CategoryResult, 'items'> & { items?: Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>> }>;
  CategoryTree: ResolverTypeWrapper<Omit<CategoryTree, 'breadcrumbs' | 'children' | 'products'> & { breadcrumbs?: Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, children?: Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, products?: Maybe<ResolversTypes['CategoryProducts']> }>;
  CheckoutAgreement: ResolverTypeWrapper<CheckoutAgreement>;
  CheckoutAgreementMode: CheckoutAgreementMode;
  CheckoutUserInputError: ResolverTypeWrapper<CheckoutUserInputError>;
  CheckoutUserInputErrorCodes: CheckoutUserInputErrorCodes;
  CmsBlock: ResolverTypeWrapper<CmsBlock>;
  CmsBlocks: ResolverTypeWrapper<CmsBlocks>;
  CmsPage: ResolverTypeWrapper<CmsPage>;
  Collections: ResolverTypeWrapper<Collections>;
  ColorSwatchData: ResolverTypeWrapper<ColorSwatchData>;
  Comment: ResolverTypeWrapper<Comment>;
  CommentsFilterInput: CommentsFilterInput;
  CommentsOutput: ResolverTypeWrapper<CommentsOutput>;
  ComparableAttribute: ResolverTypeWrapper<ComparableAttribute>;
  ComparableItem: ResolverTypeWrapper<Omit<ComparableItem, 'attributes' | 'product'> & { attributes: Array<Maybe<ResolversTypes['ProductAttribute']>>, product: ResolversTypes['ProductInterface'] }>;
  CompareList: ResolverTypeWrapper<Omit<CompareList, 'attributes' | 'items'> & { attributes?: Maybe<Array<Maybe<ResolversTypes['ComparableAttribute']>>>, items?: Maybe<Array<Maybe<ResolversTypes['ComparableItem']>>> }>;
  ComplexTextValue: ResolverTypeWrapper<ComplexTextValue>;
  ConfigsOutput: ResolverTypeWrapper<ConfigsOutput>;
  ConfigurableAttributeOption: ResolverTypeWrapper<ConfigurableAttributeOption>;
  ConfigurableCartItem: ResolverTypeWrapper<Omit<ConfigurableCartItem, 'configured_variant' | 'prices' | 'product'> & { configured_variant: ResolversTypes['ProductInterface'], prices?: Maybe<ResolversTypes['CartItemPrices']>, product: ResolversTypes['ProductInterface'] }>;
  ConfigurableOptionAvailableForSelection: ResolverTypeWrapper<ConfigurableOptionAvailableForSelection>;
  ConfigurableProduct: ResolverTypeWrapper<Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<ResolversTypes['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, variants?: Maybe<Array<Maybe<ResolversTypes['ConfigurableVariant']>>> }>;
  ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
  ConfigurableProductOption: ResolverTypeWrapper<Omit<ConfigurableProductOption, 'values'> & { values?: Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionValue']>>> }>;
  ConfigurableProductOptionValue: ResolverTypeWrapper<Omit<ConfigurableProductOptionValue, 'swatch'> & { swatch?: Maybe<ResolversTypes['SwatchDataInterface']> }>;
  ConfigurableProductOptions: ResolverTypeWrapper<Omit<ConfigurableProductOptions, 'values'> & { values?: Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionsValues']>>> }>;
  ConfigurableProductOptionsSelection: ResolverTypeWrapper<Omit<ConfigurableProductOptionsSelection, 'configurable_options' | 'media_gallery' | 'variant'> & { configurable_options?: Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOption']>>>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, variant?: Maybe<ResolversTypes['SimpleProduct']> }>;
  ConfigurableProductOptionsValues: ResolverTypeWrapper<Omit<ConfigurableProductOptionsValues, 'swatch_data'> & { swatch_data?: Maybe<ResolversTypes['SwatchDataInterface']> }>;
  ConfigurableVariant: ResolverTypeWrapper<Omit<ConfigurableVariant, 'attributes' | 'product'> & { attributes?: Maybe<Array<Maybe<ResolversTypes['ConfigurableAttributeOption']>>>, product?: Maybe<ResolversTypes['SimpleProduct']> }>;
  ConfigurableWishlistItem: ResolverTypeWrapper<Omit<ConfigurableWishlistItem, 'configured_variant' | 'product'> & { configured_variant?: Maybe<ResolversTypes['ProductInterface']>, product?: Maybe<ResolversTypes['ProductInterface']> }>;
  ConfirmAccountOutput: ResolverTypeWrapper<Omit<ConfirmAccountOutput, 'customer'> & { customer?: Maybe<ResolversTypes['Customer']> }>;
  ConfirmEmailInput: ConfirmEmailInput;
  ConfirmationStatusEnum: ConfirmationStatusEnum;
  ContactUsInput: ContactUsInput;
  ContactUsOutput: ResolverTypeWrapper<ContactUsOutput>;
  ContentBlock: ResolverTypeWrapper<ContentBlock>;
  Country: ResolverTypeWrapper<Country>;
  CountryCodeEnum: CountryCodeEnum;
  CouponsCollection: ResolverTypeWrapper<CouponsCollection>;
  CouponsList: ResolverTypeWrapper<CouponsList>;
  CreateCompareListInput: CreateCompareListInput;
  CreateGuestCartInput: CreateGuestCartInput;
  CreateGuestCartOutput: ResolverTypeWrapper<Omit<CreateGuestCartOutput, 'cart'> & { cart?: Maybe<ResolversTypes['Cart']> }>;
  CreatePayflowProTokenOutput: ResolverTypeWrapper<CreatePayflowProTokenOutput>;
  CreatePaymentOrderInput: CreatePaymentOrderInput;
  CreatePaymentOrderOutput: ResolverTypeWrapper<CreatePaymentOrderOutput>;
  CreateProductReviewInput: CreateProductReviewInput;
  CreateProductReviewOutput: ResolverTypeWrapper<Omit<CreateProductReviewOutput, 'review'> & { review: ResolversTypes['ProductReview'] }>;
  CreateVaultCardPaymentTokenInput: CreateVaultCardPaymentTokenInput;
  CreateVaultCardPaymentTokenOutput: ResolverTypeWrapper<CreateVaultCardPaymentTokenOutput>;
  CreateVaultCardSetupTokenInput: CreateVaultCardSetupTokenInput;
  CreateVaultCardSetupTokenOutput: ResolverTypeWrapper<CreateVaultCardSetupTokenOutput>;
  CreditCardDetailsInput: CreditCardDetailsInput;
  CreditMemo: ResolverTypeWrapper<Omit<CreditMemo, 'items' | 'total'> & { items?: Maybe<Array<Maybe<ResolversTypes['CreditMemoItemInterface']>>>, total?: Maybe<ResolversTypes['CreditMemoTotal']> }>;
  CreditMemoItem: ResolverTypeWrapper<Omit<CreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  CreditMemoItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CreditMemoItemInterface']>;
  CreditMemoTotal: ResolverTypeWrapper<Omit<CreditMemoTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>> }>;
  Currency: ResolverTypeWrapper<Currency>;
  CurrencyEnum: CurrencyEnum;
  Custom: ResolverTypeWrapper<Custom>;
  CustomAttributeMetadata: ResolverTypeWrapper<CustomAttributeMetadata>;
  CustomAttributeMetadataInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CustomAttributeMetadataInterface']>;
  CustomAttributeOptionInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CustomAttributeOptionInterface']>;
  CustomBlock: ResolverTypeWrapper<Omit<CustomBlock, 'products'> & { products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  Customer: ResolverTypeWrapper<Omit<Customer, 'addresses' | 'compare_list' | 'custom_attributes' | 'orders' | 'reviews' | 'wishlist' | 'wishlist_v2' | 'wishlists'> & { addresses?: Maybe<Array<Maybe<ResolversTypes['CustomerAddress']>>>, compare_list?: Maybe<ResolversTypes['CompareList']>, custom_attributes?: Maybe<Array<Maybe<ResolversTypes['AttributeValueInterface']>>>, orders?: Maybe<ResolversTypes['CustomerOrders']>, reviews: ResolversTypes['ProductReviews'], wishlist: ResolversTypes['Wishlist'], wishlist_v2?: Maybe<ResolversTypes['Wishlist']>, wishlists: Array<Maybe<ResolversTypes['Wishlist']>> }>;
  CustomerAddress: ResolverTypeWrapper<Omit<CustomerAddress, 'custom_attributes' | 'custom_attributesV2' | 'extension_attributes'> & { custom_attributes?: Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, custom_attributesV2: Array<Maybe<ResolversTypes['AttributeValueInterface']>>, extension_attributes?: Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>> }>;
  CustomerAddressAttribute: ResolverTypeWrapper<CustomerAddressAttribute>;
  CustomerAddressAttributeInput: CustomerAddressAttributeInput;
  CustomerAddressInput: CustomerAddressInput;
  CustomerAddressRegion: ResolverTypeWrapper<CustomerAddressRegion>;
  CustomerAddressRegionInput: CustomerAddressRegionInput;
  CustomerAttributeMetadata: ResolverTypeWrapper<Omit<CustomerAttributeMetadata, 'options'> & { options: Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>> }>;
  CustomerCreateInput: CustomerCreateInput;
  CustomerDownloadableProduct: ResolverTypeWrapper<CustomerDownloadableProduct>;
  CustomerDownloadableProducts: ResolverTypeWrapper<CustomerDownloadableProducts>;
  CustomerFeedbackInput: CustomerFeedbackInput;
  CustomerFeedbackOutput: ResolverTypeWrapper<CustomerFeedbackOutput>;
  CustomerInput: CustomerInput;
  CustomerOrder: ResolverTypeWrapper<Omit<CustomerOrder, 'applied_coupons' | 'credit_memos' | 'invoices' | 'items' | 'shipments' | 'total'> & { applied_coupons: Array<Maybe<ResolversTypes['AppliedCoupon']>>, credit_memos?: Maybe<Array<Maybe<ResolversTypes['CreditMemo']>>>, invoices: Array<Maybe<ResolversTypes['Invoice']>>, items?: Maybe<Array<Maybe<ResolversTypes['OrderItemInterface']>>>, shipments?: Maybe<Array<Maybe<ResolversTypes['OrderShipment']>>>, total?: Maybe<ResolversTypes['OrderTotal']> }>;
  CustomerOrderSortInput: CustomerOrderSortInput;
  CustomerOrderSortableField: CustomerOrderSortableField;
  CustomerOrders: ResolverTypeWrapper<Omit<CustomerOrders, 'items'> & { items: Array<Maybe<ResolversTypes['CustomerOrder']>> }>;
  CustomerOrdersFilterInput: CustomerOrdersFilterInput;
  CustomerOutput: ResolverTypeWrapper<Omit<CustomerOutput, 'customer'> & { customer: ResolversTypes['Customer'] }>;
  CustomerPaymentTokens: ResolverTypeWrapper<CustomerPaymentTokens>;
  CustomerToken: ResolverTypeWrapper<CustomerToken>;
  CustomerUpdateInput: CustomerUpdateInput;
  CustomizableAreaOption: ResolverTypeWrapper<CustomizableAreaOption>;
  CustomizableAreaValue: ResolverTypeWrapper<CustomizableAreaValue>;
  CustomizableCheckboxOption: ResolverTypeWrapper<CustomizableCheckboxOption>;
  CustomizableCheckboxValue: ResolverTypeWrapper<CustomizableCheckboxValue>;
  CustomizableDateOption: ResolverTypeWrapper<CustomizableDateOption>;
  CustomizableDateTypeEnum: CustomizableDateTypeEnum;
  CustomizableDateValue: ResolverTypeWrapper<CustomizableDateValue>;
  CustomizableDropDownOption: ResolverTypeWrapper<CustomizableDropDownOption>;
  CustomizableDropDownValue: ResolverTypeWrapper<CustomizableDropDownValue>;
  CustomizableFieldOption: ResolverTypeWrapper<CustomizableFieldOption>;
  CustomizableFieldValue: ResolverTypeWrapper<CustomizableFieldValue>;
  CustomizableFileOption: ResolverTypeWrapper<CustomizableFileOption>;
  CustomizableFileValue: ResolverTypeWrapper<CustomizableFileValue>;
  CustomizableMultipleOption: ResolverTypeWrapper<CustomizableMultipleOption>;
  CustomizableMultipleValue: ResolverTypeWrapper<CustomizableMultipleValue>;
  CustomizableOptionInput: CustomizableOptionInput;
  CustomizableOptionInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CustomizableOptionInterface']>;
  CustomizableProductInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['CustomizableProductInterface']>;
  CustomizableRadioOption: ResolverTypeWrapper<CustomizableRadioOption>;
  CustomizableRadioValue: ResolverTypeWrapper<CustomizableRadioValue>;
  DeleteCompareListOutput: ResolverTypeWrapper<DeleteCompareListOutput>;
  DeletePaymentTokenOutput: ResolverTypeWrapper<DeletePaymentTokenOutput>;
  DetailedSummary: ResolverTypeWrapper<DetailedSummary>;
  Discount: ResolverTypeWrapper<Omit<Discount, 'coupon'> & { coupon?: Maybe<ResolversTypes['AppliedCoupon']> }>;
  DownloadableCartItem: ResolverTypeWrapper<Omit<DownloadableCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversTypes['CartItemPrices']>, product: ResolversTypes['ProductInterface'] }>;
  DownloadableCreditMemoItem: ResolverTypeWrapper<Omit<DownloadableCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  DownloadableFileTypeEnum: DownloadableFileTypeEnum;
  DownloadableInvoiceItem: ResolverTypeWrapper<Omit<DownloadableInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  DownloadableItemsLinks: ResolverTypeWrapper<DownloadableItemsLinks>;
  DownloadableOrderItem: ResolverTypeWrapper<Omit<DownloadableOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, product?: Maybe<ResolversTypes['ProductInterface']> }>;
  DownloadableProduct: ResolverTypeWrapper<Omit<DownloadableProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  DownloadableProductCartItemInput: DownloadableProductCartItemInput;
  DownloadableProductLinks: ResolverTypeWrapper<DownloadableProductLinks>;
  DownloadableProductLinksInput: DownloadableProductLinksInput;
  DownloadableProductSamples: ResolverTypeWrapper<DownloadableProductSamples>;
  DownloadableWishlistItem: ResolverTypeWrapper<Omit<DownloadableWishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  Emirates: ResolverTypeWrapper<Emirates>;
  EnteredOptionInput: EnteredOptionInput;
  EntityUrl: ResolverTypeWrapper<EntityUrl>;
  ErrorInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ErrorInterface']>;
  EstimateAddressInput: EstimateAddressInput;
  EstimateTotalsInput: EstimateTotalsInput;
  EstimateTotalsOutput: ResolverTypeWrapper<Omit<EstimateTotalsOutput, 'cart'> & { cart?: Maybe<ResolversTypes['Cart']> }>;
  ExchangeRate: ResolverTypeWrapper<ExchangeRate>;
  ExcludedPages: ResolverTypeWrapper<ExcludedPages>;
  FacetData: ResolverTypeWrapper<FacetData>;
  FacetValues: ResolverTypeWrapper<FacetValues>;
  FeaturedBrandsBlock: ResolverTypeWrapper<FeaturedBrandsBlock>;
  FilterEqualTypeInput: FilterEqualTypeInput;
  FilterMatchTypeEnum: FilterMatchTypeEnum;
  FilterMatchTypeInput: FilterMatchTypeInput;
  FilterRangeTypeInput: FilterRangeTypeInput;
  FilterStringTypeInput: FilterStringTypeInput;
  FilterTypeInput: FilterTypeInput;
  FixedProductTax: ResolverTypeWrapper<FixedProductTax>;
  FixedProductTaxDisplaySettings: FixedProductTaxDisplaySettings;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  FooterMenu: ResolverTypeWrapper<FooterMenu>;
  GTMCodeOutput: ResolverTypeWrapper<GtmCodeOutput>;
  GTMHeadOutput: ResolverTypeWrapper<GtmHeadOutput>;
  General: ResolverTypeWrapper<General>;
  GeneralConfig: ResolverTypeWrapper<GeneralConfig>;
  GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
  GenerateCustomerTokenAsAdminOutput: ResolverTypeWrapper<GenerateCustomerTokenAsAdminOutput>;
  GetLatLong: GetLatLong;
  GetPaymentSDKOutput: ResolverTypeWrapper<GetPaymentSdkOutput>;
  GiftMessage: ResolverTypeWrapper<GiftMessage>;
  GiftMessageInput: GiftMessageInput;
  GooglePayButtonStyles: ResolverTypeWrapper<GooglePayButtonStyles>;
  GooglePayConfig: ResolverTypeWrapper<GooglePayConfig>;
  GooglePayMethodInput: GooglePayMethodInput;
  GroupedProduct: ResolverTypeWrapper<Omit<GroupedProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<ResolversTypes['GroupedProductItem']>>>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  GroupedProductItem: ResolverTypeWrapper<Omit<GroupedProductItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  GroupedProductWishlistItem: ResolverTypeWrapper<Omit<GroupedProductWishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  HeaderMenu: ResolverTypeWrapper<HeaderMenu>;
  HomePage: ResolverTypeWrapper<Omit<HomePage, 'blocks'> & { blocks?: Maybe<ResolversTypes['Blocks']> }>;
  HostedFieldsConfig: ResolverTypeWrapper<HostedFieldsConfig>;
  HostedFieldsInput: HostedFieldsInput;
  HostedProInput: HostedProInput;
  HostedProUrl: ResolverTypeWrapper<HostedProUrl>;
  HostedProUrlInput: HostedProUrlInput;
  HotRequestOutput: ResolverTypeWrapper<HotRequestOutput>;
  HttpQueryParameter: ResolverTypeWrapper<HttpQueryParameter>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Icon: ResolverTypeWrapper<Icon>;
  Id: Id;
  ImageSwatchData: ResolverTypeWrapper<ImageSwatchData>;
  Images: ResolverTypeWrapper<Images>;
  InputFilterEnum: InputFilterEnum;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  InternalError: ResolverTypeWrapper<InternalError>;
  Invoice: ResolverTypeWrapper<Omit<Invoice, 'items' | 'total'> & { items?: Maybe<Array<Maybe<ResolversTypes['InvoiceItemInterface']>>>, total?: Maybe<ResolversTypes['InvoiceTotal']> }>;
  InvoiceItem: ResolverTypeWrapper<Omit<InvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  InvoiceItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['InvoiceItemInterface']>;
  InvoiceTotal: ResolverTypeWrapper<Omit<InvoiceTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>> }>;
  IsEmailAvailableOutput: ResolverTypeWrapper<IsEmailAvailableOutput>;
  ItemSelectedBundleOption: ResolverTypeWrapper<ItemSelectedBundleOption>;
  ItemSelectedBundleOptionValue: ResolverTypeWrapper<ItemSelectedBundleOptionValue>;
  Items: ResolverTypeWrapper<Items>;
  KeyValue: ResolverTypeWrapper<KeyValue>;
  LabelRules: ResolverTypeWrapper<LabelRules>;
  LabelRulesFilterInput: LabelRulesFilterInput;
  LabelRulesOutput: ResolverTypeWrapper<LabelRulesOutput>;
  LatLng: ResolverTypeWrapper<LatLng>;
  LayerFilter: ResolverTypeWrapper<Omit<LayerFilter, 'filter_items'> & { filter_items?: Maybe<Array<Maybe<ResolversTypes['LayerFilterItemInterface']>>> }>;
  LayerFilterItem: ResolverTypeWrapper<LayerFilterItem>;
  LayerFilterItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['LayerFilterItemInterface']>;
  LikesOutput: ResolverTypeWrapper<LikesOutput>;
  LinkItems: ResolverTypeWrapper<LinkItems>;
  MapArea: ResolverTypeWrapper<MapArea>;
  MapPinAddress: ResolverTypeWrapper<MapPinAddress>;
  MappedImage: ResolverTypeWrapper<MappedImage>;
  MediaGalleryEntry: ResolverTypeWrapper<MediaGalleryEntry>;
  MediaGalleryInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['MediaGalleryInterface']>;
  Megamenu: ResolverTypeWrapper<Megamenu>;
  Menu: ResolverTypeWrapper<Menu>;
  MenuLink: ResolverTypeWrapper<MenuLink>;
  MessageStyleLogo: ResolverTypeWrapper<MessageStyleLogo>;
  MessageStyles: ResolverTypeWrapper<MessageStyles>;
  MobileCreateCustomerAccountOutput: ResolverTypeWrapper<Omit<MobileCreateCustomerAccountOutput, 'customer'> & { customer: ResolversTypes['Customer'] }>;
  Money: ResolverTypeWrapper<Money>;
  MonthlyArchive: ResolverTypeWrapper<MonthlyArchive>;
  MonthlyArchiveOutput: ResolverTypeWrapper<MonthlyArchiveOutput>;
  MpFilters: MpFilters;
  MpGTMCodeFilters: MpGtmCodeFilters;
  MpGTMHeadFilters: MpGtmHeadFilters;
  MpRewardCustomersOutput: ResolverTypeWrapper<MpRewardCustomersOutput>;
  MpRewardInvitations: ResolverTypeWrapper<MpRewardInvitations>;
  MpRewardInvitationsFilterInput: MpRewardInvitationsFilterInput;
  MpRewardInvitationsOutput: ResolverTypeWrapper<MpRewardInvitationsOutput>;
  MpRewardPointsOutput: ResolverTypeWrapper<MpRewardPointsOutput>;
  MpRewardRateOutput: ResolverTypeWrapper<MpRewardRateOutput>;
  MpRewardTransactionsFilterInput: MpRewardTransactionsFilterInput;
  MpRewardTransactionsListOutput: ResolverTypeWrapper<MpRewardTransactionsListOutput>;
  MpRewardTransactionsOutput: ResolverTypeWrapper<MpRewardTransactionsOutput>;
  Mutation: ResolverTypeWrapper<{}>;
  NoSuchEntityUidError: ResolverTypeWrapper<NoSuchEntityUidError>;
  Order: ResolverTypeWrapper<Order>;
  OrderAddress: ResolverTypeWrapper<OrderAddress>;
  OrderInformationInput: OrderInformationInput;
  OrderItem: ResolverTypeWrapper<Omit<OrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>>, product?: Maybe<ResolversTypes['ProductInterface']> }>;
  OrderItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['OrderItemInterface']>;
  OrderItemOption: ResolverTypeWrapper<OrderItemOption>;
  OrderNoteOutput: ResolverTypeWrapper<OrderNoteOutput>;
  OrderNotesInput: OrderNotesInput;
  OrderPaymentMethod: ResolverTypeWrapper<OrderPaymentMethod>;
  OrderRecord: ResolverTypeWrapper<OrderRecord>;
  OrderShipment: ResolverTypeWrapper<Omit<OrderShipment, 'items'> & { items?: Maybe<Array<Maybe<ResolversTypes['ShipmentItemInterface']>>> }>;
  OrderTokenInput: OrderTokenInput;
  OrderTotal: ResolverTypeWrapper<Omit<OrderTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversTypes['Discount']>>> }>;
  OtpRequestInput: OtpRequestInput;
  OtpRequestOutput: ResolverTypeWrapper<OtpRequestOutput>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PayflowExpressInput: PayflowExpressInput;
  PayflowLinkInput: PayflowLinkInput;
  PayflowLinkMode: PayflowLinkMode;
  PayflowLinkToken: ResolverTypeWrapper<PayflowLinkToken>;
  PayflowLinkTokenInput: PayflowLinkTokenInput;
  PayflowProInput: PayflowProInput;
  PayflowProResponseInput: PayflowProResponseInput;
  PayflowProResponseOutput: ResolverTypeWrapper<Omit<PayflowProResponseOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  PayflowProToken: ResolverTypeWrapper<PayflowProToken>;
  PayflowProTokenInput: PayflowProTokenInput;
  PayflowProUrlInput: PayflowProUrlInput;
  PaymentCommonConfig: ResolverTypeWrapper<PaymentCommonConfig>;
  PaymentConfigItem: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['PaymentConfigItem']>;
  PaymentConfigOutput: ResolverTypeWrapper<PaymentConfigOutput>;
  PaymentLocation: PaymentLocation;
  PaymentMethodInput: PaymentMethodInput;
  PaymentOrderOutput: ResolverTypeWrapper<PaymentOrderOutput>;
  PaymentSDKParamsItem: ResolverTypeWrapper<PaymentSdkParamsItem>;
  PaymentSourceDetails: ResolverTypeWrapper<PaymentSourceDetails>;
  PaymentSourceInput: PaymentSourceInput;
  PaymentSourceOutput: ResolverTypeWrapper<PaymentSourceOutput>;
  PaymentToken: ResolverTypeWrapper<PaymentToken>;
  PaymentTokenTypeEnum: PaymentTokenTypeEnum;
  PaypalExpressInput: PaypalExpressInput;
  PaypalExpressToken: ResolverTypeWrapper<PaypalExpressToken>;
  PaypalExpressTokenInput: PaypalExpressTokenInput;
  PaypalExpressTokenOutput: ResolverTypeWrapper<PaypalExpressTokenOutput>;
  PaypalExpressUrlList: ResolverTypeWrapper<PaypalExpressUrlList>;
  PaypalExpressUrlsInput: PaypalExpressUrlsInput;
  PhysicalProductInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['PhysicalProductInterface']>;
  PickupLocation: ResolverTypeWrapper<PickupLocation>;
  PickupLocationFilterInput: PickupLocationFilterInput;
  PickupLocationSortInput: PickupLocationSortInput;
  PickupLocations: ResolverTypeWrapper<PickupLocations>;
  PlaceOrderError: ResolverTypeWrapper<PlaceOrderError>;
  PlaceOrderErrorCodes: PlaceOrderErrorCodes;
  PlaceOrderInput: PlaceOrderInput;
  PlaceOrderOutput: ResolverTypeWrapper<Omit<PlaceOrderOutput, 'orderV2'> & { orderV2?: Maybe<ResolversTypes['CustomerOrder']> }>;
  PopUp: ResolverTypeWrapper<PopUp>;
  Post: ResolverTypeWrapper<Post>;
  PostsFilterInput: PostsFilterInput;
  PostsOutput: ResolverTypeWrapper<PostsOutput>;
  PostsOutputNoPage: ResolverTypeWrapper<PostsOutputNoPage>;
  Price: ResolverTypeWrapper<Price>;
  PriceAdjustment: ResolverTypeWrapper<PriceAdjustment>;
  PriceAdjustmentCodesEnum: PriceAdjustmentCodesEnum;
  PriceAdjustmentDescriptionEnum: PriceAdjustmentDescriptionEnum;
  PriceDetails: ResolverTypeWrapper<PriceDetails>;
  PriceRange: ResolverTypeWrapper<PriceRange>;
  PriceTypeEnum: PriceTypeEnum;
  PriceViewEnum: PriceViewEnum;
  Product: ResolverTypeWrapper<Product>;
  ProductAlertUnsubscribeOutput: ResolverTypeWrapper<ProductAlertUnsubscribeOutput>;
  ProductAttribute: ResolverTypeWrapper<ProductAttribute>;
  ProductAttributeFilterInput: ProductAttributeFilterInput;
  ProductAttributeSortInput: ProductAttributeSortInput;
  ProductBlock: ResolverTypeWrapper<Omit<ProductBlock, 'products'> & { products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  ProductConfig: ResolverTypeWrapper<ProductConfig>;
  ProductCustomAttributes: ResolverTypeWrapper<Omit<ProductCustomAttributes, 'items'> & { items: Array<Maybe<ResolversTypes['AttributeValueInterface']>> }>;
  ProductDiscount: ResolverTypeWrapper<ProductDiscount>;
  ProductFilterInput: ProductFilterInput;
  ProductImage: ResolverTypeWrapper<ProductImage>;
  ProductInfoInput: ProductInfoInput;
  ProductInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ProductInterface']>;
  ProductInventory: ResolverTypeWrapper<ProductInventory>;
  ProductItems: ResolverTypeWrapper<ProductItems>;
  ProductLinks: ResolverTypeWrapper<ProductLinks>;
  ProductLinksInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ProductLinksInterface']>;
  ProductMediaGalleryEntriesContent: ResolverTypeWrapper<ProductMediaGalleryEntriesContent>;
  ProductMediaGalleryEntriesVideoContent: ResolverTypeWrapper<ProductMediaGalleryEntriesVideoContent>;
  ProductPrice: ResolverTypeWrapper<ProductPrice>;
  ProductPrices: ResolverTypeWrapper<ProductPrices>;
  ProductReview: ResolverTypeWrapper<Omit<ProductReview, 'product'> & { product: ResolversTypes['ProductInterface'] }>;
  ProductReviewRating: ResolverTypeWrapper<ProductReviewRating>;
  ProductReviewRatingInput: ProductReviewRatingInput;
  ProductReviewRatingMetadata: ResolverTypeWrapper<ProductReviewRatingMetadata>;
  ProductReviewRatingValueMetadata: ResolverTypeWrapper<ProductReviewRatingValueMetadata>;
  ProductReviewRatingsMetadata: ResolverTypeWrapper<ProductReviewRatingsMetadata>;
  ProductReviews: ResolverTypeWrapper<Omit<ProductReviews, 'items'> & { items: Array<Maybe<ResolversTypes['ProductReview']>> }>;
  ProductSortInput: ProductSortInput;
  ProductStockStatus: ProductStockStatus;
  ProductTierPrices: ResolverTypeWrapper<ProductTierPrices>;
  ProductVideo: ResolverTypeWrapper<ProductVideo>;
  ProductViewReportOutput: ResolverTypeWrapper<ProductViewReportOutput>;
  Products: ResolverTypeWrapper<Omit<Products, 'filters' | 'items'> & { filters?: Maybe<Array<Maybe<ResolversTypes['LayerFilter']>>>, items?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  ProductsFilterInput: ProductsFilterInput;
  ProductsOutput: ResolverTypeWrapper<ProductsOutput>;
  ProductsOutputNoPage: ResolverTypeWrapper<ProductsOutputNoPage>;
  ProofData: ProofData;
  Query: ResolverTypeWrapper<{}>;
  QuoteItemsSortInput: QuoteItemsSortInput;
  Rating: ResolverTypeWrapper<Rating>;
  RatingOption: ResolverTypeWrapper<RatingOption>;
  RatingVote: ResolverTypeWrapper<RatingVote>;
  ReCaptchaConfigurationV3: ResolverTypeWrapper<ReCaptchaConfigurationV3>;
  ReCaptchaFormEnum: ReCaptchaFormEnum;
  RecentViewProducts: ResolverTypeWrapper<Omit<RecentViewProducts, 'items'> & { items?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  Region: ResolverTypeWrapper<Region>;
  RemoveCouponFromCartInput: RemoveCouponFromCartInput;
  RemoveCouponFromCartOutput: ResolverTypeWrapper<Omit<RemoveCouponFromCartOutput, 'cart'> & { cart?: Maybe<ResolversTypes['Cart']> }>;
  RemoveItemFromCartInput: RemoveItemFromCartInput;
  RemoveItemFromCartOutput: ResolverTypeWrapper<Omit<RemoveItemFromCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
  RemoveProductsFromWishlistOutput: ResolverTypeWrapper<Omit<RemoveProductsFromWishlistOutput, 'wishlist'> & { wishlist: ResolversTypes['Wishlist'] }>;
  ReorderItemsOutput: ResolverTypeWrapper<Omit<ReorderItemsOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  Response: ResolverTypeWrapper<Response>;
  ResultPage: ResolverTypeWrapper<ResultPage>;
  Review: ResolverTypeWrapper<Review>;
  ReviewData: ReviewData;
  ReviewFilter: ResolverTypeWrapper<ReviewFilter>;
  ReviewOrder: ResolverTypeWrapper<ReviewOrder>;
  ReviewSource: ResolverTypeWrapper<ReviewSource>;
  ReviewsData: ResolverTypeWrapper<ReviewsData>;
  RevokeCustomerTokenOutput: ResolverTypeWrapper<RevokeCustomerTokenOutput>;
  RewardCartAddressInput: RewardCartAddressInput;
  RewardConfig: ResolverTypeWrapper<RewardConfig>;
  RewardEarning: ResolverTypeWrapper<RewardEarning>;
  RewardExchangeRate: ResolverTypeWrapper<RewardExchangeRate>;
  RewardShippingMethodInput: RewardShippingMethodInput;
  RoutableInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['RoutableInterface']>;
  RoutableUrl: ResolverTypeWrapper<RoutableUrl>;
  SDKParams: ResolverTypeWrapper<SdkParams>;
  SaleEarnConfigs: ResolverTypeWrapper<SaleEarnConfigs>;
  SalesCommentItem: ResolverTypeWrapper<SalesCommentItem>;
  SalesItemInterface: ResolverTypeWrapper<SalesItemInterface>;
  SalesOrder: ResolverTypeWrapper<SalesOrder>;
  SalesOrderCollection: ResolverTypeWrapper<SalesOrderCollection>;
  ScopeTypeEnum: ScopeTypeEnum;
  SearchAttributes: ResolverTypeWrapper<SearchAttributes>;
  SearchConfig: ResolverTypeWrapper<SearchConfig>;
  SearchFilterInput: SearchFilterInput;
  SearchFilters: ResolverTypeWrapper<SearchFilters>;
  SearchResultPageInfo: ResolverTypeWrapper<SearchResultPageInfo>;
  SearchSortOrderInput: SearchSortOrderInput;
  SearchSuggestion: ResolverTypeWrapper<SearchSuggestion>;
  SelectedBundleOption: ResolverTypeWrapper<SelectedBundleOption>;
  SelectedBundleOptionValue: ResolverTypeWrapper<SelectedBundleOptionValue>;
  SelectedConfigurableOption: ResolverTypeWrapper<SelectedConfigurableOption>;
  SelectedCustomizableOption: ResolverTypeWrapper<SelectedCustomizableOption>;
  SelectedCustomizableOptionValue: ResolverTypeWrapper<SelectedCustomizableOptionValue>;
  SelectedPaymentMethod: ResolverTypeWrapper<SelectedPaymentMethod>;
  SelectedShippingMethod: ResolverTypeWrapper<SelectedShippingMethod>;
  SemanticSearch: ResolverTypeWrapper<SemanticSearch>;
  SendEmailToFriendInput: SendEmailToFriendInput;
  SendEmailToFriendOutput: ResolverTypeWrapper<SendEmailToFriendOutput>;
  SendEmailToFriendRecipient: ResolverTypeWrapper<SendEmailToFriendRecipient>;
  SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
  SendEmailToFriendSender: ResolverTypeWrapper<SendEmailToFriendSender>;
  SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
  SendFriendConfiguration: ResolverTypeWrapper<SendFriendConfiguration>;
  Seo: ResolverTypeWrapper<Seo>;
  SeoDetails: ResolverTypeWrapper<SeoDetails>;
  SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
  SetBillingAddressOnCartOutput: ResolverTypeWrapper<Omit<SetBillingAddressOnCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
  SetGuestEmailOnCartOutput: ResolverTypeWrapper<Omit<SetGuestEmailOnCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
  SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
  SetPaymentMethodOnCartOutput: ResolverTypeWrapper<Omit<SetPaymentMethodOnCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
  SetShippingAddressesOnCartOutput: ResolverTypeWrapper<Omit<SetShippingAddressesOnCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
  SetShippingMethodsOnCartOutput: ResolverTypeWrapper<Omit<SetShippingMethodsOnCartOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  ShipBundleItemsEnum: ShipBundleItemsEnum;
  ShipmentItem: ResolverTypeWrapper<Omit<ShipmentItem, 'order_item'> & { order_item?: Maybe<ResolversTypes['OrderItemInterface']> }>;
  ShipmentItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ShipmentItemInterface']>;
  ShipmentTracking: ResolverTypeWrapper<ShipmentTracking>;
  Shipping: ResolverTypeWrapper<Shipping>;
  ShippingAddressInput: ShippingAddressInput;
  ShippingCartAddress: ResolverTypeWrapper<Omit<ShippingCartAddress, 'available_shipping_methods' | 'cart_items_v2'> & { available_shipping_methods?: Maybe<Array<Maybe<ResolversTypes['AvailableShippingMethod']>>>, cart_items_v2?: Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>> }>;
  ShippingDiscount: ResolverTypeWrapper<ShippingDiscount>;
  ShippingHandling: ResolverTypeWrapper<ShippingHandling>;
  ShippingMethodInput: ShippingMethodInput;
  Sidebar: ResolverTypeWrapper<Sidebar>;
  SimpleCartItem: ResolverTypeWrapper<Omit<SimpleCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversTypes['CartItemPrices']>, product: ResolversTypes['ProductInterface'] }>;
  SimpleProduct: ResolverTypeWrapper<Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  SimpleProductCartItemInput: SimpleProductCartItemInput;
  SimpleWishlistItem: ResolverTypeWrapper<Omit<SimpleWishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  Slider: ResolverTypeWrapper<Slider>;
  SliderBlock: ResolverTypeWrapper<SliderBlock>;
  SmartButtonMethodInput: SmartButtonMethodInput;
  SmartButtonsConfig: ResolverTypeWrapper<SmartButtonsConfig>;
  SmtpBestsellersOutput: ResolverTypeWrapper<SmtpBestsellersOutput>;
  SortEnum: SortEnum;
  SortEnumData: SortEnumData;
  SortField: ResolverTypeWrapper<SortField>;
  SortFields: ResolverTypeWrapper<SortFields>;
  SortOption: ResolverTypeWrapper<SortOption>;
  SortQuoteItemsEnum: SortQuoteItemsEnum;
  SpendingConfiguration: ResolverTypeWrapper<SpendingConfiguration>;
  SpendingRules: ResolverTypeWrapper<SpendingRules>;
  StoreConfig: ResolverTypeWrapper<StoreConfig>;
  StoreLocation: ResolverTypeWrapper<StoreLocation>;
  StorefrontProperties: ResolverTypeWrapper<StorefrontProperties>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  SubscribeEmailToNewsletterOutput: ResolverTypeWrapper<SubscribeEmailToNewsletterOutput>;
  SubscriptionStatusesEnum: SubscriptionStatusesEnum;
  SwatchData: ResolverTypeWrapper<SwatchData>;
  SwatchDataInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['SwatchDataInterface']>;
  SwatchInputTypeEnum: SwatchInputTypeEnum;
  SwatchLayerFilterItem: ResolverTypeWrapper<SwatchLayerFilterItem>;
  SwatchLayerFilterItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['SwatchLayerFilterItemInterface']>;
  SyncPaymentOrderInput: SyncPaymentOrderInput;
  Tag: ResolverTypeWrapper<Tag>;
  TaggedImageBlock: ResolverTypeWrapper<TaggedImageBlock>;
  TagsFilterInput: TagsFilterInput;
  TagsOutput: ResolverTypeWrapper<TagsOutput>;
  TagsOutputNoPage: ResolverTypeWrapper<TagsOutputNoPage>;
  TaxItem: ResolverTypeWrapper<TaxItem>;
  TaxWrappingEnum: TaxWrappingEnum;
  Testimonial: ResolverTypeWrapper<Testimonial>;
  TestimonialBlock: ResolverTypeWrapper<TestimonialBlock>;
  TextSwatchData: ResolverTypeWrapper<TextSwatchData>;
  ThreeDSMode: ThreeDsMode;
  TierPrice: ResolverTypeWrapper<TierPrice>;
  Topic: ResolverTypeWrapper<Topic>;
  TopicsFilterInput: TopicsFilterInput;
  TopicsOutput: ResolverTypeWrapper<TopicsOutput>;
  TopicsOutputNoPage: ResolverTypeWrapper<TopicsOutputNoPage>;
  TotalSegmentsOutput: ResolverTypeWrapper<TotalSegmentsOutput>;
  TypeTolernace: ResolverTypeWrapper<TypeTolernace>;
  TypeseSenseSystemConfig: ResolverTypeWrapper<TypeseSenseSystemConfig>;
  TypesenseConfig: ResolverTypeWrapper<TypesenseConfig>;
  UpdateCartItemsInput: UpdateCartItemsInput;
  UpdateCartItemsOutput: ResolverTypeWrapper<Omit<UpdateCartItemsOutput, 'cart'> & { cart: ResolversTypes['Cart'] }>;
  UpdateProductsInWishlistOutput: ResolverTypeWrapper<Omit<UpdateProductsInWishlistOutput, 'wishlist'> & { wishlist: ResolversTypes['Wishlist'] }>;
  UrlRewrite: ResolverTypeWrapper<UrlRewrite>;
  UrlRewriteEntityTypeEnum: UrlRewriteEntityTypeEnum;
  UseInLayeredNavigationOptions: UseInLayeredNavigationOptions;
  ValidationRule: ResolverTypeWrapper<ValidationRule>;
  ValidationRuleEnum: ValidationRuleEnum;
  VaultConfigOutput: ResolverTypeWrapper<VaultConfigOutput>;
  VaultCreditCardConfig: ResolverTypeWrapper<VaultCreditCardConfig>;
  VaultMethodInput: VaultMethodInput;
  VaultSetupTokenInput: VaultSetupTokenInput;
  VaultTokenInput: VaultTokenInput;
  ViewAllProducts: ResolverTypeWrapper<Omit<ViewAllProducts, 'products'> & { products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  VirtualCartItem: ResolverTypeWrapper<Omit<VirtualCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversTypes['CartItemPrices']>, product: ResolversTypes['ProductInterface'] }>;
  VirtualProduct: ResolverTypeWrapper<Omit<VirtualProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, reviews: ResolversTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>> }>;
  VirtualProductCartItemInput: VirtualProductCartItemInput;
  VirtualWishlistItem: ResolverTypeWrapper<Omit<VirtualWishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  Website: ResolverTypeWrapper<Website>;
  WholeSalerCustomerAccountOutput: ResolverTypeWrapper<Omit<WholeSalerCustomerAccountOutput, 'customer'> & { customer?: Maybe<ResolversTypes['Customer']> }>;
  WishListUserInputError: ResolverTypeWrapper<WishListUserInputError>;
  WishListUserInputErrorType: WishListUserInputErrorType;
  Wishlist: ResolverTypeWrapper<Omit<Wishlist, 'items' | 'items_v2'> & { items?: Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, items_v2?: Maybe<ResolversTypes['WishlistItems']> }>;
  WishlistCartUserInputError: ResolverTypeWrapper<WishlistCartUserInputError>;
  WishlistCartUserInputErrorType: WishlistCartUserInputErrorType;
  WishlistData: ResolverTypeWrapper<WishlistData>;
  WishlistItem: ResolverTypeWrapper<Omit<WishlistItem, 'product'> & { product?: Maybe<ResolversTypes['ProductInterface']> }>;
  WishlistItemInput: WishlistItemInput;
  WishlistItemInterface: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['WishlistItemInterface']>;
  WishlistItemUpdateInput: WishlistItemUpdateInput;
  WishlistItems: ResolverTypeWrapper<Omit<WishlistItems, 'items'> & { items: Array<Maybe<ResolversTypes['WishlistItemInterface']>> }>;
  WishlistOutput: ResolverTypeWrapper<Omit<WishlistOutput, 'items'> & { items?: Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>> }>;
  createEmptyCartInput: CreateEmptyCartInput;
  displayConfig: ResolverTypeWrapper<DisplayConfig>;
  earningConfig: ResolverTypeWrapper<EarningConfig>;
  generalConfig: ResolverTypeWrapper<GeneralConfig>;
  spendingConfig: ResolverTypeWrapper<SpendingConfig>;
  subscribeInput: SubscribeInput;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AboutUsOutput: AboutUsOutput;
  AddAdvCommentInput: AddAdvCommentInput;
  AddAdvCommentOutput: AddAdvCommentOutput;
  AddAdvProductReviewInput: AddAdvProductReviewInput;
  AddAdvProductReviewOutput: AddAdvProductReviewOutput;
  AddAdvReviewInput: AddAdvReviewInput;
  AddAdvReviewOutput: AddAdvReviewOutput;
  AddAdvVoteInput: AddAdvVoteInput;
  AddAdvVoteOutput: AddAdvVoteOutput;
  AddBundleProductsToCartInput: AddBundleProductsToCartInput;
  AddBundleProductsToCartOutput: Omit<AddBundleProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
  AddConfigurableProductsToCartOutput: Omit<AddConfigurableProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
  AddDownloadableProductsToCartOutput: Omit<AddDownloadableProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddProductsToCartOutput: Omit<AddProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddProductsToCompareListInput: AddProductsToCompareListInput;
  AddProductsToWishlistOutput: Omit<AddProductsToWishlistOutput, 'wishlist'> & { wishlist: ResolversParentTypes['Wishlist'] };
  AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
  AddSimpleProductsToCartOutput: Omit<AddSimpleProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
  AddVirtualProductsToCartOutput: Omit<AddVirtualProductsToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AddWishlistItemsToCartOutput: Omit<AddWishlistItemsToCartOutput, 'wishlist'> & { wishlist: ResolversParentTypes['Wishlist'] };
  AdditionalConfig: AdditionalConfig;
  AdditionalInfo: AdditionalInfo;
  Address: Address;
  AddressInformationInput: AddressInformationInput;
  Aggregation: Aggregation;
  AggregationOption: AggregationOption;
  AggregationOptionInterface: ResolversInterfaceTypes<ResolversParentTypes>['AggregationOptionInterface'];
  AggregationsCategoryFilterInput: AggregationsCategoryFilterInput;
  AggregationsFilterInput: AggregationsFilterInput;
  AmReviewSetting: AmReviewSetting;
  AmReviewWidget: AmReviewWidget;
  AmReviewWidgetItem: AmReviewWidgetItem;
  ApplePayConfig: ApplePayConfig;
  ApplePayMethodInput: ApplePayMethodInput;
  AppliedCoupon: AppliedCoupon;
  ApplyCouponToCartInput: ApplyCouponToCartInput;
  ApplyCouponToCartOutput: Omit<ApplyCouponToCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  AreaInput: AreaInput;
  AssignCompareListToCustomerOutput: Omit<AssignCompareListToCustomerOutput, 'compare_list'> & { compare_list?: Maybe<ResolversParentTypes['CompareList']> };
  Attribute: Attribute;
  AttributeFilterInput: AttributeFilterInput;
  AttributeInput: AttributeInput;
  AttributeInputSelectedOption: AttributeInputSelectedOption;
  AttributeMetadata: Omit<AttributeMetadata, 'options'> & { options: Array<Maybe<ResolversParentTypes['CustomAttributeOptionInterface']>> };
  AttributeMetadataError: AttributeMetadataError;
  AttributeOption: AttributeOption;
  AttributeOptionMetadata: AttributeOptionMetadata;
  AttributeSelectedOption: AttributeSelectedOption;
  AttributeSelectedOptionInterface: ResolversInterfaceTypes<ResolversParentTypes>['AttributeSelectedOptionInterface'];
  AttributeSelectedOptions: Omit<AttributeSelectedOptions, 'selected_options'> & { selected_options: Array<Maybe<ResolversParentTypes['AttributeSelectedOptionInterface']>> };
  AttributeValue: AttributeValue;
  AttributeValueInput: AttributeValueInput;
  AttributeValueInterface: ResolversInterfaceTypes<ResolversParentTypes>['AttributeValueInterface'];
  AttributesFormOutput: Omit<AttributesFormOutput, 'items'> & { items: Array<Maybe<ResolversParentTypes['CustomAttributeMetadataInterface']>> };
  AttributesMetadataOutput: Omit<AttributesMetadataOutput, 'items'> & { items: Array<Maybe<ResolversParentTypes['CustomAttributeMetadataInterface']>> };
  AutoCompleteSection: AutoCompleteSection;
  AvailablePaymentMethod: AvailablePaymentMethod;
  AvailableShippingMethod: AvailableShippingMethod;
  BannerBlock: BannerBlock;
  BannerItems: BannerItems;
  BestsellersProductOutput: BestsellersProductOutput;
  Billing: Billing;
  BillingAddressInput: BillingAddressInput;
  BillingAddressPaymentSourceInput: BillingAddressPaymentSourceInput;
  BillingCartAddress: BillingCartAddress;
  Block: ResolversInterfaceTypes<ResolversParentTypes>['Block'];
  BlockData: ResolversInterfaceTypes<ResolversParentTypes>['BlockData'];
  BlockFilterInput: BlockFilterInput;
  Blocks: Omit<Blocks, 'data'> & { data?: Maybe<Array<Maybe<ResolversParentTypes['Block']>>> };
  Boolean: Scalars['Boolean']['output'];
  BraintreeCcVaultInput: BraintreeCcVaultInput;
  BraintreeInput: BraintreeInput;
  BraintreeVaultInput: BraintreeVaultInput;
  BrandData: BrandData;
  BrandInfo: BrandInfo;
  Breadcrumb: Breadcrumb;
  BulkOrderOutput: BulkOrderOutput;
  BundleCartItem: Omit<BundleCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversParentTypes['CartItemPrices']>, product: ResolversParentTypes['ProductInterface'] };
  BundleCreditMemoItem: Omit<BundleCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  BundleInvoiceItem: Omit<BundleInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  BundleItem: Omit<BundleItem, 'options'> & { options?: Maybe<Array<Maybe<ResolversParentTypes['BundleItemOption']>>> };
  BundleItemOption: Omit<BundleItemOption, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  BundleOptionInput: BundleOptionInput;
  BundleOrderItem: Omit<BundleOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, product?: Maybe<ResolversParentTypes['ProductInterface']> };
  BundleProduct: Omit<BundleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<ResolversParentTypes['BundleItem']>>>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversParentTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  BundleProductCartItemInput: BundleProductCartItemInput;
  BundleShipmentItem: Omit<BundleShipmentItem, 'order_item'> & { order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  BundleWishlistItem: Omit<BundleWishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  ButtonStyles: ButtonStyles;
  CancelOrderInput: CancelOrderInput;
  CancelOrderOutput: Omit<CancelOrderOutput, 'order'> & { order?: Maybe<ResolversParentTypes['CustomerOrder']> };
  CancellationReason: CancellationReason;
  Card: Card;
  CardBin: CardBin;
  CardPaymentSourceInput: CardPaymentSourceInput;
  CardPaymentSourceOutput: CardPaymentSourceOutput;
  Cart: Omit<Cart, 'applied_coupon' | 'applied_coupons' | 'items' | 'itemsV2' | 'prices' | 'shipping_addresses'> & { applied_coupon?: Maybe<ResolversParentTypes['AppliedCoupon']>, applied_coupons?: Maybe<Array<Maybe<ResolversParentTypes['AppliedCoupon']>>>, items?: Maybe<Array<Maybe<ResolversParentTypes['CartItemInterface']>>>, itemsV2?: Maybe<ResolversParentTypes['CartItems']>, prices?: Maybe<ResolversParentTypes['CartPrices']>, shipping_addresses: Array<Maybe<ResolversParentTypes['ShippingCartAddress']>> };
  CartAddressCountry: CartAddressCountry;
  CartAddressInput: CartAddressInput;
  CartAddressInterface: ResolversInterfaceTypes<ResolversParentTypes>['CartAddressInterface'];
  CartAddressRegion: CartAddressRegion;
  CartDiscount: CartDiscount;
  CartItemError: CartItemError;
  CartItemInput: CartItemInput;
  CartItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['CartItemInterface'];
  CartItemPrices: Omit<CartItemPrices, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>> };
  CartItemQuantity: CartItemQuantity;
  CartItemSelectedOptionValuePrice: CartItemSelectedOptionValuePrice;
  CartItemUpdateInput: CartItemUpdateInput;
  CartItems: Omit<CartItems, 'items'> & { items: Array<Maybe<ResolversParentTypes['CartItemInterface']>> };
  CartPrices: Omit<CartPrices, 'discount' | 'discounts'> & { discount?: Maybe<ResolversParentTypes['CartDiscount']>, discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>> };
  CartTaxItem: CartTaxItem;
  CartUserInputError: CartUserInputError;
  CatalogAttributeMetadata: Omit<CatalogAttributeMetadata, 'options'> & { options: Array<Maybe<ResolversParentTypes['CustomAttributeOptionInterface']>> };
  CategoriesFilterInput: CategoriesFilterInput;
  CategoriesOutput: CategoriesOutput;
  CategoriesOutputNoPage: CategoriesOutputNoPage;
  Category: Category;
  CategoryBlock: CategoryBlock;
  CategoryConfig: CategoryConfig;
  CategoryFilterInput: CategoryFilterInput;
  CategoryInfo: CategoryInfo;
  CategoryInterface: ResolversInterfaceTypes<ResolversParentTypes>['CategoryInterface'];
  CategoryProducts: Omit<CategoryProducts, 'items'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  CategoryResult: Omit<CategoryResult, 'items'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['CategoryTree']>>> };
  CategoryTree: Omit<CategoryTree, 'breadcrumbs' | 'children' | 'products'> & { breadcrumbs?: Maybe<Array<Maybe<ResolversParentTypes['Breadcrumb']>>>, children?: Maybe<Array<Maybe<ResolversParentTypes['CategoryTree']>>>, products?: Maybe<ResolversParentTypes['CategoryProducts']> };
  CheckoutAgreement: CheckoutAgreement;
  CheckoutUserInputError: CheckoutUserInputError;
  CmsBlock: CmsBlock;
  CmsBlocks: CmsBlocks;
  CmsPage: CmsPage;
  Collections: Collections;
  ColorSwatchData: ColorSwatchData;
  Comment: Comment;
  CommentsFilterInput: CommentsFilterInput;
  CommentsOutput: CommentsOutput;
  ComparableAttribute: ComparableAttribute;
  ComparableItem: Omit<ComparableItem, 'attributes' | 'product'> & { attributes: Array<Maybe<ResolversParentTypes['ProductAttribute']>>, product: ResolversParentTypes['ProductInterface'] };
  CompareList: Omit<CompareList, 'attributes' | 'items'> & { attributes?: Maybe<Array<Maybe<ResolversParentTypes['ComparableAttribute']>>>, items?: Maybe<Array<Maybe<ResolversParentTypes['ComparableItem']>>> };
  ComplexTextValue: ComplexTextValue;
  ConfigsOutput: ConfigsOutput;
  ConfigurableAttributeOption: ConfigurableAttributeOption;
  ConfigurableCartItem: Omit<ConfigurableCartItem, 'configured_variant' | 'prices' | 'product'> & { configured_variant: ResolversParentTypes['ProductInterface'], prices?: Maybe<ResolversParentTypes['CartItemPrices']>, product: ResolversParentTypes['ProductInterface'] };
  ConfigurableOptionAvailableForSelection: ConfigurableOptionAvailableForSelection;
  ConfigurableProduct: Omit<ConfigurableProduct, 'categories' | 'configurable_options' | 'configurable_product_options_selection' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products' | 'variants'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, configurable_options?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableProductOptions']>>>, configurable_product_options_selection?: Maybe<ResolversParentTypes['ConfigurableProductOptionsSelection']>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversParentTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, variants?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableVariant']>>> };
  ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
  ConfigurableProductOption: Omit<ConfigurableProductOption, 'values'> & { values?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableProductOptionValue']>>> };
  ConfigurableProductOptionValue: Omit<ConfigurableProductOptionValue, 'swatch'> & { swatch?: Maybe<ResolversParentTypes['SwatchDataInterface']> };
  ConfigurableProductOptions: Omit<ConfigurableProductOptions, 'values'> & { values?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableProductOptionsValues']>>> };
  ConfigurableProductOptionsSelection: Omit<ConfigurableProductOptionsSelection, 'configurable_options' | 'media_gallery' | 'variant'> & { configurable_options?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableProductOption']>>>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, variant?: Maybe<ResolversParentTypes['SimpleProduct']> };
  ConfigurableProductOptionsValues: Omit<ConfigurableProductOptionsValues, 'swatch_data'> & { swatch_data?: Maybe<ResolversParentTypes['SwatchDataInterface']> };
  ConfigurableVariant: Omit<ConfigurableVariant, 'attributes' | 'product'> & { attributes?: Maybe<Array<Maybe<ResolversParentTypes['ConfigurableAttributeOption']>>>, product?: Maybe<ResolversParentTypes['SimpleProduct']> };
  ConfigurableWishlistItem: Omit<ConfigurableWishlistItem, 'configured_variant' | 'product'> & { configured_variant?: Maybe<ResolversParentTypes['ProductInterface']>, product?: Maybe<ResolversParentTypes['ProductInterface']> };
  ConfirmAccountOutput: Omit<ConfirmAccountOutput, 'customer'> & { customer?: Maybe<ResolversParentTypes['Customer']> };
  ConfirmEmailInput: ConfirmEmailInput;
  ContactUsInput: ContactUsInput;
  ContactUsOutput: ContactUsOutput;
  ContentBlock: ContentBlock;
  Country: Country;
  CouponsCollection: CouponsCollection;
  CouponsList: CouponsList;
  CreateCompareListInput: CreateCompareListInput;
  CreateGuestCartInput: CreateGuestCartInput;
  CreateGuestCartOutput: Omit<CreateGuestCartOutput, 'cart'> & { cart?: Maybe<ResolversParentTypes['Cart']> };
  CreatePayflowProTokenOutput: CreatePayflowProTokenOutput;
  CreatePaymentOrderInput: CreatePaymentOrderInput;
  CreatePaymentOrderOutput: CreatePaymentOrderOutput;
  CreateProductReviewInput: CreateProductReviewInput;
  CreateProductReviewOutput: Omit<CreateProductReviewOutput, 'review'> & { review: ResolversParentTypes['ProductReview'] };
  CreateVaultCardPaymentTokenInput: CreateVaultCardPaymentTokenInput;
  CreateVaultCardPaymentTokenOutput: CreateVaultCardPaymentTokenOutput;
  CreateVaultCardSetupTokenInput: CreateVaultCardSetupTokenInput;
  CreateVaultCardSetupTokenOutput: CreateVaultCardSetupTokenOutput;
  CreditCardDetailsInput: CreditCardDetailsInput;
  CreditMemo: Omit<CreditMemo, 'items' | 'total'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['CreditMemoItemInterface']>>>, total?: Maybe<ResolversParentTypes['CreditMemoTotal']> };
  CreditMemoItem: Omit<CreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  CreditMemoItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['CreditMemoItemInterface'];
  CreditMemoTotal: Omit<CreditMemoTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>> };
  Currency: Currency;
  Custom: Custom;
  CustomAttributeMetadata: CustomAttributeMetadata;
  CustomAttributeMetadataInterface: ResolversInterfaceTypes<ResolversParentTypes>['CustomAttributeMetadataInterface'];
  CustomAttributeOptionInterface: ResolversInterfaceTypes<ResolversParentTypes>['CustomAttributeOptionInterface'];
  CustomBlock: Omit<CustomBlock, 'products'> & { products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  Customer: Omit<Customer, 'addresses' | 'compare_list' | 'custom_attributes' | 'orders' | 'reviews' | 'wishlist' | 'wishlist_v2' | 'wishlists'> & { addresses?: Maybe<Array<Maybe<ResolversParentTypes['CustomerAddress']>>>, compare_list?: Maybe<ResolversParentTypes['CompareList']>, custom_attributes?: Maybe<Array<Maybe<ResolversParentTypes['AttributeValueInterface']>>>, orders?: Maybe<ResolversParentTypes['CustomerOrders']>, reviews: ResolversParentTypes['ProductReviews'], wishlist: ResolversParentTypes['Wishlist'], wishlist_v2?: Maybe<ResolversParentTypes['Wishlist']>, wishlists: Array<Maybe<ResolversParentTypes['Wishlist']>> };
  CustomerAddress: Omit<CustomerAddress, 'custom_attributes' | 'custom_attributesV2' | 'extension_attributes'> & { custom_attributes?: Maybe<Array<Maybe<ResolversParentTypes['CustomerAddressAttribute']>>>, custom_attributesV2: Array<Maybe<ResolversParentTypes['AttributeValueInterface']>>, extension_attributes?: Maybe<Array<Maybe<ResolversParentTypes['CustomerAddressAttribute']>>> };
  CustomerAddressAttribute: CustomerAddressAttribute;
  CustomerAddressAttributeInput: CustomerAddressAttributeInput;
  CustomerAddressInput: CustomerAddressInput;
  CustomerAddressRegion: CustomerAddressRegion;
  CustomerAddressRegionInput: CustomerAddressRegionInput;
  CustomerAttributeMetadata: Omit<CustomerAttributeMetadata, 'options'> & { options: Array<Maybe<ResolversParentTypes['CustomAttributeOptionInterface']>> };
  CustomerCreateInput: CustomerCreateInput;
  CustomerDownloadableProduct: CustomerDownloadableProduct;
  CustomerDownloadableProducts: CustomerDownloadableProducts;
  CustomerFeedbackInput: CustomerFeedbackInput;
  CustomerFeedbackOutput: CustomerFeedbackOutput;
  CustomerInput: CustomerInput;
  CustomerOrder: Omit<CustomerOrder, 'applied_coupons' | 'credit_memos' | 'invoices' | 'items' | 'shipments' | 'total'> & { applied_coupons: Array<Maybe<ResolversParentTypes['AppliedCoupon']>>, credit_memos?: Maybe<Array<Maybe<ResolversParentTypes['CreditMemo']>>>, invoices: Array<Maybe<ResolversParentTypes['Invoice']>>, items?: Maybe<Array<Maybe<ResolversParentTypes['OrderItemInterface']>>>, shipments?: Maybe<Array<Maybe<ResolversParentTypes['OrderShipment']>>>, total?: Maybe<ResolversParentTypes['OrderTotal']> };
  CustomerOrderSortInput: CustomerOrderSortInput;
  CustomerOrders: Omit<CustomerOrders, 'items'> & { items: Array<Maybe<ResolversParentTypes['CustomerOrder']>> };
  CustomerOrdersFilterInput: CustomerOrdersFilterInput;
  CustomerOutput: Omit<CustomerOutput, 'customer'> & { customer: ResolversParentTypes['Customer'] };
  CustomerPaymentTokens: CustomerPaymentTokens;
  CustomerToken: CustomerToken;
  CustomerUpdateInput: CustomerUpdateInput;
  CustomizableAreaOption: CustomizableAreaOption;
  CustomizableAreaValue: CustomizableAreaValue;
  CustomizableCheckboxOption: CustomizableCheckboxOption;
  CustomizableCheckboxValue: CustomizableCheckboxValue;
  CustomizableDateOption: CustomizableDateOption;
  CustomizableDateValue: CustomizableDateValue;
  CustomizableDropDownOption: CustomizableDropDownOption;
  CustomizableDropDownValue: CustomizableDropDownValue;
  CustomizableFieldOption: CustomizableFieldOption;
  CustomizableFieldValue: CustomizableFieldValue;
  CustomizableFileOption: CustomizableFileOption;
  CustomizableFileValue: CustomizableFileValue;
  CustomizableMultipleOption: CustomizableMultipleOption;
  CustomizableMultipleValue: CustomizableMultipleValue;
  CustomizableOptionInput: CustomizableOptionInput;
  CustomizableOptionInterface: ResolversInterfaceTypes<ResolversParentTypes>['CustomizableOptionInterface'];
  CustomizableProductInterface: ResolversInterfaceTypes<ResolversParentTypes>['CustomizableProductInterface'];
  CustomizableRadioOption: CustomizableRadioOption;
  CustomizableRadioValue: CustomizableRadioValue;
  DeleteCompareListOutput: DeleteCompareListOutput;
  DeletePaymentTokenOutput: DeletePaymentTokenOutput;
  DetailedSummary: DetailedSummary;
  Discount: Omit<Discount, 'coupon'> & { coupon?: Maybe<ResolversParentTypes['AppliedCoupon']> };
  DownloadableCartItem: Omit<DownloadableCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversParentTypes['CartItemPrices']>, product: ResolversParentTypes['ProductInterface'] };
  DownloadableCreditMemoItem: Omit<DownloadableCreditMemoItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  DownloadableInvoiceItem: Omit<DownloadableInvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  DownloadableItemsLinks: DownloadableItemsLinks;
  DownloadableOrderItem: Omit<DownloadableOrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, product?: Maybe<ResolversParentTypes['ProductInterface']> };
  DownloadableProduct: Omit<DownloadableProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversParentTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  DownloadableProductCartItemInput: DownloadableProductCartItemInput;
  DownloadableProductLinks: DownloadableProductLinks;
  DownloadableProductLinksInput: DownloadableProductLinksInput;
  DownloadableProductSamples: DownloadableProductSamples;
  DownloadableWishlistItem: Omit<DownloadableWishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  Emirates: Emirates;
  EnteredOptionInput: EnteredOptionInput;
  EntityUrl: EntityUrl;
  ErrorInterface: ResolversInterfaceTypes<ResolversParentTypes>['ErrorInterface'];
  EstimateAddressInput: EstimateAddressInput;
  EstimateTotalsInput: EstimateTotalsInput;
  EstimateTotalsOutput: Omit<EstimateTotalsOutput, 'cart'> & { cart?: Maybe<ResolversParentTypes['Cart']> };
  ExchangeRate: ExchangeRate;
  ExcludedPages: ExcludedPages;
  FacetData: FacetData;
  FacetValues: FacetValues;
  FeaturedBrandsBlock: FeaturedBrandsBlock;
  FilterEqualTypeInput: FilterEqualTypeInput;
  FilterMatchTypeInput: FilterMatchTypeInput;
  FilterRangeTypeInput: FilterRangeTypeInput;
  FilterStringTypeInput: FilterStringTypeInput;
  FilterTypeInput: FilterTypeInput;
  FixedProductTax: FixedProductTax;
  Float: Scalars['Float']['output'];
  FooterMenu: FooterMenu;
  GTMCodeOutput: GtmCodeOutput;
  GTMHeadOutput: GtmHeadOutput;
  General: General;
  GeneralConfig: GeneralConfig;
  GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
  GenerateCustomerTokenAsAdminOutput: GenerateCustomerTokenAsAdminOutput;
  GetLatLong: GetLatLong;
  GetPaymentSDKOutput: GetPaymentSdkOutput;
  GiftMessage: GiftMessage;
  GiftMessageInput: GiftMessageInput;
  GooglePayButtonStyles: GooglePayButtonStyles;
  GooglePayConfig: GooglePayConfig;
  GooglePayMethodInput: GooglePayMethodInput;
  GroupedProduct: Omit<GroupedProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'items' | 'media_gallery' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, items?: Maybe<Array<Maybe<ResolversParentTypes['GroupedProductItem']>>>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  GroupedProductItem: Omit<GroupedProductItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  GroupedProductWishlistItem: Omit<GroupedProductWishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  HeaderMenu: HeaderMenu;
  HomePage: Omit<HomePage, 'blocks'> & { blocks?: Maybe<ResolversParentTypes['Blocks']> };
  HostedFieldsConfig: HostedFieldsConfig;
  HostedFieldsInput: HostedFieldsInput;
  HostedProInput: HostedProInput;
  HostedProUrl: HostedProUrl;
  HostedProUrlInput: HostedProUrlInput;
  HotRequestOutput: HotRequestOutput;
  HttpQueryParameter: HttpQueryParameter;
  ID: Scalars['ID']['output'];
  Icon: Icon;
  Id: Id;
  ImageSwatchData: ImageSwatchData;
  Images: Images;
  Int: Scalars['Int']['output'];
  InternalError: InternalError;
  Invoice: Omit<Invoice, 'items' | 'total'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['InvoiceItemInterface']>>>, total?: Maybe<ResolversParentTypes['InvoiceTotal']> };
  InvoiceItem: Omit<InvoiceItem, 'discounts' | 'order_item'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  InvoiceItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['InvoiceItemInterface'];
  InvoiceTotal: Omit<InvoiceTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>> };
  IsEmailAvailableOutput: IsEmailAvailableOutput;
  ItemSelectedBundleOption: ItemSelectedBundleOption;
  ItemSelectedBundleOptionValue: ItemSelectedBundleOptionValue;
  Items: Items;
  KeyValue: KeyValue;
  LabelRules: LabelRules;
  LabelRulesFilterInput: LabelRulesFilterInput;
  LabelRulesOutput: LabelRulesOutput;
  LatLng: LatLng;
  LayerFilter: Omit<LayerFilter, 'filter_items'> & { filter_items?: Maybe<Array<Maybe<ResolversParentTypes['LayerFilterItemInterface']>>> };
  LayerFilterItem: LayerFilterItem;
  LayerFilterItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['LayerFilterItemInterface'];
  LikesOutput: LikesOutput;
  LinkItems: LinkItems;
  MapArea: MapArea;
  MapPinAddress: MapPinAddress;
  MappedImage: MappedImage;
  MediaGalleryEntry: MediaGalleryEntry;
  MediaGalleryInterface: ResolversInterfaceTypes<ResolversParentTypes>['MediaGalleryInterface'];
  Megamenu: Megamenu;
  Menu: Menu;
  MenuLink: MenuLink;
  MessageStyleLogo: MessageStyleLogo;
  MessageStyles: MessageStyles;
  MobileCreateCustomerAccountOutput: Omit<MobileCreateCustomerAccountOutput, 'customer'> & { customer: ResolversParentTypes['Customer'] };
  Money: Money;
  MonthlyArchive: MonthlyArchive;
  MonthlyArchiveOutput: MonthlyArchiveOutput;
  MpFilters: MpFilters;
  MpGTMCodeFilters: MpGtmCodeFilters;
  MpGTMHeadFilters: MpGtmHeadFilters;
  MpRewardCustomersOutput: MpRewardCustomersOutput;
  MpRewardInvitations: MpRewardInvitations;
  MpRewardInvitationsFilterInput: MpRewardInvitationsFilterInput;
  MpRewardInvitationsOutput: MpRewardInvitationsOutput;
  MpRewardPointsOutput: MpRewardPointsOutput;
  MpRewardRateOutput: MpRewardRateOutput;
  MpRewardTransactionsFilterInput: MpRewardTransactionsFilterInput;
  MpRewardTransactionsListOutput: MpRewardTransactionsListOutput;
  MpRewardTransactionsOutput: MpRewardTransactionsOutput;
  Mutation: {};
  NoSuchEntityUidError: NoSuchEntityUidError;
  Order: Order;
  OrderAddress: OrderAddress;
  OrderInformationInput: OrderInformationInput;
  OrderItem: Omit<OrderItem, 'discounts' | 'product'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>>, product?: Maybe<ResolversParentTypes['ProductInterface']> };
  OrderItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['OrderItemInterface'];
  OrderItemOption: OrderItemOption;
  OrderNoteOutput: OrderNoteOutput;
  OrderNotesInput: OrderNotesInput;
  OrderPaymentMethod: OrderPaymentMethod;
  OrderRecord: OrderRecord;
  OrderShipment: Omit<OrderShipment, 'items'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['ShipmentItemInterface']>>> };
  OrderTokenInput: OrderTokenInput;
  OrderTotal: Omit<OrderTotal, 'discounts'> & { discounts?: Maybe<Array<Maybe<ResolversParentTypes['Discount']>>> };
  OtpRequestInput: OtpRequestInput;
  OtpRequestOutput: OtpRequestOutput;
  PageInfo: PageInfo;
  PayflowExpressInput: PayflowExpressInput;
  PayflowLinkInput: PayflowLinkInput;
  PayflowLinkToken: PayflowLinkToken;
  PayflowLinkTokenInput: PayflowLinkTokenInput;
  PayflowProInput: PayflowProInput;
  PayflowProResponseInput: PayflowProResponseInput;
  PayflowProResponseOutput: Omit<PayflowProResponseOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  PayflowProToken: PayflowProToken;
  PayflowProTokenInput: PayflowProTokenInput;
  PayflowProUrlInput: PayflowProUrlInput;
  PaymentCommonConfig: PaymentCommonConfig;
  PaymentConfigItem: ResolversInterfaceTypes<ResolversParentTypes>['PaymentConfigItem'];
  PaymentConfigOutput: PaymentConfigOutput;
  PaymentMethodInput: PaymentMethodInput;
  PaymentOrderOutput: PaymentOrderOutput;
  PaymentSDKParamsItem: PaymentSdkParamsItem;
  PaymentSourceDetails: PaymentSourceDetails;
  PaymentSourceInput: PaymentSourceInput;
  PaymentSourceOutput: PaymentSourceOutput;
  PaymentToken: PaymentToken;
  PaypalExpressInput: PaypalExpressInput;
  PaypalExpressToken: PaypalExpressToken;
  PaypalExpressTokenInput: PaypalExpressTokenInput;
  PaypalExpressTokenOutput: PaypalExpressTokenOutput;
  PaypalExpressUrlList: PaypalExpressUrlList;
  PaypalExpressUrlsInput: PaypalExpressUrlsInput;
  PhysicalProductInterface: ResolversInterfaceTypes<ResolversParentTypes>['PhysicalProductInterface'];
  PickupLocation: PickupLocation;
  PickupLocationFilterInput: PickupLocationFilterInput;
  PickupLocationSortInput: PickupLocationSortInput;
  PickupLocations: PickupLocations;
  PlaceOrderError: PlaceOrderError;
  PlaceOrderInput: PlaceOrderInput;
  PlaceOrderOutput: Omit<PlaceOrderOutput, 'orderV2'> & { orderV2?: Maybe<ResolversParentTypes['CustomerOrder']> };
  PopUp: PopUp;
  Post: Post;
  PostsFilterInput: PostsFilterInput;
  PostsOutput: PostsOutput;
  PostsOutputNoPage: PostsOutputNoPage;
  Price: Price;
  PriceAdjustment: PriceAdjustment;
  PriceDetails: PriceDetails;
  PriceRange: PriceRange;
  Product: Product;
  ProductAlertUnsubscribeOutput: ProductAlertUnsubscribeOutput;
  ProductAttribute: ProductAttribute;
  ProductAttributeFilterInput: ProductAttributeFilterInput;
  ProductAttributeSortInput: ProductAttributeSortInput;
  ProductBlock: Omit<ProductBlock, 'products'> & { products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  ProductConfig: ProductConfig;
  ProductCustomAttributes: Omit<ProductCustomAttributes, 'items'> & { items: Array<Maybe<ResolversParentTypes['AttributeValueInterface']>> };
  ProductDiscount: ProductDiscount;
  ProductFilterInput: ProductFilterInput;
  ProductImage: ProductImage;
  ProductInfoInput: ProductInfoInput;
  ProductInterface: ResolversInterfaceTypes<ResolversParentTypes>['ProductInterface'];
  ProductInventory: ProductInventory;
  ProductItems: ProductItems;
  ProductLinks: ProductLinks;
  ProductLinksInterface: ResolversInterfaceTypes<ResolversParentTypes>['ProductLinksInterface'];
  ProductMediaGalleryEntriesContent: ProductMediaGalleryEntriesContent;
  ProductMediaGalleryEntriesVideoContent: ProductMediaGalleryEntriesVideoContent;
  ProductPrice: ProductPrice;
  ProductPrices: ProductPrices;
  ProductReview: Omit<ProductReview, 'product'> & { product: ResolversParentTypes['ProductInterface'] };
  ProductReviewRating: ProductReviewRating;
  ProductReviewRatingInput: ProductReviewRatingInput;
  ProductReviewRatingMetadata: ProductReviewRatingMetadata;
  ProductReviewRatingValueMetadata: ProductReviewRatingValueMetadata;
  ProductReviewRatingsMetadata: ProductReviewRatingsMetadata;
  ProductReviews: Omit<ProductReviews, 'items'> & { items: Array<Maybe<ResolversParentTypes['ProductReview']>> };
  ProductSortInput: ProductSortInput;
  ProductTierPrices: ProductTierPrices;
  ProductVideo: ProductVideo;
  ProductViewReportOutput: ProductViewReportOutput;
  Products: Omit<Products, 'filters' | 'items'> & { filters?: Maybe<Array<Maybe<ResolversParentTypes['LayerFilter']>>>, items?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  ProductsFilterInput: ProductsFilterInput;
  ProductsOutput: ProductsOutput;
  ProductsOutputNoPage: ProductsOutputNoPage;
  ProofData: ProofData;
  Query: {};
  QuoteItemsSortInput: QuoteItemsSortInput;
  Rating: Rating;
  RatingOption: RatingOption;
  RatingVote: RatingVote;
  ReCaptchaConfigurationV3: ReCaptchaConfigurationV3;
  RecentViewProducts: Omit<RecentViewProducts, 'items'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  Region: Region;
  RemoveCouponFromCartInput: RemoveCouponFromCartInput;
  RemoveCouponFromCartOutput: Omit<RemoveCouponFromCartOutput, 'cart'> & { cart?: Maybe<ResolversParentTypes['Cart']> };
  RemoveItemFromCartInput: RemoveItemFromCartInput;
  RemoveItemFromCartOutput: Omit<RemoveItemFromCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
  RemoveProductsFromWishlistOutput: Omit<RemoveProductsFromWishlistOutput, 'wishlist'> & { wishlist: ResolversParentTypes['Wishlist'] };
  ReorderItemsOutput: Omit<ReorderItemsOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  Response: Response;
  ResultPage: ResultPage;
  Review: Review;
  ReviewData: ReviewData;
  ReviewFilter: ReviewFilter;
  ReviewOrder: ReviewOrder;
  ReviewSource: ReviewSource;
  ReviewsData: ReviewsData;
  RevokeCustomerTokenOutput: RevokeCustomerTokenOutput;
  RewardCartAddressInput: RewardCartAddressInput;
  RewardConfig: RewardConfig;
  RewardEarning: RewardEarning;
  RewardExchangeRate: RewardExchangeRate;
  RewardShippingMethodInput: RewardShippingMethodInput;
  RoutableInterface: ResolversInterfaceTypes<ResolversParentTypes>['RoutableInterface'];
  RoutableUrl: RoutableUrl;
  SDKParams: SdkParams;
  SaleEarnConfigs: SaleEarnConfigs;
  SalesCommentItem: SalesCommentItem;
  SalesItemInterface: SalesItemInterface;
  SalesOrder: SalesOrder;
  SalesOrderCollection: SalesOrderCollection;
  SearchAttributes: SearchAttributes;
  SearchConfig: SearchConfig;
  SearchFilterInput: SearchFilterInput;
  SearchFilters: SearchFilters;
  SearchResultPageInfo: SearchResultPageInfo;
  SearchSortOrderInput: SearchSortOrderInput;
  SearchSuggestion: SearchSuggestion;
  SelectedBundleOption: SelectedBundleOption;
  SelectedBundleOptionValue: SelectedBundleOptionValue;
  SelectedConfigurableOption: SelectedConfigurableOption;
  SelectedCustomizableOption: SelectedCustomizableOption;
  SelectedCustomizableOptionValue: SelectedCustomizableOptionValue;
  SelectedPaymentMethod: SelectedPaymentMethod;
  SelectedShippingMethod: SelectedShippingMethod;
  SemanticSearch: SemanticSearch;
  SendEmailToFriendInput: SendEmailToFriendInput;
  SendEmailToFriendOutput: SendEmailToFriendOutput;
  SendEmailToFriendRecipient: SendEmailToFriendRecipient;
  SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
  SendEmailToFriendSender: SendEmailToFriendSender;
  SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
  SendFriendConfiguration: SendFriendConfiguration;
  Seo: Seo;
  SeoDetails: SeoDetails;
  SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
  SetBillingAddressOnCartOutput: Omit<SetBillingAddressOnCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
  SetGuestEmailOnCartOutput: Omit<SetGuestEmailOnCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
  SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
  SetPaymentMethodOnCartOutput: Omit<SetPaymentMethodOnCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
  SetShippingAddressesOnCartOutput: Omit<SetShippingAddressesOnCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
  SetShippingMethodsOnCartOutput: Omit<SetShippingMethodsOnCartOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  ShipmentItem: Omit<ShipmentItem, 'order_item'> & { order_item?: Maybe<ResolversParentTypes['OrderItemInterface']> };
  ShipmentItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['ShipmentItemInterface'];
  ShipmentTracking: ShipmentTracking;
  Shipping: Shipping;
  ShippingAddressInput: ShippingAddressInput;
  ShippingCartAddress: Omit<ShippingCartAddress, 'available_shipping_methods' | 'cart_items_v2'> & { available_shipping_methods?: Maybe<Array<Maybe<ResolversParentTypes['AvailableShippingMethod']>>>, cart_items_v2?: Maybe<Array<Maybe<ResolversParentTypes['CartItemInterface']>>> };
  ShippingDiscount: ShippingDiscount;
  ShippingHandling: ShippingHandling;
  ShippingMethodInput: ShippingMethodInput;
  Sidebar: Sidebar;
  SimpleCartItem: Omit<SimpleCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversParentTypes['CartItemPrices']>, product: ResolversParentTypes['ProductInterface'] };
  SimpleProduct: Omit<SimpleProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversParentTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  SimpleProductCartItemInput: SimpleProductCartItemInput;
  SimpleWishlistItem: Omit<SimpleWishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  Slider: Slider;
  SliderBlock: SliderBlock;
  SmartButtonMethodInput: SmartButtonMethodInput;
  SmartButtonsConfig: SmartButtonsConfig;
  SmtpBestsellersOutput: SmtpBestsellersOutput;
  SortField: SortField;
  SortFields: SortFields;
  SortOption: SortOption;
  SpendingConfiguration: SpendingConfiguration;
  SpendingRules: SpendingRules;
  StoreConfig: StoreConfig;
  StoreLocation: StoreLocation;
  StorefrontProperties: StorefrontProperties;
  String: Scalars['String']['output'];
  SubscribeEmailToNewsletterOutput: SubscribeEmailToNewsletterOutput;
  SwatchData: SwatchData;
  SwatchDataInterface: ResolversInterfaceTypes<ResolversParentTypes>['SwatchDataInterface'];
  SwatchLayerFilterItem: SwatchLayerFilterItem;
  SwatchLayerFilterItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['SwatchLayerFilterItemInterface'];
  SyncPaymentOrderInput: SyncPaymentOrderInput;
  Tag: Tag;
  TaggedImageBlock: TaggedImageBlock;
  TagsFilterInput: TagsFilterInput;
  TagsOutput: TagsOutput;
  TagsOutputNoPage: TagsOutputNoPage;
  TaxItem: TaxItem;
  Testimonial: Testimonial;
  TestimonialBlock: TestimonialBlock;
  TextSwatchData: TextSwatchData;
  TierPrice: TierPrice;
  Topic: Topic;
  TopicsFilterInput: TopicsFilterInput;
  TopicsOutput: TopicsOutput;
  TopicsOutputNoPage: TopicsOutputNoPage;
  TotalSegmentsOutput: TotalSegmentsOutput;
  TypeTolernace: TypeTolernace;
  TypeseSenseSystemConfig: TypeseSenseSystemConfig;
  TypesenseConfig: TypesenseConfig;
  UpdateCartItemsInput: UpdateCartItemsInput;
  UpdateCartItemsOutput: Omit<UpdateCartItemsOutput, 'cart'> & { cart: ResolversParentTypes['Cart'] };
  UpdateProductsInWishlistOutput: Omit<UpdateProductsInWishlistOutput, 'wishlist'> & { wishlist: ResolversParentTypes['Wishlist'] };
  UrlRewrite: UrlRewrite;
  ValidationRule: ValidationRule;
  VaultConfigOutput: VaultConfigOutput;
  VaultCreditCardConfig: VaultCreditCardConfig;
  VaultMethodInput: VaultMethodInput;
  VaultSetupTokenInput: VaultSetupTokenInput;
  VaultTokenInput: VaultTokenInput;
  ViewAllProducts: Omit<ViewAllProducts, 'products'> & { products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  VirtualCartItem: Omit<VirtualCartItem, 'prices' | 'product'> & { prices?: Maybe<ResolversParentTypes['CartItemPrices']>, product: ResolversParentTypes['ProductInterface'] };
  VirtualProduct: Omit<VirtualProduct, 'categories' | 'crosssell_products' | 'custom_attributesV2' | 'media_gallery' | 'options' | 'product_links' | 'related_products' | 'reviews' | 'upsell_products'> & { categories?: Maybe<Array<Maybe<ResolversParentTypes['CategoryInterface']>>>, crosssell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, custom_attributesV2?: Maybe<ResolversParentTypes['ProductCustomAttributes']>, media_gallery?: Maybe<Array<Maybe<ResolversParentTypes['MediaGalleryInterface']>>>, options?: Maybe<Array<Maybe<ResolversParentTypes['CustomizableOptionInterface']>>>, product_links?: Maybe<Array<Maybe<ResolversParentTypes['ProductLinksInterface']>>>, related_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>>, reviews: ResolversParentTypes['ProductReviews'], upsell_products?: Maybe<Array<Maybe<ResolversParentTypes['ProductInterface']>>> };
  VirtualProductCartItemInput: VirtualProductCartItemInput;
  VirtualWishlistItem: Omit<VirtualWishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  Website: Website;
  WholeSalerCustomerAccountOutput: Omit<WholeSalerCustomerAccountOutput, 'customer'> & { customer?: Maybe<ResolversParentTypes['Customer']> };
  WishListUserInputError: WishListUserInputError;
  Wishlist: Omit<Wishlist, 'items' | 'items_v2'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['WishlistItem']>>>, items_v2?: Maybe<ResolversParentTypes['WishlistItems']> };
  WishlistCartUserInputError: WishlistCartUserInputError;
  WishlistData: WishlistData;
  WishlistItem: Omit<WishlistItem, 'product'> & { product?: Maybe<ResolversParentTypes['ProductInterface']> };
  WishlistItemInput: WishlistItemInput;
  WishlistItemInterface: ResolversInterfaceTypes<ResolversParentTypes>['WishlistItemInterface'];
  WishlistItemUpdateInput: WishlistItemUpdateInput;
  WishlistItems: Omit<WishlistItems, 'items'> & { items: Array<Maybe<ResolversParentTypes['WishlistItemInterface']>> };
  WishlistOutput: Omit<WishlistOutput, 'items'> & { items?: Maybe<Array<Maybe<ResolversParentTypes['WishlistItem']>>> };
  createEmptyCartInput: CreateEmptyCartInput;
  displayConfig: DisplayConfig;
  earningConfig: EarningConfig;
  generalConfig: GeneralConfig;
  spendingConfig: SpendingConfig;
  subscribeInput: SubscribeInput;
};

export type AboutUsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AboutUsOutput'] = ResolversParentTypes['AboutUsOutput']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddAdvCommentOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddAdvCommentOutput'] = ResolversParentTypes['AddAdvCommentOutput']> = {
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddAdvProductReviewOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddAdvProductReviewOutput'] = ResolversParentTypes['AddAdvProductReviewOutput']> = {
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddAdvReviewOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddAdvReviewOutput'] = ResolversParentTypes['AddAdvReviewOutput']> = {
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddAdvVoteOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddAdvVoteOutput'] = ResolversParentTypes['AddAdvVoteOutput']> = {
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddBundleProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddBundleProductsToCartOutput'] = ResolversParentTypes['AddBundleProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddConfigurableProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddConfigurableProductsToCartOutput'] = ResolversParentTypes['AddConfigurableProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddDownloadableProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddDownloadableProductsToCartOutput'] = ResolversParentTypes['AddDownloadableProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddProductsToCartOutput'] = ResolversParentTypes['AddProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  user_errors?: Resolver<Array<Maybe<ResolversTypes['CartUserInputError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddProductsToWishlistOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddProductsToWishlistOutput'] = ResolversParentTypes['AddProductsToWishlistOutput']> = {
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddSimpleProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddSimpleProductsToCartOutput'] = ResolversParentTypes['AddSimpleProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddVirtualProductsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddVirtualProductsToCartOutput'] = ResolversParentTypes['AddVirtualProductsToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddWishlistItemsToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddWishlistItemsToCartOutput'] = ResolversParentTypes['AddWishlistItemsToCartOutput']> = {
  add_wishlist_items_to_cart_user_errors?: Resolver<Array<Maybe<ResolversTypes['WishlistCartUserInputError']>>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdditionalConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdditionalConfig'] = ResolversParentTypes['AdditionalConfig']> = {
  disable_split_token?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  infix_search?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  prefix_search?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  stem_search?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdditionalInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdditionalInfo'] = ResolversParentTypes['AdditionalInfo']> = {
  approval_status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_proof?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  licence_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mobilenumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  profile_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['Address'] = ResolversParentTypes['Address']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AggregationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Aggregation'] = ResolversParentTypes['Aggregation']> = {
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AggregationOption']>>>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AggregationOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AggregationOption'] = ResolversParentTypes['AggregationOption']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AggregationOptionInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['AggregationOptionInterface'] = ResolversParentTypes['AggregationOptionInterface']> = {
  __resolveType: TypeResolveFn<'AggregationOption', ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type AmReviewSettingResolvers<ContextType = any, ParentType extends ResolversParentTypes['AmReviewSetting'] = ResolversParentTypes['AmReviewSetting']> = {
  availableFilters?: Resolver<Maybe<Array<Maybe<ResolversTypes['ReviewFilter']>>>, ParentType, ContextType>;
  availableOrders?: Resolver<Maybe<Array<Maybe<ResolversTypes['ReviewOrder']>>>, ParentType, ContextType>;
  getGDPRText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  getReviewImageWidth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isAllowAnswer?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAllowCoupons?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAllowGuest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAllowHelpful?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAllowImages?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAllowReminder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isCommentsEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isFilteringEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isGDPREnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isGuestCanComment?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isGuestEmailShow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isImagesRequired?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isProsConsEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRecommendFieldEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isReminderEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isSortingEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isToolbarDisplayed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  perPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ratings?: Resolver<Maybe<Array<Maybe<ResolversTypes['Rating']>>>, ParentType, ContextType>;
  slidesToShow?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AmReviewWidgetResolvers<ContextType = any, ParentType extends ResolversParentTypes['AmReviewWidget'] = ResolversParentTypes['AmReviewWidget']> = {
  current_category?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  current_product_category?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_slider?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['AmReviewWidgetItem']>>>, ParentType, ContextType>;
  review_type?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviews_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AmReviewWidgetItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['AmReviewWidgetItem'] = ResolversParentTypes['AmReviewWidgetItem']> = {
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_votes?: Resolver<Maybe<Array<Maybe<ResolversTypes['RatingVote']>>>, ParentType, ContextType>;
  recommendedHtml?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplePayConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplePayConfig'] = ResolversParentTypes['ApplePayConfig']> = {
  button_styles?: Resolver<Maybe<ResolversTypes['ButtonStyles']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AppliedCouponResolvers<ContextType = any, ParentType extends ResolversParentTypes['AppliedCoupon'] = ResolversParentTypes['AppliedCoupon']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplyCouponToCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplyCouponToCartOutput'] = ResolversParentTypes['ApplyCouponToCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignCompareListToCustomerOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignCompareListToCustomerOutput'] = ResolversParentTypes['AssignCompareListToCustomerOutput']> = {
  compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Attribute'] = ResolversParentTypes['Attribute']> = {
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AttributeOption']>>>, ParentType, ContextType>;
  attribute_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  input_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  storefront_properties?: Resolver<Maybe<ResolversTypes['StorefrontProperties']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeMetadata'] = ResolversParentTypes['AttributeMetadata']> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  default_value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<ResolversTypes['AttributeEntityTypeEnum'], ParentType, ContextType>;
  frontend_class?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  frontend_input?: Resolver<Maybe<ResolversTypes['AttributeFrontendInputEnum']>, ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_unique?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeMetadataErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeMetadataError'] = ResolversParentTypes['AttributeMetadataError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['AttributeMetadataErrorType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeOption'] = ResolversParentTypes['AttributeOption']> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeOptionMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeOptionMetadata'] = ResolversParentTypes['AttributeOptionMetadata']> = {
  is_default?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeSelectedOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeSelectedOption'] = ResolversParentTypes['AttributeSelectedOption']> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeSelectedOptionInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeSelectedOptionInterface'] = ResolversParentTypes['AttributeSelectedOptionInterface']> = {
  __resolveType: TypeResolveFn<'AttributeSelectedOption', ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type AttributeSelectedOptionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeSelectedOptions'] = ResolversParentTypes['AttributeSelectedOptions']> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  selected_options?: Resolver<Array<Maybe<ResolversTypes['AttributeSelectedOptionInterface']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeValue'] = ResolversParentTypes['AttributeValue']> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeValueInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeValueInterface'] = ResolversParentTypes['AttributeValueInterface']> = {
  __resolveType: TypeResolveFn<'AttributeSelectedOptions' | 'AttributeValue', ParentType, ContextType>;
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type AttributesFormOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributesFormOutput'] = ResolversParentTypes['AttributesFormOutput']> = {
  errors?: Resolver<Array<Maybe<ResolversTypes['AttributeMetadataError']>>, ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeMetadataInterface']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributesMetadataOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributesMetadataOutput'] = ResolversParentTypes['AttributesMetadataOutput']> = {
  errors?: Resolver<Array<Maybe<ResolversTypes['AttributeMetadataError']>>, ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeMetadataInterface']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AutoCompleteSectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AutoCompleteSection'] = ResolversParentTypes['AutoCompleteSection']> = {
  category_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  enable_category?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_suggestion?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  page_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  page_exclude?: Resolver<Maybe<Array<Maybe<ResolversTypes['ExcludedPages']>>>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  suggestion_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AvailablePaymentMethodResolvers<ContextType = any, ParentType extends ResolversParentTypes['AvailablePaymentMethod'] = ResolversParentTypes['AvailablePaymentMethod']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_deferred?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AvailableShippingMethodResolvers<ContextType = any, ParentType extends ResolversParentTypes['AvailableShippingMethod'] = ResolversParentTypes['AvailableShippingMethod']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  error_message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  method_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  method_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price_excl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  price_incl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BannerBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['BannerBlock'] = ResolversParentTypes['BannerBlock']> = {
  banner_template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  banneritems?: Resolver<Maybe<Array<Maybe<ResolversTypes['BannerItems']>>>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BannerItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BannerItems'] = ResolversParentTypes['BannerItems']> = {
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link_info?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BestsellersProductOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['BestsellersProductOutput'] = ResolversParentTypes['BestsellersProductOutput']> = {
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  period?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_image_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_price?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  qty_ordered?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BillingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Billing'] = ResolversParentTypes['Billing']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BillingCartAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['BillingCartAddress'] = ResolversParentTypes['BillingCartAddress']> = {
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  customer_address_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lat_lng?: Resolver<Maybe<Array<Maybe<ResolversTypes['LatLng']>>>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['Block'] = ResolversParentTypes['Block']> = {
  __resolveType: TypeResolveFn<'BannerBlock' | 'CategoryBlock' | 'ContentBlock' | 'CustomBlock' | 'FeaturedBrandsBlock' | 'PopUp' | 'ProductBlock' | 'SliderBlock' | 'TaggedImageBlock' | 'TestimonialBlock', ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type BlockDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlockData'] = ResolversParentTypes['BlockData']> = {
  __resolveType: TypeResolveFn<'BannerBlock' | 'CategoryBlock' | 'ContentBlock' | 'CustomBlock' | 'FeaturedBrandsBlock' | 'PopUp' | 'ProductBlock' | 'SliderBlock' | 'TaggedImageBlock' | 'TestimonialBlock', ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type BlocksResolvers<ContextType = any, ParentType extends ResolversParentTypes['Blocks'] = ResolversParentTypes['Blocks']> = {
  data?: Resolver<Maybe<Array<Maybe<ResolversTypes['Block']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  seo_details?: Resolver<Maybe<ResolversTypes['SeoDetails']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BrandDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['BrandData'] = ResolversParentTypes['BrandData']> = {
  brand_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BrandInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['BrandInfo'] = ResolversParentTypes['BrandInfo']> = {
  brand_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BreadcrumbResolvers<ContextType = any, ParentType extends ResolversParentTypes['Breadcrumb'] = ResolversParentTypes['Breadcrumb']> = {
  category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  category_level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  category_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  category_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BulkOrderOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['BulkOrderOutput'] = ResolversParentTypes['BulkOrderOutput']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleCartItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleCartItem'] = ResolversParentTypes['BundleCartItem']> = {
  bundle_options?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOption']>>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleCreditMemoItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleCreditMemoItem'] = ResolversParentTypes['BundleCreditMemoItem']> = {
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleInvoiceItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleInvoiceItem'] = ResolversParentTypes['BundleInvoiceItem']> = {
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleItem'] = ResolversParentTypes['BundleItem']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItemOption']>>>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleItemOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleItemOption'] = ResolversParentTypes['BundleItemOption']> = {
  can_change_quantity?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleOrderItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleOrderItem'] = ResolversParentTypes['BundleOrderItem']> = {
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  product_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleProduct'] = ResolversParentTypes['BundleProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<BundleProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dynamic_price?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamic_sku?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamic_weight?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItem']>>>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_details?: Resolver<Maybe<ResolversTypes['PriceDetails']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  price_view?: Resolver<Maybe<ResolversTypes['PriceViewEnum']>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<BundleProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  ship_bundle_items?: Resolver<Maybe<ResolversTypes['ShipBundleItemsEnum']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleShipmentItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleShipmentItem'] = ResolversParentTypes['BundleShipmentItem']> = {
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BundleWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BundleWishlistItem'] = ResolversParentTypes['BundleWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedBundleOption']>>>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonStylesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonStyles'] = ResolversParentTypes['ButtonStyles']> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tagline?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  use_default_height?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CancelOrderOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CancelOrderOutput'] = ResolversParentTypes['CancelOrderOutput']> = {
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['CustomerOrder']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CancellationReasonResolvers<ContextType = any, ParentType extends ResolversParentTypes['CancellationReason'] = ResolversParentTypes['CancellationReason']> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CardResolvers<ContextType = any, ParentType extends ResolversParentTypes['Card'] = ResolversParentTypes['Card']> = {
  bin_details?: Resolver<Maybe<ResolversTypes['CardBin']>, ParentType, ContextType>;
  card_expiry_month?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card_expiry_year?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last_digits?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CardBinResolvers<ContextType = any, ParentType extends ResolversParentTypes['CardBin'] = ResolversParentTypes['CardBin']> = {
  bin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CardPaymentSourceOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CardPaymentSourceOutput'] = ResolversParentTypes['CardPaymentSourceOutput']> = {
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expiry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last_digits?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartResolvers<ContextType = any, ParentType extends ResolversParentTypes['Cart'] = ResolversParentTypes['Cart']> = {
  applied_coupon?: Resolver<Maybe<ResolversTypes['AppliedCoupon']>, ParentType, ContextType>;
  applied_coupons?: Resolver<Maybe<Array<Maybe<ResolversTypes['AppliedCoupon']>>>, ParentType, ContextType>;
  available_payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePaymentMethod']>>>, ParentType, ContextType>;
  billing_address?: Resolver<Maybe<ResolversTypes['BillingCartAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fb_add_to_cart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  freeshipping_note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ga_add_to_cart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ga_remove_from_cart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  gtm_add_to_cart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gtm_remove_from_cart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_virtual?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
  itemsV2?: Resolver<Maybe<ResolversTypes['CartItems']>, ParentType, ContextType, RequireFields<CartItemsV2Args, 'currentPage' | 'pageSize'>>;
  prices?: Resolver<Maybe<ResolversTypes['CartPrices']>, ParentType, ContextType>;
  selected_payment_method?: Resolver<Maybe<ResolversTypes['SelectedPaymentMethod']>, ParentType, ContextType>;
  shipping_addresses?: Resolver<Array<Maybe<ResolversTypes['ShippingCartAddress']>>, ParentType, ContextType>;
  total_quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartAddressCountryResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartAddressCountry'] = ResolversParentTypes['CartAddressCountry']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartAddressInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartAddressInterface'] = ResolversParentTypes['CartAddressInterface']> = {
  __resolveType: TypeResolveFn<'BillingCartAddress' | 'ShippingCartAddress', ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lat_lng?: Resolver<Maybe<Array<Maybe<ResolversTypes['LatLng']>>>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type CartAddressRegionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartAddressRegion'] = ResolversParentTypes['CartAddressRegion']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartDiscountResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartDiscount'] = ResolversParentTypes['CartDiscount']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  label?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartItemErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItemError'] = ResolversParentTypes['CartItemError']> = {
  code?: Resolver<ResolversTypes['CartItemErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItemInterface'] = ResolversParentTypes['CartItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleCartItem' | 'ConfigurableCartItem' | 'DownloadableCartItem' | 'SimpleCartItem' | 'VirtualCartItem', ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type CartItemPricesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItemPrices'] = ResolversParentTypes['CartItemPrices']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  fixed_product_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FixedProductTax']>>>, ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  price_including_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  row_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  row_total_including_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_item_discount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartItemQuantityResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItemQuantity'] = ResolversParentTypes['CartItemQuantity']> = {
  cart_item_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartItemSelectedOptionValuePriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItemSelectedOptionValuePrice'] = ResolversParentTypes['CartItemSelectedOptionValuePrice']> = {
  type?: Resolver<ResolversTypes['PriceTypeEnum'], ParentType, ContextType>;
  units?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartItems'] = ResolversParentTypes['CartItems']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['CartItemInterface']>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartPricesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartPrices'] = ResolversParentTypes['CartPrices']> = {
  applied_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartTaxItem']>>>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['CartDiscount']>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  mp_reward_segments?: Resolver<Maybe<Array<Maybe<ResolversTypes['TotalSegmentsOutput']>>>, ParentType, ContextType>;
  subtotal_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  subtotal_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  subtotal_with_discount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartTaxItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartTaxItem'] = ResolversParentTypes['CartTaxItem']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CartUserInputErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CartUserInputError'] = ResolversParentTypes['CartUserInputError']> = {
  code?: Resolver<ResolversTypes['CartUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CatalogAttributeMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['CatalogAttributeMetadata'] = ResolversParentTypes['CatalogAttributeMetadata']> = {
  apply_to?: Resolver<Maybe<Array<Maybe<ResolversTypes['CatalogAttributeApplyToEnum']>>>, ParentType, ContextType>;
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  default_value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<ResolversTypes['AttributeEntityTypeEnum'], ParentType, ContextType>;
  frontend_class?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  frontend_input?: Resolver<Maybe<ResolversTypes['AttributeFrontendInputEnum']>, ParentType, ContextType>;
  is_comparable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_filterable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_filterable_in_search?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_html_allowed_on_front?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_searchable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_unique?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_used_for_price_rules?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_used_for_promo_rules?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_visible_in_advanced_search?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_visible_on_front?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_wysiwyg_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>>, ParentType, ContextType>;
  swatch_input_type?: Resolver<Maybe<ResolversTypes['SwatchInputTypeEnum']>, ParentType, ContextType>;
  update_product_preview_image?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  use_product_image_for_swatch?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  used_in_product_listing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoriesOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoriesOutput'] = ResolversParentTypes['CategoriesOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Category']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoriesOutputNoPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoriesOutputNoPage'] = ResolversParentTypes['CategoriesOutputNoPage']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Category']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Category'] = ResolversParentTypes['Category']> = {
  category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  children_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  import_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_robots?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parent_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsOutputNoPage']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryBlock'] = ResolversParentTypes['CategoryBlock']> = {
  category_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInfo']>>>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryConfig'] = ResolversParentTypes['CategoryConfig']> = {
  ranking?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  search_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['SearchAttributes']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryInfo'] = ResolversParentTypes['CategoryInfo']> = {
  category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryInterface'] = ResolversParentTypes['CategoryInterface']> = {
  __resolveType: TypeResolveFn<'CategoryTree', ParentType, ContextType>;
  available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryInterfaceProductsArgs, 'currentPage' | 'pageSize'>>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vegam_category_thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type CategoryProductsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryProducts'] = ResolversParentTypes['CategoryProducts']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryResult'] = ResolversParentTypes['CategoryResult']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
  megamenuImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  megamenuImageInfo?: Resolver<Maybe<ResolversTypes['Megamenu']>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryTreeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryTree'] = ResolversParentTypes['CategoryTree']> = {
  available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  children?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
  children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryTreeProductsArgs, 'currentPage' | 'pageSize'>>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vegam_category_thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckoutAgreementResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckoutAgreement'] = ResolversParentTypes['CheckoutAgreement']> = {
  agreement_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  checkbox_text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  content_height?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_html?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  mode?: Resolver<ResolversTypes['CheckoutAgreementMode'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckoutUserInputErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckoutUserInputError'] = ResolversParentTypes['CheckoutUserInputError']> = {
  code?: Resolver<ResolversTypes['CheckoutUserInputErrorCodes'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  path?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CmsBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBlock'] = ResolversParentTypes['CmsBlock']> = {
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CmsBlocksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBlocks'] = ResolversParentTypes['CmsBlocks']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CmsBlock']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CmsPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsPage'] = ResolversParentTypes['CmsPage']> = {
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  content_heading?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Collections'] = ResolversParentTypes['Collections']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ColorSwatchDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ColorSwatchData'] = ResolversParentTypes['ColorSwatchData']> = {
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Comment'] = ResolversParentTypes['Comment']> = {
  comment_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  has_reply?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  import_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_reply?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  review_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  session_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user_email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommentsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CommentsOutput'] = ResolversParentTypes['CommentsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Comment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ComparableAttributeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ComparableAttribute'] = ResolversParentTypes['ComparableAttribute']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ComparableItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ComparableItem'] = ResolversParentTypes['ComparableItem']> = {
  attributes?: Resolver<Array<Maybe<ResolversTypes['ProductAttribute']>>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompareListResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompareList'] = ResolversParentTypes['CompareList']> = {
  attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableAttribute']>>>, ParentType, ContextType>;
  item_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableItem']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ComplexTextValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ComplexTextValue'] = ResolversParentTypes['ComplexTextValue']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigsOutput'] = ResolversParentTypes['ConfigsOutput']> = {
  general?: Resolver<Maybe<ResolversTypes['General']>, ParentType, ContextType>;
  seo?: Resolver<Maybe<ResolversTypes['Seo']>, ParentType, ContextType>;
  sidebar?: Resolver<Maybe<ResolversTypes['Sidebar']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableAttributeOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableAttributeOption'] = ResolversParentTypes['ConfigurableAttributeOption']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableCartItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableCartItem'] = ResolversParentTypes['ConfigurableCartItem']> = {
  configurable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>, ParentType, ContextType>;
  configured_variant?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableOptionAvailableForSelectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableOptionAvailableForSelection'] = ResolversParentTypes['ConfigurableOptionAvailableForSelection']> = {
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  option_value_uids?: Resolver<Array<Maybe<ResolversTypes['ID']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProduct'] = ResolversParentTypes['ConfigurableProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptions']>>>, ParentType, ContextType>;
  configurable_product_options_selection?: Resolver<Maybe<ResolversTypes['ConfigurableProductOptionsSelection']>, ParentType, ContextType, Partial<ConfigurableProductConfigurable_Product_Options_SelectionArgs>>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<ConfigurableProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ConfigurableProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  variants?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableVariant']>>>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProductOption'] = ResolversParentTypes['ConfigurableProductOption']> = {
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductOptionValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProductOptionValue'] = ResolversParentTypes['ConfigurableProductOptionValue']> = {
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_use_default?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  swatch?: Resolver<Maybe<ResolversTypes['SwatchDataInterface']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductOptionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProductOptions'] = ResolversParentTypes['ConfigurableProductOptions']> = {
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_id_v2?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  attribute_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  use_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionsValues']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductOptionsSelectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProductOptionsSelection'] = ResolversParentTypes['ConfigurableProductOptionsSelection']> = {
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOption']>>>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  options_available_for_selection?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableOptionAvailableForSelection']>>>, ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableProductOptionsValuesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableProductOptionsValues'] = ResolversParentTypes['ConfigurableProductOptionsValues']> = {
  default_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchDataInterface']>, ParentType, ContextType>;
  uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  use_default_value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableVariantResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableVariant'] = ResolversParentTypes['ConfigurableVariant']> = {
  attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableAttributeOption']>>>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurableWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurableWishlistItem'] = ResolversParentTypes['ConfigurableWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  child_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>>, ParentType, ContextType>;
  configured_variant?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfirmAccountOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfirmAccountOutput'] = ResolversParentTypes['ConfirmAccountOutput']> = {
  customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactUsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactUsOutput'] = ResolversParentTypes['ContactUsOutput']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentBlock'] = ResolversParentTypes['ContentBlock']> = {
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = {
  available_regions?: Resolver<Maybe<Array<Maybe<ResolversTypes['Region']>>>, ParentType, ContextType>;
  full_name_english?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  full_name_locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  three_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  two_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CouponsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CouponsCollection'] = ResolversParentTypes['CouponsCollection']> = {
  Couponsdetails?: Resolver<Maybe<Array<Maybe<ResolversTypes['CouponsList']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CouponsListResolvers<ContextType = any, ParentType extends ResolversParentTypes['CouponsList'] = ResolversParentTypes['CouponsList']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateGuestCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateGuestCartOutput'] = ResolversParentTypes['CreateGuestCartOutput']> = {
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePayflowProTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePayflowProTokenOutput'] = ResolversParentTypes['CreatePayflowProTokenOutput']> = {
  response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePaymentOrderOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePaymentOrderOutput'] = ResolversParentTypes['CreatePaymentOrderOutput']> = {
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_order_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateProductReviewOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateProductReviewOutput'] = ResolversParentTypes['CreateProductReviewOutput']> = {
  review?: Resolver<ResolversTypes['ProductReview'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateVaultCardPaymentTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateVaultCardPaymentTokenOutput'] = ResolversParentTypes['CreateVaultCardPaymentTokenOutput']> = {
  payment_source?: Resolver<ResolversTypes['PaymentSourceOutput'], ParentType, ContextType>;
  vault_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateVaultCardSetupTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateVaultCardSetupTokenOutput'] = ResolversParentTypes['CreateVaultCardSetupTokenOutput']> = {
  setup_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreditMemoResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreditMemo'] = ResolversParentTypes['CreditMemo']> = {
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemoItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['CreditMemoTotal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreditMemoItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreditMemoItem'] = ResolversParentTypes['CreditMemoItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreditMemoItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreditMemoItemInterface'] = ResolversParentTypes['CreditMemoItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleCreditMemoItem' | 'CreditMemoItem' | 'DownloadableCreditMemoItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
};

export type CreditMemoTotalResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreditMemoTotal'] = ResolversParentTypes['CreditMemoTotal']> = {
  adjustment?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Currency'] = ResolversParentTypes['Currency']> = {
  available_currency_codes?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currecy_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currecy_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  exchange_rates?: Resolver<Maybe<Array<Maybe<ResolversTypes['ExchangeRate']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomResolvers<ContextType = any, ParentType extends ResolversParentTypes['Custom'] = ResolversParentTypes['Custom']> = {
  guest_checkout?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store_phone_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomAttributeMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomAttributeMetadata'] = ResolversParentTypes['CustomAttributeMetadata']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomAttributeMetadataInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomAttributeMetadataInterface'] = ResolversParentTypes['CustomAttributeMetadataInterface']> = {
  __resolveType: TypeResolveFn<'AttributeMetadata' | 'CatalogAttributeMetadata' | 'CustomerAttributeMetadata', ParentType, ContextType>;
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  default_value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<ResolversTypes['AttributeEntityTypeEnum'], ParentType, ContextType>;
  frontend_class?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  frontend_input?: Resolver<Maybe<ResolversTypes['AttributeFrontendInputEnum']>, ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_unique?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>>, ParentType, ContextType>;
};

export type CustomAttributeOptionInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomAttributeOptionInterface'] = ResolversParentTypes['CustomAttributeOptionInterface']> = {
  __resolveType: TypeResolveFn<'AttributeOptionMetadata', ParentType, ContextType>;
  is_default?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type CustomBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomBlock'] = ResolversParentTypes['CustomBlock']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link_info?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  viewall_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Customer'] = ResolversParentTypes['Customer']> = {
  additional_info?: Resolver<Maybe<ResolversTypes['AdditionalInfo']>, ParentType, ContextType>;
  addresses?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddress']>>>, ParentType, ContextType>;
  allow_remote_shopping_assistance?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
  confirmation_status?: Resolver<ResolversTypes['ConfirmationStatusEnum'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['AttributeValueInterface']>>>, ParentType, ContextType, Partial<CustomerCustom_AttributesArgs>>;
  date_of_birth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_billing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_shipping?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  group_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mobilenumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['MpRewardCustomersOutput']>, ParentType, ContextType>;
  orders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType, RequireFields<CustomerOrdersArgs, 'currentPage' | 'pageSize'>>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<CustomerReviewsArgs, 'currentPage' | 'pageSize'>>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxvat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  wishlist_v2?: Resolver<Maybe<ResolversTypes['Wishlist']>, ParentType, ContextType, RequireFields<CustomerWishlist_V2Args, 'id'>>;
  wishlists?: Resolver<Array<Maybe<ResolversTypes['Wishlist']>>, ParentType, ContextType, RequireFields<CustomerWishlistsArgs, 'currentPage' | 'pageSize'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerAddress'] = ResolversParentTypes['CustomerAddress']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
  country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Array<Maybe<ResolversTypes['AttributeValueInterface']>>, ParentType, ContextType, Partial<CustomerAddressCustom_AttributesV2Args>>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  default_billing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  default_shipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  extension_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CustomerAddressRegion']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  street?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerAddressAttributeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerAddressAttribute'] = ResolversParentTypes['CustomerAddressAttribute']> = {
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerAddressRegionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerAddressRegion'] = ResolversParentTypes['CustomerAddressRegion']> = {
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerAttributeMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerAttributeMetadata'] = ResolversParentTypes['CustomerAttributeMetadata']> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  default_value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<ResolversTypes['AttributeEntityTypeEnum'], ParentType, ContextType>;
  frontend_class?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  frontend_input?: Resolver<Maybe<ResolversTypes['AttributeFrontendInputEnum']>, ParentType, ContextType>;
  input_filter?: Resolver<Maybe<ResolversTypes['InputFilterEnum']>, ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_unique?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiline_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  options?: Resolver<Array<Maybe<ResolversTypes['CustomAttributeOptionInterface']>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  validate_rules?: Resolver<Maybe<Array<Maybe<ResolversTypes['ValidationRule']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerDownloadableProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerDownloadableProduct'] = ResolversParentTypes['CustomerDownloadableProduct']> = {
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  download_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  remaining_downloads?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerDownloadableProductsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerDownloadableProducts'] = ResolversParentTypes['CustomerDownloadableProducts']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerDownloadableProduct']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerFeedbackOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerFeedbackOutput'] = ResolversParentTypes['CustomerFeedbackOutput']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerOrderResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerOrder'] = ResolversParentTypes['CustomerOrder']> = {
  applied_coupons?: Resolver<Array<Maybe<ResolversTypes['AppliedCoupon']>>, ParentType, ContextType>;
  billing_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  credit_memos?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemo']>>>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoices?: Resolver<Array<Maybe<ResolversTypes['Invoice']>>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemInterface']>>>, ParentType, ContextType>;
  mp_reward_points?: Resolver<Maybe<ResolversTypes['MpRewardPointsOutput']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  order_date?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  order_note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderPaymentMethod']>>>, ParentType, ContextType>;
  shipments?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderShipment']>>>, ParentType, ContextType>;
  shipping_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
  shipping_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['OrderTotal']>, ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['MpRewardTransactionsListOutput']>, ParentType, ContextType, RequireFields<CustomerOrderTransactionsArgs, 'currentPage' | 'pageSize'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerOrdersResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerOrders'] = ResolversParentTypes['CustomerOrders']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['CustomerOrder']>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerOutput'] = ResolversParentTypes['CustomerOutput']> = {
  customer?: Resolver<ResolversTypes['Customer'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerPaymentTokensResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerPaymentTokens'] = ResolversParentTypes['CustomerPaymentTokens']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['PaymentToken']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomerToken'] = ResolversParentTypes['CustomerToken']> = {
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableAreaOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableAreaOption'] = ResolversParentTypes['CustomizableAreaOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableAreaValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableAreaValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableAreaValue'] = ResolversParentTypes['CustomizableAreaValue']> = {
  max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableCheckboxOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableCheckboxOption'] = ResolversParentTypes['CustomizableCheckboxOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableCheckboxValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableCheckboxValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableCheckboxValue'] = ResolversParentTypes['CustomizableCheckboxValue']> = {
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableDateOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableDateOption'] = ResolversParentTypes['CustomizableDateOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableDateValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableDateValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableDateValue'] = ResolversParentTypes['CustomizableDateValue']> = {
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['CustomizableDateTypeEnum']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableDropDownOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableDropDownOption'] = ResolversParentTypes['CustomizableDropDownOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableDropDownValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableDropDownValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableDropDownValue'] = ResolversParentTypes['CustomizableDropDownValue']> = {
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableFieldOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableFieldOption'] = ResolversParentTypes['CustomizableFieldOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableFieldValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableFieldValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableFieldValue'] = ResolversParentTypes['CustomizableFieldValue']> = {
  max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableFileOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableFileOption'] = ResolversParentTypes['CustomizableFileOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableFileValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableFileValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableFileValue'] = ResolversParentTypes['CustomizableFileValue']> = {
  file_extension?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image_size_x?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image_size_y?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableMultipleOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableMultipleOption'] = ResolversParentTypes['CustomizableMultipleOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableMultipleValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableMultipleValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableMultipleValue'] = ResolversParentTypes['CustomizableMultipleValue']> = {
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableOptionInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableOptionInterface'] = ResolversParentTypes['CustomizableOptionInterface']> = {
  __resolveType: TypeResolveFn<'CustomizableAreaOption' | 'CustomizableCheckboxOption' | 'CustomizableDateOption' | 'CustomizableDropDownOption' | 'CustomizableFieldOption' | 'CustomizableFileOption' | 'CustomizableMultipleOption' | 'CustomizableRadioOption', ParentType, ContextType>;
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type CustomizableProductInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableProductInterface'] = ResolversParentTypes['CustomizableProductInterface']> = {
  __resolveType: TypeResolveFn<'BundleProduct' | 'ConfigurableProduct' | 'DownloadableProduct' | 'SimpleProduct' | 'VirtualProduct', ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
};

export type CustomizableRadioOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableRadioOption'] = ResolversParentTypes['CustomizableRadioOption']> = {
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableRadioValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomizableRadioValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CustomizableRadioValue'] = ResolversParentTypes['CustomizableRadioValue']> = {
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteCompareListOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteCompareListOutput'] = ResolversParentTypes['DeleteCompareListOutput']> = {
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeletePaymentTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePaymentTokenOutput'] = ResolversParentTypes['DeletePaymentTokenOutput']> = {
  customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DetailedSummaryResolvers<ContextType = any, ParentType extends ResolversParentTypes['DetailedSummary'] = ResolversParentTypes['DetailedSummary']> = {
  five?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  four?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  one?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  three?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  two?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DiscountResolvers<ContextType = any, ParentType extends ResolversParentTypes['Discount'] = ResolversParentTypes['Discount']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  applied_to?: Resolver<ResolversTypes['CartDiscountType'], ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['AppliedCoupon']>, ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableCartItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableCartItem'] = ResolversParentTypes['DownloadableCartItem']> = {
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableCreditMemoItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableCreditMemoItem'] = ResolversParentTypes['DownloadableCreditMemoItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableInvoiceItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableInvoiceItem'] = ResolversParentTypes['DownloadableInvoiceItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableItemsLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableItemsLinks'] = ResolversParentTypes['DownloadableItemsLinks']> = {
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableOrderItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableOrderItem'] = ResolversParentTypes['DownloadableOrderItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  product_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableProduct'] = ResolversParentTypes['DownloadableProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<DownloadableProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  downloadable_product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  downloadable_product_samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  links_purchased_separately?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  links_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<DownloadableProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableProductLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableProductLinks'] = ResolversParentTypes['DownloadableProductLinks']> = {
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_shareable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  number_of_downloads?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableProductSamplesResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableProductSamples'] = ResolversParentTypes['DownloadableProductSamples']> = {
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DownloadableWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['DownloadableWishlistItem'] = ResolversParentTypes['DownloadableWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  links_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmiratesResolvers<ContextType = any, ParentType extends ResolversParentTypes['Emirates'] = ResolversParentTypes['Emirates']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<Array<Maybe<ResolversTypes['Region']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EntityUrlResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntityUrl'] = ResolversParentTypes['EntityUrl']> = {
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  redirectCode?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ErrorInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ErrorInterface'] = ResolversParentTypes['ErrorInterface']> = {
  __resolveType: TypeResolveFn<'InternalError' | 'NoSuchEntityUidError', ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type EstimateTotalsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['EstimateTotalsOutput'] = ResolversParentTypes['EstimateTotalsOutput']> = {
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExchangeRateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExchangeRate'] = ResolversParentTypes['ExchangeRate']> = {
  currency_to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExcludedPagesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExcludedPages'] = ResolversParentTypes['ExcludedPages']> = {
  identifire?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FacetDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['FacetData'] = ResolversParentTypes['FacetData']> = {
  attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  total_values?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['FacetValues']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FacetValuesResolvers<ContextType = any, ParentType extends ResolversParentTypes['FacetValues'] = ResolversParentTypes['FacetValues']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeaturedBrandsBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeaturedBrandsBlock'] = ResolversParentTypes['FeaturedBrandsBlock']> = {
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  featured_brands?: Resolver<Maybe<Array<Maybe<ResolversTypes['BrandData']>>>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FixedProductTaxResolvers<ContextType = any, ParentType extends ResolversParentTypes['FixedProductTax'] = ResolversParentTypes['FixedProductTax']> = {
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FooterMenuResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterMenu'] = ResolversParentTypes['FooterMenu']> = {
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['MenuLink']>>>, ParentType, ContextType>;
  usefulLinks?: Resolver<Maybe<Array<Maybe<ResolversTypes['MenuLink']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GtmCodeOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['GTMCodeOutput'] = ResolversParentTypes['GTMCodeOutput']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GtmHeadOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['GTMHeadOutput'] = ResolversParentTypes['GTMHeadOutput']> = {
  head?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GeneralResolvers<ContextType = any, ParentType extends ResolversParentTypes['General'] = ResolversParentTypes['General']> = {
  display_author?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  display_style?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  font_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  toplinks?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GeneralConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['GeneralConfig'] = ResolversParentTypes['GeneralConfig']> = {
  admin_api_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cloud_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collections?: Resolver<Maybe<Array<Maybe<ResolversTypes['Collections']>>>, ParentType, ContextType>;
  index_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  module_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nearest_node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  port?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  protocol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  search_api_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GenerateCustomerTokenAsAdminOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['GenerateCustomerTokenAsAdminOutput'] = ResolversParentTypes['GenerateCustomerTokenAsAdminOutput']> = {
  customer_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GetPaymentSdkOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['GetPaymentSDKOutput'] = ResolversParentTypes['GetPaymentSDKOutput']> = {
  sdkParams?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentSDKParamsItem']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GiftMessageResolvers<ContextType = any, ParentType extends ResolversParentTypes['GiftMessage'] = ResolversParentTypes['GiftMessage']> = {
  from?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GooglePayButtonStylesResolvers<ContextType = any, ParentType extends ResolversParentTypes['GooglePayButtonStyles'] = ResolversParentTypes['GooglePayButtonStyles']> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GooglePayConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['GooglePayConfig'] = ResolversParentTypes['GooglePayConfig']> = {
  button_styles?: Resolver<Maybe<ResolversTypes['GooglePayButtonStyles']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  three_ds_mode?: Resolver<Maybe<ResolversTypes['ThreeDSMode']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupedProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupedProduct'] = ResolversParentTypes['GroupedProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<GroupedProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['GroupedProductItem']>>>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<GroupedProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupedProductItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupedProductItem'] = ResolversParentTypes['GroupedProductItem']> = {
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupedProductWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupedProductWishlistItem'] = ResolversParentTypes['GroupedProductWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HeaderMenuResolvers<ContextType = any, ParentType extends ResolversParentTypes['HeaderMenu'] = ResolversParentTypes['HeaderMenu']> = {
  menuItems?: Resolver<Maybe<Array<Maybe<ResolversTypes['MenuLink']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePage'] = ResolversParentTypes['HomePage']> = {
  blocks?: Resolver<Maybe<ResolversTypes['Blocks']>, ParentType, ContextType, RequireFields<HomePageBlocksArgs, 'currentPage' | 'pageSize'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HostedFieldsConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['HostedFieldsConfig'] = ResolversParentTypes['HostedFieldsConfig']> = {
  cc_vault_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_vault_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  requires_card_details?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  three_ds?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  three_ds_mode?: Resolver<Maybe<ResolversTypes['ThreeDSMode']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HostedProUrlResolvers<ContextType = any, ParentType extends ResolversParentTypes['HostedProUrl'] = ResolversParentTypes['HostedProUrl']> = {
  secure_form_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HotRequestOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['HotRequestOutput'] = ResolversParentTypes['HotRequestOutput']> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HttpQueryParameterResolvers<ContextType = any, ParentType extends ResolversParentTypes['HttpQueryParameter'] = ResolversParentTypes['HttpQueryParameter']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IconResolvers<ContextType = any, ParentType extends ResolversParentTypes['Icon'] = ResolversParentTypes['Icon']> = {
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ImageSwatchDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ImageSwatchData'] = ResolversParentTypes['ImageSwatchData']> = {
  thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ImagesResolvers<ContextType = any, ParentType extends ResolversParentTypes['Images'] = ResolversParentTypes['Images']> = {
  full_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  resized_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InternalErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['InternalError'] = ResolversParentTypes['InternalError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvoiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Invoice'] = ResolversParentTypes['Invoice']> = {
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['InvoiceTotal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvoiceItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvoiceItem'] = ResolversParentTypes['InvoiceItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvoiceItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvoiceItemInterface'] = ResolversParentTypes['InvoiceItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleInvoiceItem' | 'DownloadableInvoiceItem' | 'InvoiceItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
};

export type InvoiceTotalResolvers<ContextType = any, ParentType extends ResolversParentTypes['InvoiceTotal'] = ResolversParentTypes['InvoiceTotal']> = {
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IsEmailAvailableOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['IsEmailAvailableOutput'] = ResolversParentTypes['IsEmailAvailableOutput']> = {
  is_email_available?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ItemSelectedBundleOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ItemSelectedBundleOption'] = ResolversParentTypes['ItemSelectedBundleOption']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOptionValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ItemSelectedBundleOptionValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ItemSelectedBundleOptionValue'] = ResolversParentTypes['ItemSelectedBundleOptionValue']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Items'] = ResolversParentTypes['Items']> = {
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type KeyValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['KeyValue'] = ResolversParentTypes['KeyValue']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LabelRulesResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabelRules'] = ResolversParentTypes['LabelRules']> = {
  bestseller?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  conditions_serialized?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_group_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_css?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_font?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_font_size?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_position_grid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label_template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  limit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_css?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_font?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_font_size?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_position_grid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rule_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  same?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stop_process?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LabelRulesOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabelRulesOutput'] = ResolversParentTypes['LabelRulesOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LatLngResolvers<ContextType = any, ParentType extends ResolversParentTypes['LatLng'] = ResolversParentTypes['LatLng']> = {
  latitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LayerFilterResolvers<ContextType = any, ParentType extends ResolversParentTypes['LayerFilter'] = ResolversParentTypes['LayerFilter']> = {
  filter_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilterItemInterface']>>>, ParentType, ContextType>;
  filter_items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  request_var?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LayerFilterItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['LayerFilterItem'] = ResolversParentTypes['LayerFilterItem']> = {
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LayerFilterItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['LayerFilterItemInterface'] = ResolversParentTypes['LayerFilterItemInterface']> = {
  __resolveType: TypeResolveFn<'LayerFilterItem' | 'SwatchLayerFilterItem', ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type LikesOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['LikesOutput'] = ResolversParentTypes['LikesOutput']> = {
  total?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LinkItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['LinkItems'] = ResolversParentTypes['LinkItems']> = {
  category_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  external_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  open_tab?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  page_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MapAreaResolvers<ContextType = any, ParentType extends ResolversParentTypes['MapArea'] = ResolversParentTypes['MapArea']> = {
  coords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link_info?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  toolTip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MapPinAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['MapPinAddress'] = ResolversParentTypes['MapPinAddress']> = {
  latitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MappedImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['MappedImage'] = ResolversParentTypes['MappedImage']> = {
  area?: Resolver<Maybe<Array<Maybe<ResolversTypes['MapArea']>>>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postion?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaGalleryEntryResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaGalleryEntry'] = ResolversParentTypes['MediaGalleryEntry']> = {
  content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesContent']>, ParentType, ContextType>;
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  types?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MediaGalleryInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaGalleryInterface'] = ResolversParentTypes['MediaGalleryInterface']> = {
  __resolveType: TypeResolveFn<'ProductImage' | 'ProductVideo', ParentType, ContextType>;
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type MegamenuResolvers<ContextType = any, ParentType extends ResolversParentTypes['Megamenu'] = ResolversParentTypes['Megamenu']> = {
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MenuResolvers<ContextType = any, ParentType extends ResolversParentTypes['Menu'] = ResolversParentTypes['Menu']> = {
  footerMenu?: Resolver<Maybe<ResolversTypes['FooterMenu']>, ParentType, ContextType>;
  headerMenu?: Resolver<Maybe<ResolversTypes['HeaderMenu']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MenuLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['MenuLink'] = ResolversParentTypes['MenuLink']> = {
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageStyleLogoResolvers<ContextType = any, ParentType extends ResolversParentTypes['MessageStyleLogo'] = ResolversParentTypes['MessageStyleLogo']> = {
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageStylesResolvers<ContextType = any, ParentType extends ResolversParentTypes['MessageStyles'] = ResolversParentTypes['MessageStyles']> = {
  layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['MessageStyleLogo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MobileCreateCustomerAccountOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MobileCreateCustomerAccountOutput'] = ResolversParentTypes['MobileCreateCustomerAccountOutput']> = {
  customer?: Resolver<ResolversTypes['Customer'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MoneyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Money'] = ResolversParentTypes['Money']> = {
  currency?: Resolver<Maybe<ResolversTypes['CurrencyEnum']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MonthlyArchiveResolvers<ContextType = any, ParentType extends ResolversParentTypes['MonthlyArchive'] = ResolversParentTypes['MonthlyArchive']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Post']>>>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MonthlyArchiveOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MonthlyArchiveOutput'] = ResolversParentTypes['MonthlyArchiveOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['MonthlyArchive']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardCustomersOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardCustomersOutput'] = ResolversParentTypes['MpRewardCustomersOutput']> = {
  balance_limitation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  current_exchange_rates?: Resolver<Maybe<ResolversTypes['RewardExchangeRate']>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  earn_point_expire?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invitations?: Resolver<Maybe<ResolversTypes['MpRewardInvitationsOutput']>, ParentType, ContextType, RequireFields<MpRewardCustomersOutputInvitationsArgs, 'currentPage' | 'pageSize'>>;
  notification_expire?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notification_update?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  point_balance?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  point_earned?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  point_spent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  refer_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reward_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['MpRewardTransactionsListOutput']>, ParentType, ContextType, RequireFields<MpRewardCustomersOutputTransactionsArgs, 'currentPage' | 'pageSize'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardInvitationsResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardInvitations'] = ResolversParentTypes['MpRewardInvitations']> = {
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invitation_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  invited_discount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  invited_earn?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  invited_email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  referral_earn?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  referral_email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardInvitationsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardInvitationsOutput'] = ResolversParentTypes['MpRewardInvitationsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['MpRewardInvitations']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardPointsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardPointsOutput'] = ResolversParentTypes['MpRewardPointsOutput']> = {
  discount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  earn?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  spent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardRateOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardRateOutput'] = ResolversParentTypes['MpRewardRateOutput']> = {
  customer_group_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  direction?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  money?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  points?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rate_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  website_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardTransactionsListOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardTransactionsListOutput'] = ResolversParentTypes['MpRewardTransactionsListOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['MpRewardTransactionsOutput']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MpRewardTransactionsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['MpRewardTransactionsOutput'] = ResolversParentTypes['MpRewardTransactionsOutput']> = {
  action_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  action_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expiration_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expire_email_sent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  point_amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  point_remaining?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  point_used?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reward_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  transaction_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  MpRewardInvite?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationMpRewardInviteArgs, 'emails' | 'message' | 'send_from'>>;
  MpRewardRefer?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationMpRewardReferArgs, 'refer_code'>>;
  MpRewardSpendingPoint?: Resolver<Maybe<Array<Maybe<ResolversTypes['TotalSegmentsOutput']>>>, ParentType, ContextType, RequireFields<MutationMpRewardSpendingPointArgs, 'address_information' | 'cart_id' | 'points' | 'rule_id'>>;
  MpRewardSubscribe?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationMpRewardSubscribeArgs, 'input'>>;
  addAdvComment?: Resolver<Maybe<ResolversTypes['AddAdvCommentOutput']>, ParentType, ContextType, Partial<MutationAddAdvCommentArgs>>;
  addAdvProductReview?: Resolver<Maybe<ResolversTypes['AddAdvProductReviewOutput']>, ParentType, ContextType, Partial<MutationAddAdvProductReviewArgs>>;
  addAdvReview?: Resolver<Maybe<ResolversTypes['AddAdvReviewOutput']>, ParentType, ContextType, Partial<MutationAddAdvReviewArgs>>;
  addAdvVote?: Resolver<Maybe<ResolversTypes['AddAdvVoteOutput']>, ParentType, ContextType, Partial<MutationAddAdvVoteArgs>>;
  addBundleProductsToCart?: Resolver<Maybe<ResolversTypes['AddBundleProductsToCartOutput']>, ParentType, ContextType, Partial<MutationAddBundleProductsToCartArgs>>;
  addConfigurableProductsToCart?: Resolver<Maybe<ResolversTypes['AddConfigurableProductsToCartOutput']>, ParentType, ContextType, Partial<MutationAddConfigurableProductsToCartArgs>>;
  addDownloadableProductsToCart?: Resolver<Maybe<ResolversTypes['AddDownloadableProductsToCartOutput']>, ParentType, ContextType, Partial<MutationAddDownloadableProductsToCartArgs>>;
  addGuestEmailToAbandonCart?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, Partial<MutationAddGuestEmailToAbandonCartArgs>>;
  addMobiletoAbandonedcart?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, Partial<MutationAddMobiletoAbandonedcartArgs>>;
  addProductsToCart?: Resolver<Maybe<ResolversTypes['AddProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationAddProductsToCartArgs, 'cartId' | 'cartItems'>>;
  addProductsToCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationAddProductsToCompareListArgs>>;
  addProductsToWishlist?: Resolver<Maybe<ResolversTypes['AddProductsToWishlistOutput']>, ParentType, ContextType, RequireFields<MutationAddProductsToWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
  addSimpleProductsToCart?: Resolver<Maybe<ResolversTypes['AddSimpleProductsToCartOutput']>, ParentType, ContextType, Partial<MutationAddSimpleProductsToCartArgs>>;
  addVirtualProductsToCart?: Resolver<Maybe<ResolversTypes['AddVirtualProductsToCartOutput']>, ParentType, ContextType, Partial<MutationAddVirtualProductsToCartArgs>>;
  addWishlistItemsToCart?: Resolver<Maybe<ResolversTypes['AddWishlistItemsToCartOutput']>, ParentType, ContextType, RequireFields<MutationAddWishlistItemsToCartArgs, 'wishlistId'>>;
  applyCouponToCart?: Resolver<Maybe<ResolversTypes['ApplyCouponToCartOutput']>, ParentType, ContextType, Partial<MutationApplyCouponToCartArgs>>;
  assignCompareListToCustomer?: Resolver<Maybe<ResolversTypes['AssignCompareListToCustomerOutput']>, ParentType, ContextType, RequireFields<MutationAssignCompareListToCustomerArgs, 'uid'>>;
  assignCustomerToGuestCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationAssignCustomerToGuestCartArgs, 'cart_id'>>;
  cancelOrder?: Resolver<Maybe<ResolversTypes['CancelOrderOutput']>, ParentType, ContextType, RequireFields<MutationCancelOrderArgs, 'input'>>;
  changeCustomerPassword?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType, RequireFields<MutationChangeCustomerPasswordArgs, 'currentPassword' | 'newPassword'>>;
  confirmAccount?: Resolver<Maybe<ResolversTypes['ConfirmAccountOutput']>, ParentType, ContextType, RequireFields<MutationConfirmAccountArgs, 'id' | 'token'>>;
  confirmEmail?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationConfirmEmailArgs, 'input'>>;
  contactUs?: Resolver<Maybe<ResolversTypes['ContactUsOutput']>, ParentType, ContextType, RequireFields<MutationContactUsArgs, 'input'>>;
  createAboutUs?: Resolver<Maybe<ResolversTypes['AboutUsOutput']>, ParentType, ContextType, RequireFields<MutationCreateAboutUsArgs, 'email' | 'message' | 'mobile' | 'name'>>;
  createAccountOTP?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationCreateAccountOtpArgs, 'websiteId'>>;
  createAccountOTPVerify?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationCreateAccountOtpVerifyArgs, 'websiteId'>>;
  createBraintreeClientToken?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createBraintreePayPalClientToken?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createBraintreePayPalVaultClientToken?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<MutationCreateBraintreePayPalVaultClientTokenArgs>>;
  createBulkOrder?: Resolver<Maybe<ResolversTypes['BulkOrderOutput']>, ParentType, ContextType, RequireFields<MutationCreateBulkOrderArgs, 'customer_name' | 'email' | 'message' | 'mobile' | 'product_id' | 'quantity'>>;
  createCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationCreateCompareListArgs>>;
  createContactUs?: Resolver<Maybe<ResolversTypes['ContactUsOutput']>, ParentType, ContextType, RequireFields<MutationCreateContactUsArgs, 'email' | 'firstName' | 'lastName' | 'message' | 'mobile'>>;
  createCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationCreateCustomerArgs, 'input'>>;
  createCustomerAccount?: Resolver<Maybe<ResolversTypes['MobileCreateCustomerAccountOutput']>, ParentType, ContextType, RequireFields<MutationCreateCustomerAccountArgs, 'input' | 'websiteId'>>;
  createCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationCreateCustomerAddressArgs, 'input'>>;
  createCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationCreateCustomerV2Args, 'input'>>;
  createEmptyCart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<MutationCreateEmptyCartArgs>>;
  createGuestCart?: Resolver<Maybe<ResolversTypes['CreateGuestCartOutput']>, ParentType, ContextType, Partial<MutationCreateGuestCartArgs>>;
  createHotRequest?: Resolver<Maybe<ResolversTypes['HotRequestOutput']>, ParentType, ContextType, RequireFields<MutationCreateHotRequestArgs, 'email' | 'firstName' | 'furnitureType' | 'lastName' | 'mobile'>>;
  createPayflowProToken?: Resolver<Maybe<ResolversTypes['CreatePayflowProTokenOutput']>, ParentType, ContextType, RequireFields<MutationCreatePayflowProTokenArgs, 'input'>>;
  createPaymentOrder?: Resolver<Maybe<ResolversTypes['CreatePaymentOrderOutput']>, ParentType, ContextType, RequireFields<MutationCreatePaymentOrderArgs, 'input'>>;
  createPaypalExpressToken?: Resolver<Maybe<ResolversTypes['PaypalExpressTokenOutput']>, ParentType, ContextType, RequireFields<MutationCreatePaypalExpressTokenArgs, 'input'>>;
  createProductReview?: Resolver<ResolversTypes['CreateProductReviewOutput'], ParentType, ContextType, RequireFields<MutationCreateProductReviewArgs, 'input'>>;
  createVaultCardPaymentToken?: Resolver<Maybe<ResolversTypes['CreateVaultCardPaymentTokenOutput']>, ParentType, ContextType, RequireFields<MutationCreateVaultCardPaymentTokenArgs, 'input'>>;
  createVaultCardSetupToken?: Resolver<Maybe<ResolversTypes['CreateVaultCardSetupTokenOutput']>, ParentType, ContextType, RequireFields<MutationCreateVaultCardSetupTokenArgs, 'input'>>;
  createWholesalerAccount?: Resolver<Maybe<ResolversTypes['WholeSalerCustomerAccountOutput']>, ParentType, ContextType, RequireFields<MutationCreateWholesalerAccountArgs, 'companyName' | 'customerProof' | 'input' | 'licenceNumber' | 'mobileNumber' | 'websiteId'>>;
  deleteCompareList?: Resolver<Maybe<ResolversTypes['DeleteCompareListOutput']>, ParentType, ContextType, RequireFields<MutationDeleteCompareListArgs, 'uid'>>;
  deleteCustomer?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  deleteCustomerAddress?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationDeleteCustomerAddressArgs, 'id'>>;
  deletePaymentToken?: Resolver<Maybe<ResolversTypes['DeletePaymentTokenOutput']>, ParentType, ContextType, RequireFields<MutationDeletePaymentTokenArgs, 'public_hash'>>;
  estimateShippingMethods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailableShippingMethod']>>>, ParentType, ContextType, RequireFields<MutationEstimateShippingMethodsArgs, 'input'>>;
  estimateTotals?: Resolver<ResolversTypes['EstimateTotalsOutput'], ParentType, ContextType, RequireFields<MutationEstimateTotalsArgs, 'input'>>;
  forgotPassworOTP?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationForgotPassworOtpArgs, 'websiteId'>>;
  forgotPassworOTPVerify?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationForgotPassworOtpVerifyArgs, 'websiteId'>>;
  generateAndSendOtp?: Resolver<Maybe<ResolversTypes['OtpRequestOutput']>, ParentType, ContextType, Partial<MutationGenerateAndSendOtpArgs>>;
  generateCustomerToken?: Resolver<Maybe<ResolversTypes['CustomerToken']>, ParentType, ContextType, RequireFields<MutationGenerateCustomerTokenArgs, 'email' | 'password'>>;
  generateCustomerTokenAsAdmin?: Resolver<Maybe<ResolversTypes['GenerateCustomerTokenAsAdminOutput']>, ParentType, ContextType, RequireFields<MutationGenerateCustomerTokenAsAdminArgs, 'input'>>;
  handlePayflowProResponse?: Resolver<Maybe<ResolversTypes['PayflowProResponseOutput']>, ParentType, ContextType, RequireFields<MutationHandlePayflowProResponseArgs, 'input'>>;
  login?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationLoginArgs, 'websiteId'>>;
  loginOTP?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationLoginOtpArgs, 'websiteId'>>;
  loginOTPVerify?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationLoginOtpVerifyArgs, 'websiteId'>>;
  mergeCarts?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationMergeCartsArgs, 'source_cart_id'>>;
  orderNotes?: Resolver<Maybe<ResolversTypes['OrderNoteOutput']>, ParentType, ContextType, RequireFields<MutationOrderNotesArgs, 'input'>>;
  placeOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, Partial<MutationPlaceOrderArgs>>;
  postCustomerFeedback?: Resolver<Maybe<ResolversTypes['CustomerFeedbackOutput']>, ParentType, ContextType, RequireFields<MutationPostCustomerFeedbackArgs, 'input'>>;
  productAlertSubscribe?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationProductAlertSubscribeArgs, 'sku' | 'type'>>;
  productAlertUnsubscribe?: Resolver<Maybe<ResolversTypes['ProductAlertUnsubscribeOutput']>, ParentType, ContextType, RequireFields<MutationProductAlertUnsubscribeArgs, 'type'>>;
  removeCouponFromCart?: Resolver<Maybe<ResolversTypes['RemoveCouponFromCartOutput']>, ParentType, ContextType, Partial<MutationRemoveCouponFromCartArgs>>;
  removeItemFromCart?: Resolver<Maybe<ResolversTypes['RemoveItemFromCartOutput']>, ParentType, ContextType, Partial<MutationRemoveItemFromCartArgs>>;
  removeProductsFromCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationRemoveProductsFromCompareListArgs>>;
  removeProductsFromWishlist?: Resolver<Maybe<ResolversTypes['RemoveProductsFromWishlistOutput']>, ParentType, ContextType, RequireFields<MutationRemoveProductsFromWishlistArgs, 'wishlistId' | 'wishlistItemsIds'>>;
  reorderItems?: Resolver<Maybe<ResolversTypes['ReorderItemsOutput']>, ParentType, ContextType, RequireFields<MutationReorderItemsArgs, 'orderNumber'>>;
  requestPasswordResetEmail?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationRequestPasswordResetEmailArgs, 'email'>>;
  resetPassword?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationResetPasswordArgs, 'email' | 'newPassword' | 'resetPasswordToken'>>;
  resetPasswordOtp?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationResetPasswordOtpArgs, 'websiteId'>>;
  revokeCustomerToken?: Resolver<Maybe<ResolversTypes['RevokeCustomerTokenOutput']>, ParentType, ContextType>;
  sendEmailToFriend?: Resolver<Maybe<ResolversTypes['SendEmailToFriendOutput']>, ParentType, ContextType, Partial<MutationSendEmailToFriendArgs>>;
  setBillingAddressOnCart?: Resolver<Maybe<ResolversTypes['SetBillingAddressOnCartOutput']>, ParentType, ContextType, Partial<MutationSetBillingAddressOnCartArgs>>;
  setGuestEmailOnCart?: Resolver<Maybe<ResolversTypes['SetGuestEmailOnCartOutput']>, ParentType, ContextType, Partial<MutationSetGuestEmailOnCartArgs>>;
  setPaymentMethodAndPlaceOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, Partial<MutationSetPaymentMethodAndPlaceOrderArgs>>;
  setPaymentMethodOnCart?: Resolver<Maybe<ResolversTypes['SetPaymentMethodOnCartOutput']>, ParentType, ContextType, Partial<MutationSetPaymentMethodOnCartArgs>>;
  setProductViewReport?: Resolver<Maybe<ResolversTypes['ProductViewReportOutput']>, ParentType, ContextType, RequireFields<MutationSetProductViewReportArgs, 'sku'>>;
  setShippingAddressesOnCart?: Resolver<Maybe<ResolversTypes['SetShippingAddressesOnCartOutput']>, ParentType, ContextType, Partial<MutationSetShippingAddressesOnCartArgs>>;
  setShippingMethodsOnCart?: Resolver<Maybe<ResolversTypes['SetShippingMethodsOnCartOutput']>, ParentType, ContextType, Partial<MutationSetShippingMethodsOnCartArgs>>;
  subscribeEmailToNewsletter?: Resolver<Maybe<ResolversTypes['SubscribeEmailToNewsletterOutput']>, ParentType, ContextType, RequireFields<MutationSubscribeEmailToNewsletterArgs, 'email'>>;
  syncPayfortInfo?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationSyncPayfortInfoArgs, 'orderId' | 'response'>>;
  syncPaymentOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<MutationSyncPaymentOrderArgs>>;
  updateCartItems?: Resolver<Maybe<ResolversTypes['UpdateCartItemsOutput']>, ParentType, ContextType, Partial<MutationUpdateCartItemsArgs>>;
  updateCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationUpdateCustomerArgs, 'input'>>;
  updateCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationUpdateCustomerAddressArgs, 'id'>>;
  updateCustomerEmail?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationUpdateCustomerEmailArgs, 'email' | 'password'>>;
  updateCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationUpdateCustomerV2Args, 'input'>>;
  updateMobileNumberOTPVerify?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationUpdateMobileNumberOtpVerifyArgs, 'websiteId'>>;
  updateMobilenumber?: Resolver<Maybe<ResolversTypes['Response']>, ParentType, ContextType, RequireFields<MutationUpdateMobilenumberArgs, 'websiteId'>>;
  updateProductsInWishlist?: Resolver<Maybe<ResolversTypes['UpdateProductsInWishlistOutput']>, ParentType, ContextType, RequireFields<MutationUpdateProductsInWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
};

export type NoSuchEntityUidErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['NoSuchEntityUidError'] = ResolversParentTypes['NoSuchEntityUidError']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderResolvers<ContextType = any, ParentType extends ResolversParentTypes['Order'] = ResolversParentTypes['Order']> = {
  order_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderAddress'] = ResolversParentTypes['OrderAddress']> = {
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderItem'] = ResolversParentTypes['OrderItem']> = {
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  product_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderItemInterface'] = ResolversParentTypes['OrderItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleOrderItem' | 'DownloadableOrderItem' | 'OrderItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  product_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type OrderItemOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderItemOption'] = ResolversParentTypes['OrderItemOption']> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderNoteOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderNoteOutput'] = ResolversParentTypes['OrderNoteOutput']> = {
  order_note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderPaymentMethodResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderPaymentMethod'] = ResolversParentTypes['OrderPaymentMethod']> = {
  additional_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['KeyValue']>>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderRecord'] = ResolversParentTypes['OrderRecord']> = {
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shipping_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderShipmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderShipment'] = ResolversParentTypes['OrderShipment']> = {
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tracking?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentTracking']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderTotalResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderTotal'] = ResolversParentTypes['OrderTotal']> = {
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  mp_reward_points?: Resolver<Maybe<ResolversTypes['MpRewardPointsOutput']>, ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OtpRequestOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['OtpRequestOutput'] = ResolversParentTypes['OtpRequestOutput']> = {
  response?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  currentPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  endPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  hasNextPage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  hasPreviousPage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  startPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PayflowLinkTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['PayflowLinkToken'] = ResolversParentTypes['PayflowLinkToken']> = {
  mode?: Resolver<Maybe<ResolversTypes['PayflowLinkMode']>, ParentType, ContextType>;
  paypal_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_token_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PayflowProResponseOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PayflowProResponseOutput'] = ResolversParentTypes['PayflowProResponseOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PayflowProTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['PayflowProToken'] = ResolversParentTypes['PayflowProToken']> = {
  response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentCommonConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentCommonConfig'] = ResolversParentTypes['PaymentCommonConfig']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentConfigItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentConfigItem'] = ResolversParentTypes['PaymentConfigItem']> = {
  __resolveType: TypeResolveFn<'ApplePayConfig' | 'GooglePayConfig' | 'HostedFieldsConfig' | 'PaymentCommonConfig' | 'SmartButtonsConfig', ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type PaymentConfigOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentConfigOutput'] = ResolversParentTypes['PaymentConfigOutput']> = {
  apple_pay?: Resolver<Maybe<ResolversTypes['ApplePayConfig']>, ParentType, ContextType>;
  google_pay?: Resolver<Maybe<ResolversTypes['GooglePayConfig']>, ParentType, ContextType>;
  hosted_fields?: Resolver<Maybe<ResolversTypes['HostedFieldsConfig']>, ParentType, ContextType>;
  smart_buttons?: Resolver<Maybe<ResolversTypes['SmartButtonsConfig']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentOrderOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentOrderOutput'] = ResolversParentTypes['PaymentOrderOutput']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_order_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_source_details?: Resolver<Maybe<ResolversTypes['PaymentSourceDetails']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentSdkParamsItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentSDKParamsItem'] = ResolversParentTypes['PaymentSDKParamsItem']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentSourceDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentSourceDetails'] = ResolversParentTypes['PaymentSourceDetails']> = {
  card?: Resolver<Maybe<ResolversTypes['Card']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentSourceOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentSourceOutput'] = ResolversParentTypes['PaymentSourceOutput']> = {
  card?: Resolver<ResolversTypes['CardPaymentSourceOutput'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentToken'] = ResolversParentTypes['PaymentToken']> = {
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  public_hash?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['PaymentTokenTypeEnum'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaypalExpressTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaypalExpressToken'] = ResolversParentTypes['PaypalExpressToken']> = {
  paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaypalExpressTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaypalExpressTokenOutput'] = ResolversParentTypes['PaypalExpressTokenOutput']> = {
  paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaypalExpressUrlListResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaypalExpressUrlList'] = ResolversParentTypes['PaypalExpressUrlList']> = {
  edit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PhysicalProductInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['PhysicalProductInterface'] = ResolversParentTypes['PhysicalProductInterface']> = {
  __resolveType: TypeResolveFn<'BundleProduct' | 'ConfigurableProduct' | 'GroupedProduct' | 'SimpleProduct', ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
};

export type PickupLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['PickupLocation'] = ResolversParentTypes['PickupLocation']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contact_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PickupLocationsResolvers<ContextType = any, ParentType extends ResolversParentTypes['PickupLocations'] = ResolversParentTypes['PickupLocations']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['PickupLocation']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PlaceOrderErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['PlaceOrderError'] = ResolversParentTypes['PlaceOrderError']> = {
  code?: Resolver<ResolversTypes['PlaceOrderErrorCodes'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PlaceOrderOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PlaceOrderOutput'] = ResolversParentTypes['PlaceOrderOutput']> = {
  errors?: Resolver<Array<Maybe<ResolversTypes['PlaceOrderError']>>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType>;
  orderV2?: Resolver<Maybe<ResolversTypes['CustomerOrder']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PopUpResolvers<ContextType = any, ParentType extends ResolversParentTypes['PopUp'] = ResolversParentTypes['PopUp']> = {
  block_identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  click_url?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  end_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  popup_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  popup_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  start_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResolvers<ContextType = any, ParentType extends ResolversParentTypes['Post'] = ResolversParentTypes['Post']> = {
  allow_comment?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  author_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  author_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  author_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<ResolversTypes['CategoriesOutputNoPage']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  import_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  in_rss?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_robots?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsOutputNoPage']>, ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['ProductsOutputNoPage']>, ParentType, ContextType>;
  publish_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<ResolversTypes['TagsOutputNoPage']>, ParentType, ContextType>;
  topics?: Resolver<Maybe<ResolversTypes['TopicsOutputNoPage']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  view_traffic?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsOutput'] = ResolversParentTypes['PostsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Post']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostsOutputNoPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsOutputNoPage'] = ResolversParentTypes['PostsOutputNoPage']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Post']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Price'] = ResolversParentTypes['Price']> = {
  adjustments?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceAdjustment']>>>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceAdjustmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceAdjustment'] = ResolversParentTypes['PriceAdjustment']> = {
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['PriceAdjustmentCodesEnum']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['PriceAdjustmentDescriptionEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceDetails'] = ResolversParentTypes['PriceDetails']> = {
  discount_percentage?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  main_final_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  main_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PriceRangeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PriceRange'] = ResolversParentTypes['PriceRange']> = {
  maximum_price?: Resolver<Maybe<ResolversTypes['ProductPrice']>, ParentType, ContextType>;
  minimum_price?: Resolver<ResolversTypes['ProductPrice'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['Product'] = ResolversParentTypes['Product']> = {
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  has_options?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  images?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  required_options?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductAlertUnsubscribeOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductAlertUnsubscribeOutput'] = ResolversParentTypes['ProductAlertUnsubscribeOutput']> = {
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductAttributeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductAttribute'] = ResolversParentTypes['ProductAttribute']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductBlock'] = ResolversParentTypes['ProductBlock']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  display_style?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  viewall_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductConfig'] = ResolversParentTypes['ProductConfig']> = {
  ranking?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  search_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['SearchAttributes']>>>, ParentType, ContextType>;
  show_price?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  show_sku?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductCustomAttributesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductCustomAttributes'] = ResolversParentTypes['ProductCustomAttributes']> = {
  errors?: Resolver<Array<Maybe<ResolversTypes['AttributeMetadataError']>>, ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['AttributeValueInterface']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductDiscountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductDiscount'] = ResolversParentTypes['ProductDiscount']> = {
  amount_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  percent_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductImage'] = ResolversParentTypes['ProductImage']> = {
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductInterface'] = ResolversParentTypes['ProductInterface']> = {
  __resolveType: TypeResolveFn<'BundleProduct' | 'ConfigurableProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'SimpleProduct' | 'VirtualProduct', ParentType, ContextType>;
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<ProductInterfaceCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ProductInterfaceReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
};

export type ProductInventoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductInventory'] = ResolversParentTypes['ProductInventory']> = {
  enable_qty_increments?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_qty_decimal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  max_sale_qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  min_sale_qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  qty_increments?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductItems'] = ResolversParentTypes['ProductItems']> = {
  price?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductLinks'] = ResolversParentTypes['ProductLinks']> = {
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductLinksInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductLinksInterface'] = ResolversParentTypes['ProductLinksInterface']> = {
  __resolveType: TypeResolveFn<'ProductLinks', ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type ProductMediaGalleryEntriesContentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesContent'] = ResolversParentTypes['ProductMediaGalleryEntriesContent']> = {
  base64_encoded_data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductMediaGalleryEntriesVideoContentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesVideoContent'] = ResolversParentTypes['ProductMediaGalleryEntriesVideoContent']> = {
  media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_metadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_provider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductPriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductPrice'] = ResolversParentTypes['ProductPrice']> = {
  discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
  final_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  fixed_product_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FixedProductTax']>>>, ParentType, ContextType>;
  regular_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductPricesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductPrices'] = ResolversParentTypes['ProductPrices']> = {
  maximalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  minimalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  regularPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReview'] = ResolversParentTypes['ProductReview']> = {
  average_rating?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  created_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nickname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  ratings_breakdown?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRating']>>, ParentType, ContextType>;
  summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewRatingResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReviewRating'] = ResolversParentTypes['ProductReviewRating']> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewRatingMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReviewRatingMetadata'] = ResolversParentTypes['ProductReviewRatingMetadata']> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingValueMetadata']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewRatingValueMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReviewRatingValueMetadata'] = ResolversParentTypes['ProductReviewRatingValueMetadata']> = {
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewRatingsMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReviewRatingsMetadata'] = ResolversParentTypes['ProductReviewRatingsMetadata']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingMetadata']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductReviewsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductReviews'] = ResolversParentTypes['ProductReviews']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['ProductReview']>>, ParentType, ContextType>;
  page_info?: Resolver<ResolversTypes['SearchResultPageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductTierPricesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductTierPrices'] = ResolversParentTypes['ProductTierPrices']> = {
  customer_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  percentage_value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  website_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductVideoResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductVideo'] = ResolversParentTypes['ProductVideo']> = {
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
  video_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  video_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductViewReportOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductViewReportOutput'] = ResolversParentTypes['ProductViewReportOutput']> = {
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Products'] = ResolversParentTypes['Products']> = {
  aggregations?: Resolver<Maybe<Array<Maybe<ResolversTypes['Aggregation']>>>, ParentType, ContextType, Partial<ProductsAggregationsArgs>>;
  filters?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilter']>>>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  sort_fields?: Resolver<Maybe<ResolversTypes['SortFields']>, ParentType, ContextType>;
  suggestions?: Resolver<Maybe<Array<Maybe<ResolversTypes['SearchSuggestion']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductsOutput'] = ResolversParentTypes['ProductsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Product']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductsOutputNoPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductsOutputNoPage'] = ResolversParentTypes['ProductsOutputNoPage']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Product']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  LabelRules?: Resolver<Maybe<ResolversTypes['LabelRulesOutput']>, ParentType, ContextType, RequireFields<QueryLabelRulesArgs, 'currentPage' | 'pageSize'>>;
  MpRewardConfig?: Resolver<Maybe<ResolversTypes['RewardConfig']>, ParentType, ContextType>;
  MpRewardIcon?: Resolver<Maybe<ResolversTypes['Icon']>, ParentType, ContextType>;
  MpRewardShoppingCartSpendingRules?: Resolver<Maybe<ResolversTypes['SpendingConfiguration']>, ParentType, ContextType, RequireFields<QueryMpRewardShoppingCartSpendingRulesArgs, 'cart_id'>>;
  advreview?: Resolver<Maybe<ResolversTypes['ReviewsData']>, ParentType, ContextType, RequireFields<QueryAdvreviewArgs, 'page' | 'productId'>>;
  amReviewSetting?: Resolver<Maybe<ResolversTypes['AmReviewSetting']>, ParentType, ContextType>;
  amReviewWidget?: Resolver<Maybe<ResolversTypes['AmReviewWidget']>, ParentType, ContextType, RequireFields<QueryAmReviewWidgetArgs, 'widgetId'>>;
  applyCouponsList?: Resolver<Maybe<ResolversTypes['CouponsCollection']>, ParentType, ContextType, RequireFields<QueryApplyCouponsListArgs, 'cart_id'>>;
  attributesForm?: Resolver<ResolversTypes['AttributesFormOutput'], ParentType, ContextType, RequireFields<QueryAttributesFormArgs, 'formCode'>>;
  attributesList?: Resolver<Maybe<ResolversTypes['AttributesMetadataOutput']>, ParentType, ContextType, RequireFields<QueryAttributesListArgs, 'entityType'>>;
  availableStores?: Resolver<Maybe<Array<Maybe<ResolversTypes['StoreConfig']>>>, ParentType, ContextType, Partial<QueryAvailableStoresArgs>>;
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType, RequireFields<QueryCartArgs, 'cart_id'>>;
  categories?: Resolver<Maybe<ResolversTypes['CategoryResult']>, ParentType, ContextType, RequireFields<QueryCategoriesArgs, 'currentPage' | 'pageSize'>>;
  category?: Resolver<Maybe<ResolversTypes['CategoryTree']>, ParentType, ContextType, Partial<QueryCategoryArgs>>;
  categoryList?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType, RequireFields<QueryCategoryListArgs, 'currentPage' | 'pageSize'>>;
  checkoutAgreements?: Resolver<Maybe<Array<Maybe<ResolversTypes['CheckoutAgreement']>>>, ParentType, ContextType>;
  cmsBlocks?: Resolver<Maybe<ResolversTypes['CmsBlocks']>, ParentType, ContextType, Partial<QueryCmsBlocksArgs>>;
  cmsPage?: Resolver<Maybe<ResolversTypes['CmsPage']>, ParentType, ContextType, Partial<QueryCmsPageArgs>>;
  compareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<QueryCompareListArgs, 'uid'>>;
  countries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Country']>>>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, Partial<QueryCountryArgs>>;
  currency?: Resolver<Maybe<ResolversTypes['Currency']>, ParentType, ContextType>;
  customAttributeMetadata?: Resolver<Maybe<ResolversTypes['CustomAttributeMetadata']>, ParentType, ContextType, RequireFields<QueryCustomAttributeMetadataArgs, 'attributes'>>;
  customAttributeMetadataV2?: Resolver<ResolversTypes['AttributesMetadataOutput'], ParentType, ContextType, Partial<QueryCustomAttributeMetadataV2Args>>;
  customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
  customerCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  customerDownloadableProducts?: Resolver<Maybe<ResolversTypes['CustomerDownloadableProducts']>, ParentType, ContextType>;
  customerOrders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType>;
  customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
  customerPlacedOrder?: Resolver<Maybe<ResolversTypes['SalesOrderCollection']>, ParentType, ContextType, Partial<QueryCustomerPlacedOrderArgs>>;
  getAddress?: Resolver<Maybe<Array<Maybe<ResolversTypes['Address']>>>, ParentType, ContextType, Partial<QueryGetAddressArgs>>;
  getBlockData?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlockData']>>>, ParentType, ContextType, RequireFields<QueryGetBlockDataArgs, 'blockId'>>;
  getBrandDetails?: Resolver<Maybe<Array<Maybe<ResolversTypes['BrandData']>>>, ParentType, ContextType>;
  getEmirates?: Resolver<Maybe<Array<Maybe<ResolversTypes['Emirates']>>>, ParentType, ContextType>;
  getHostedProUrl?: Resolver<Maybe<ResolversTypes['HostedProUrl']>, ParentType, ContextType, RequireFields<QueryGetHostedProUrlArgs, 'input'>>;
  getMenu?: Resolver<Maybe<ResolversTypes['Menu']>, ParentType, ContextType>;
  getPayflowLinkToken?: Resolver<Maybe<ResolversTypes['PayflowLinkToken']>, ParentType, ContextType, RequireFields<QueryGetPayflowLinkTokenArgs, 'input'>>;
  getPaymentConfig?: Resolver<Maybe<ResolversTypes['PaymentConfigOutput']>, ParentType, ContextType, RequireFields<QueryGetPaymentConfigArgs, 'location'>>;
  getPaymentOrder?: Resolver<Maybe<ResolversTypes['PaymentOrderOutput']>, ParentType, ContextType, RequireFields<QueryGetPaymentOrderArgs, 'cartId' | 'id'>>;
  getPaymentSDK?: Resolver<Maybe<ResolversTypes['GetPaymentSDKOutput']>, ParentType, ContextType, RequireFields<QueryGetPaymentSdkArgs, 'location'>>;
  getVaultConfig?: Resolver<Maybe<ResolversTypes['VaultConfigOutput']>, ParentType, ContextType>;
  guestOrder?: Resolver<ResolversTypes['CustomerOrder'], ParentType, ContextType, RequireFields<QueryGuestOrderArgs, 'input'>>;
  guestOrderByToken?: Resolver<ResolversTypes['CustomerOrder'], ParentType, ContextType, RequireFields<QueryGuestOrderByTokenArgs, 'input'>>;
  homepage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType>;
  isEmailAvailable?: Resolver<Maybe<ResolversTypes['IsEmailAvailableOutput']>, ParentType, ContextType, RequireFields<QueryIsEmailAvailableArgs, 'email'>>;
  mpBlogCategories?: Resolver<Maybe<ResolversTypes['CategoriesOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogCategoriesArgs, 'action' | 'currentPage' | 'pageSize'>>;
  mpBlogComments?: Resolver<Maybe<ResolversTypes['CommentsOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogCommentsArgs, 'currentPage' | 'pageSize'>>;
  mpBlogConfigs?: Resolver<Maybe<ResolversTypes['ConfigsOutput']>, ParentType, ContextType, Partial<QueryMpBlogConfigsArgs>>;
  mpBlogMonthlyArchive?: Resolver<Maybe<ResolversTypes['MonthlyArchiveOutput']>, ParentType, ContextType, Partial<QueryMpBlogMonthlyArchiveArgs>>;
  mpBlogPostLikes?: Resolver<Maybe<ResolversTypes['LikesOutput']>, ParentType, ContextType, Partial<QueryMpBlogPostLikesArgs>>;
  mpBlogPosts?: Resolver<Maybe<ResolversTypes['PostsOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogPostsArgs, 'action' | 'currentPage' | 'pageSize'>>;
  mpBlogProducts?: Resolver<Maybe<ResolversTypes['ProductsOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogProductsArgs, 'currentPage' | 'pageSize'>>;
  mpBlogTags?: Resolver<Maybe<ResolversTypes['TagsOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogTagsArgs, 'currentPage' | 'pageSize'>>;
  mpBlogTopics?: Resolver<Maybe<ResolversTypes['TopicsOutput']>, ParentType, ContextType, RequireFields<QueryMpBlogTopicsArgs, 'currentPage' | 'pageSize'>>;
  mpGTMCode?: Resolver<Maybe<ResolversTypes['GTMCodeOutput']>, ParentType, ContextType, Partial<QueryMpGtmCodeArgs>>;
  mpGTMCodeHome?: Resolver<Maybe<ResolversTypes['GTMCodeOutput']>, ParentType, ContextType>;
  mpGTMHead?: Resolver<Maybe<ResolversTypes['GTMHeadOutput']>, ParentType, ContextType, Partial<QueryMpGtmHeadArgs>>;
  mpSmtpBestsellers?: Resolver<Maybe<ResolversTypes['SmtpBestsellersOutput']>, ParentType, ContextType, RequireFields<QueryMpSmtpBestsellersArgs, 'app_id' | 'secret_key'>>;
  pickupLocations?: Resolver<Maybe<ResolversTypes['PickupLocations']>, ParentType, ContextType, RequireFields<QueryPickupLocationsArgs, 'currentPage' | 'pageSize'>>;
  productReviewRatingsMetadata?: Resolver<ResolversTypes['ProductReviewRatingsMetadata'], ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['Products']>, ParentType, ContextType, RequireFields<QueryProductsArgs, 'currentPage' | 'pageSize'>>;
  recaptchaV3Config?: Resolver<Maybe<ResolversTypes['ReCaptchaConfigurationV3']>, ParentType, ContextType>;
  recentViewedProducts?: Resolver<Maybe<ResolversTypes['RecentViewProducts']>, ParentType, ContextType, RequireFields<QueryRecentViewedProductsArgs, 'currentPage' | 'pageSize'>>;
  resultPage?: Resolver<Maybe<ResolversTypes['ResultPage']>, ParentType, ContextType, RequireFields<QueryResultPageArgs, 'currentPage' | 'keyword' | 'pageSize'>>;
  route?: Resolver<Maybe<ResolversTypes['RoutableInterface']>, ParentType, ContextType, RequireFields<QueryRouteArgs, 'url'>>;
  salesOrder?: Resolver<Maybe<ResolversTypes['SalesOrder']>, ParentType, ContextType, Partial<QuerySalesOrderArgs>>;
  storeConfig?: Resolver<Maybe<ResolversTypes['StoreConfig']>, ParentType, ContextType>;
  typeseSenseSystemConfig?: Resolver<Maybe<ResolversTypes['TypeseSenseSystemConfig']>, ParentType, ContextType>;
  urlResolver?: Resolver<Maybe<ResolversTypes['EntityUrl']>, ParentType, ContextType, RequireFields<QueryUrlResolverArgs, 'url'>>;
  viewallProducts?: Resolver<Maybe<ResolversTypes['ViewAllProducts']>, ParentType, ContextType, RequireFields<QueryViewallProductsArgs, 'currentPage' | 'input' | 'pageSize'>>;
  wishlist?: Resolver<Maybe<ResolversTypes['WishlistOutput']>, ParentType, ContextType>;
};

export type RatingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Rating'] = ResolversParentTypes['Rating']> = {
  rating_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  rating_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rating_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['RatingOption']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RatingOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RatingOption'] = ResolversParentTypes['RatingOption']> = {
  option_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RatingVoteResolvers<ContextType = any, ParentType extends ResolversParentTypes['RatingVote'] = ResolversParentTypes['RatingVote']> = {
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  entity_pk_value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  percent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rating_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  review_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  vote_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReCaptchaConfigurationV3Resolvers<ContextType = any, ParentType extends ResolversParentTypes['ReCaptchaConfigurationV3'] = ResolversParentTypes['ReCaptchaConfigurationV3']> = {
  badge_position?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  failure_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  forms?: Resolver<Array<Maybe<ResolversTypes['ReCaptchaFormEnum']>>, ParentType, ContextType>;
  is_enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  language_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  minimum_score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  website_key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RecentViewProductsResolvers<ContextType = any, ParentType extends ResolversParentTypes['RecentViewProducts'] = ResolversParentTypes['RecentViewProducts']> = {
  currentPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalPages?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RegionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Region'] = ResolversParentTypes['Region']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoveCouponFromCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoveCouponFromCartOutput'] = ResolversParentTypes['RemoveCouponFromCartOutput']> = {
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoveItemFromCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoveItemFromCartOutput'] = ResolversParentTypes['RemoveItemFromCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoveProductsFromWishlistOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoveProductsFromWishlistOutput'] = ResolversParentTypes['RemoveProductsFromWishlistOutput']> = {
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReorderItemsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReorderItemsOutput'] = ResolversParentTypes['ReorderItemsOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  userInputErrors?: Resolver<Array<Maybe<ResolversTypes['CheckoutUserInputError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Response'] = ResolversParentTypes['Response']> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  response?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ResultPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResultPage'] = ResolversParentTypes['ResultPage']> = {
  facetData?: Resolver<Maybe<Array<Maybe<ResolversTypes['FacetData']>>>, ParentType, ContextType>;
  productItems?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductItems']>>>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewResolvers<ContextType = any, ParentType extends ResolversParentTypes['Review'] = ResolversParentTypes['Review']> = {
  answer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['Comment']>>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  detail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detail_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  entity_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  entity_pk_value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  guest_email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  images?: Resolver<Maybe<Array<Maybe<ResolversTypes['Images']>>>, ParentType, ContextType>;
  is_recommended?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  like_about?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  minus_review?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  not_like_about?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  plus_review?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_votes?: Resolver<Maybe<Array<Maybe<ResolversTypes['RatingVote']>>>, ParentType, ContextType>;
  review_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verified_buyer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewFilterResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewFilter'] = ResolversParentTypes['ReviewFilter']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewOrderResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewOrder'] = ResolversParentTypes['ReviewOrder']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewSourceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewSource'] = ResolversParentTypes['ReviewSource']> = {
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewsDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewsData'] = ResolversParentTypes['ReviewsData']> = {
  detailedSummary?: Resolver<Maybe<ResolversTypes['DetailedSummary']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Review']>>>, ParentType, ContextType>;
  ratingSummary?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ratingSummaryValue?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  recomendedPercent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalRecords?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalRecordsFiltered?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RevokeCustomerTokenOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['RevokeCustomerTokenOutput'] = ResolversParentTypes['RevokeCustomerTokenOutput']> = {
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RewardConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['RewardConfig'] = ResolversParentTypes['RewardConfig']> = {
  display?: Resolver<Maybe<ResolversTypes['displayConfig']>, ParentType, ContextType>;
  earning?: Resolver<Maybe<ResolversTypes['earningConfig']>, ParentType, ContextType>;
  general?: Resolver<Maybe<ResolversTypes['generalConfig']>, ParentType, ContextType>;
  spending?: Resolver<Maybe<ResolversTypes['spendingConfig']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RewardEarningResolvers<ContextType = any, ParentType extends ResolversParentTypes['RewardEarning'] = ResolversParentTypes['RewardEarning']> = {
  earning_point?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  earning_point_format?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reward_icon?: Resolver<Maybe<ResolversTypes['Icon']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RewardExchangeRateResolvers<ContextType = any, ParentType extends ResolversParentTypes['RewardExchangeRate'] = ResolversParentTypes['RewardExchangeRate']> = {
  earning_rate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  spending_rate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoutableInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['RoutableInterface'] = ResolversParentTypes['RoutableInterface']> = {
  __resolveType: TypeResolveFn<'BundleProduct' | 'CategoryTree' | 'CmsPage' | 'ConfigurableProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'RoutableUrl' | 'SimpleProduct' | 'VirtualProduct', ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
};

export type RoutableUrlResolvers<ContextType = any, ParentType extends ResolversParentTypes['RoutableUrl'] = ResolversParentTypes['RoutableUrl']> = {
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SdkParamsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SDKParams'] = ResolversParentTypes['SDKParams']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SaleEarnConfigsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SaleEarnConfigs'] = ResolversParentTypes['SaleEarnConfigs']> = {
  earn_point_after_invoice_created?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  point_expired?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SalesCommentItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['SalesCommentItem'] = ResolversParentTypes['SalesCommentItem']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SalesItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['SalesItemInterface'] = ResolversParentTypes['SalesItemInterface']> = {
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SalesOrderResolvers<ContextType = any, ParentType extends ResolversParentTypes['SalesOrder'] = ResolversParentTypes['SalesOrder']> = {
  billing?: Resolver<Maybe<Array<Maybe<ResolversTypes['Billing']>>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_guest_customer?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Items']>>>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<Array<Maybe<ResolversTypes['Shipping']>>>, ParentType, ContextType>;
  shipping_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SalesOrderCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SalesOrderCollection'] = ResolversParentTypes['SalesOrderCollection']> = {
  allOrderRecords?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderRecord']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchAttributesResolvers<ContextType = any, ParentType extends ResolversParentTypes['SearchAttributes'] = ResolversParentTypes['SearchAttributes']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['SearchConfig'] = ResolversParentTypes['SearchConfig']> = {
  enable_addto_cart?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_price_slider?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  image_height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image_width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  search_filters?: Resolver<Maybe<Array<Maybe<ResolversTypes['SearchFilters']>>>, ParentType, ContextType>;
  sort_option?: Resolver<Maybe<Array<Maybe<ResolversTypes['SortOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchFiltersResolvers<ContextType = any, ParentType extends ResolversParentTypes['SearchFilters'] = ResolversParentTypes['SearchFilters']> = {
  attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultPageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['SearchResultPageInfo'] = ResolversParentTypes['SearchResultPageInfo']> = {
  current_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  page_size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  total_pages?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchSuggestionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SearchSuggestion'] = ResolversParentTypes['SearchSuggestion']> = {
  search?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedBundleOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedBundleOption'] = ResolversParentTypes['SelectedBundleOption']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOptionValue']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedBundleOptionValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedBundleOptionValue'] = ResolversParentTypes['SelectedBundleOptionValue']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedConfigurableOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedConfigurableOption'] = ResolversParentTypes['SelectedConfigurableOption']> = {
  configurable_product_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  configurable_product_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  option_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  value_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedCustomizableOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedCustomizableOption'] = ResolversParentTypes['SelectedCustomizableOption']> = {
  customizable_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sort_order?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOptionValue']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedCustomizableOptionValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedCustomizableOptionValue'] = ResolversParentTypes['SelectedCustomizableOptionValue']> = {
  customizable_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['CartItemSelectedOptionValuePrice'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedPaymentMethodResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedPaymentMethod'] = ResolversParentTypes['SelectedPaymentMethod']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  purchase_order_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectedShippingMethodResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectedShippingMethod'] = ResolversParentTypes['SelectedShippingMethod']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  method_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  price_excl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  price_incl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SemanticSearchResolvers<ContextType = any, ParentType extends ResolversParentTypes['SemanticSearch'] = ResolversParentTypes['SemanticSearch']> = {
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_hybrid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SendEmailToFriendOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SendEmailToFriendOutput'] = ResolversParentTypes['SendEmailToFriendOutput']> = {
  recipients?: Resolver<Maybe<Array<Maybe<ResolversTypes['SendEmailToFriendRecipient']>>>, ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['SendEmailToFriendSender']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SendEmailToFriendRecipientResolvers<ContextType = any, ParentType extends ResolversParentTypes['SendEmailToFriendRecipient'] = ResolversParentTypes['SendEmailToFriendRecipient']> = {
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SendEmailToFriendSenderResolvers<ContextType = any, ParentType extends ResolversParentTypes['SendEmailToFriendSender'] = ResolversParentTypes['SendEmailToFriendSender']> = {
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SendFriendConfigurationResolvers<ContextType = any, ParentType extends ResolversParentTypes['SendFriendConfiguration'] = ResolversParentTypes['SendFriendConfiguration']> = {
  enabled_for_customers?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  enabled_for_guests?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SeoResolvers<ContextType = any, ParentType extends ResolversParentTypes['Seo'] = ResolversParentTypes['Seo']> = {
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SeoDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SeoDetails'] = ResolversParentTypes['SeoDetails']> = {
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  miscellaneous_html?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SetBillingAddressOnCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetBillingAddressOnCartOutput'] = ResolversParentTypes['SetBillingAddressOnCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SetGuestEmailOnCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetGuestEmailOnCartOutput'] = ResolversParentTypes['SetGuestEmailOnCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SetPaymentMethodOnCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetPaymentMethodOnCartOutput'] = ResolversParentTypes['SetPaymentMethodOnCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SetShippingAddressesOnCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetShippingAddressesOnCartOutput'] = ResolversParentTypes['SetShippingAddressesOnCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SetShippingMethodsOnCartOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SetShippingMethodsOnCartOutput'] = ResolversParentTypes['SetShippingMethodsOnCartOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShipmentItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShipmentItem'] = ResolversParentTypes['ShipmentItem']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShipmentItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShipmentItemInterface'] = ResolversParentTypes['ShipmentItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleShipmentItem' | 'ShipmentItem', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
};

export type ShipmentTrackingResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShipmentTracking'] = ResolversParentTypes['ShipmentTracking']> = {
  carrier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShippingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Shipping'] = ResolversParentTypes['Shipping']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShippingCartAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShippingCartAddress'] = ResolversParentTypes['ShippingCartAddress']> = {
  available_shipping_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailableShippingMethod']>>>, ParentType, ContextType>;
  cart_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemQuantity']>>>, ParentType, ContextType>;
  cart_items_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  customer_address_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  items_weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lat_lng?: Resolver<Maybe<Array<Maybe<ResolversTypes['LatLng']>>>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  selected_shipping_method?: Resolver<Maybe<ResolversTypes['SelectedShippingMethod']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShippingDiscountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShippingDiscount'] = ResolversParentTypes['ShippingDiscount']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShippingHandlingResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShippingHandling'] = ResolversParentTypes['ShippingHandling']> = {
  amount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  amount_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShippingDiscount']>>>, ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SidebarResolvers<ContextType = any, ParentType extends ResolversParentTypes['Sidebar'] = ResolversParentTypes['Sidebar']> = {
  number_mostview_posts?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  number_recent_posts?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SimpleCartItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['SimpleCartItem'] = ResolversParentTypes['SimpleCartItem']> = {
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SimpleProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['SimpleProduct'] = ResolversParentTypes['SimpleProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<SimpleProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<SimpleProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SimpleWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['SimpleWishlistItem'] = ResolversParentTypes['SimpleWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SliderResolvers<ContextType = any, ParentType extends ResolversParentTypes['Slider'] = ResolversParentTypes['Slider']> = {
  button_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  button_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_button?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  end_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  link_info?: Resolver<Maybe<ResolversTypes['LinkItems']>, ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  slider_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SliderBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['SliderBlock'] = ResolversParentTypes['SliderBlock']> = {
  autoplay?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  autoplay_hover_pause?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  autoplay_timeout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  banners?: Resolver<Maybe<Array<Maybe<ResolversTypes['BannerItems']>>>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_dots?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  show_slider_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  slider_width?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sliders?: Resolver<Maybe<Array<Maybe<ResolversTypes['Slider']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  templateType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SmartButtonsConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['SmartButtonsConfig'] = ResolversParentTypes['SmartButtonsConfig']> = {
  button_styles?: Resolver<Maybe<ResolversTypes['ButtonStyles']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_message?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  display_venmo?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  message_styles?: Resolver<Maybe<ResolversTypes['MessageStyles']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SmtpBestsellersOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SmtpBestsellersOutput'] = ResolversParentTypes['SmtpBestsellersOutput']> = {
  mpBestsellers?: Resolver<Maybe<Array<Maybe<ResolversTypes['BestsellersProductOutput']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SortFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['SortField'] = ResolversParentTypes['SortField']> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SortFieldsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SortFields'] = ResolversParentTypes['SortFields']> = {
  default?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SortField']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SortOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SortOption'] = ResolversParentTypes['SortOption']> = {
  attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpendingConfigurationResolvers<ContextType = any, ParentType extends ResolversParentTypes['SpendingConfiguration'] = ResolversParentTypes['SpendingConfiguration']> = {
  pointSpent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ruleApplied?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rules?: Resolver<Maybe<Array<Maybe<ResolversTypes['SpendingRules']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpendingRulesResolvers<ContextType = any, ParentType extends ResolversParentTypes['SpendingRules'] = ResolversParentTypes['SpendingRules']> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  max?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  min?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  step?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreConfig'] = ResolversParentTypes['StoreConfig']> = {
  absolute_footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_guests_to_write_product_reviews?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_items?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  autocomplete_on_storefront?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_3dsecure_allowspecific?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_3dsecure_always_request_3ds?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_3dsecure_specificcountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_3dsecure_threshold_amount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_3dsecure_verify_3dsecure?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_ach_direct_debit_vault_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_applepay_merchant_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_applepay_vault_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_cc_vault_cvv?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_environment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_googlepay_btn_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_googlepay_cctypes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_googlepay_merchant_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_googlepay_vault_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_local_payment_allowed_methods?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_local_payment_fallback_button_text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_local_payment_redirect_on_fail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_merchant_account_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_credit_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_credit_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_credit_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_credit_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_messaging_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_messaging_logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_messaging_logo_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_messaging_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_messaging_text_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paylater_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paylater_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paylater_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paylater_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paypal_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paypal_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paypal_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_cart_type_paypal_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_credit_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_credit_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_credit_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_credit_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_messaging_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_messaging_logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_messaging_logo_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_messaging_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_messaging_text_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paylater_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paylater_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paylater_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paylater_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paypal_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paypal_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paypal_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_checkout_type_paypal_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_credit_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_credit_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_credit_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_credit_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_messaging_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_messaging_logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_messaging_logo_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_messaging_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_messaging_text_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paylater_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paylater_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paylater_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paylater_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paypal_color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paypal_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paypal_shape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_button_location_productpage_type_paypal_show?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_credit_uk_merchant_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_display_on_shopping_cart?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_merchant_country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_merchant_name_override?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_paypal_require_billing_address?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_send_cart_line_items?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  braintree_paypal_vault_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  cart_expires_in_days?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  cart_summary_display_quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  catalog_default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  category_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_enable_for_specific_countries?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  check_money_order_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  check_money_order_make_check_payable_to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_max_order_total?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_min_order_total?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_new_order_status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_payment_from_specific_countries?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_send_check_to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  check_money_order_sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  check_money_order_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_home_page?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_no_cookies?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  configurable_thumbnail_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contact_enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countries_with_required_region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  create_account_confirmation?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  custom?: Resolver<Maybe<ResolversTypes['Custom']>, ParentType, ContextType>;
  customer_access_token_lifetime?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  default_country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  demonotice?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  display_state_if_optional?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  google_map_pin_address?: Resolver<Maybe<ResolversTypes['MapPinAddress']>, ParentType, ContextType>;
  grid_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  grid_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  head_includes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  head_shortcut_icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  header_logo_src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default_store?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_default_store_group?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_guest_checkout_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_one_page_checkout_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  list_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  list_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo_alt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo_height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  logo_width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  magento_wishlist_general_is_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  max_items_in_order_summary?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minicart_display?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  minicart_max_items?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minimum_password_length?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  newsletter_enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  optional_zip_countries?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_cancellation_enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  order_cancellation_reasons?: Resolver<Array<Maybe<ResolversTypes['CancellationReason']>>, ParentType, ContextType>;
  payment_payflowpro_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  product_reviews_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required_character_classes_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  root_category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  root_category_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sales_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  secure_base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  send_friend?: Resolver<Maybe<ResolversTypes['SendFriendConfiguration']>, ParentType, ContextType>;
  shopping_cart_display_full_summary?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  shopping_cart_display_grand_total?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  shopping_cart_display_price?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shopping_cart_display_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shopping_cart_display_subtotal?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shopping_cart_display_tax_gift_wrapping?: Resolver<Maybe<ResolversTypes['TaxWrappingEnum']>, ParentType, ContextType>;
  shopping_cart_display_zero_tax?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  show_cms_breadcrumbs?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  store_group_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  store_group_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_location?: Resolver<Maybe<ResolversTypes['StoreLocation']>, ParentType, ContextType>;
  store_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_separator?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  typesense_config?: Resolver<Maybe<ResolversTypes['TypesenseConfig']>, ParentType, ContextType>;
  use_store_in_url?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  website_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  website_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  website_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  weight_unit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  welcome?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zero_subtotal_enable_for_specific_countries?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  zero_subtotal_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  zero_subtotal_new_order_status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zero_subtotal_payment_action?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zero_subtotal_payment_from_specific_countries?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zero_subtotal_sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  zero_subtotal_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreLocation'] = ResolversParentTypes['StoreLocation']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contact_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorefrontPropertiesResolvers<ContextType = any, ParentType extends ResolversParentTypes['StorefrontProperties'] = ResolversParentTypes['StorefrontProperties']> = {
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  use_in_layered_navigation?: Resolver<Maybe<ResolversTypes['UseInLayeredNavigationOptions']>, ParentType, ContextType>;
  use_in_product_listing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  use_in_search_results_layered_navigation?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  visible_on_catalog_pages?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscribeEmailToNewsletterOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubscribeEmailToNewsletterOutput'] = ResolversParentTypes['SubscribeEmailToNewsletterOutput']> = {
  status?: Resolver<Maybe<ResolversTypes['SubscriptionStatusesEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SwatchDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['SwatchData'] = ResolversParentTypes['SwatchData']> = {
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SwatchDataInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['SwatchDataInterface'] = ResolversParentTypes['SwatchDataInterface']> = {
  __resolveType: TypeResolveFn<'ColorSwatchData' | 'ImageSwatchData' | 'TextSwatchData', ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type SwatchLayerFilterItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['SwatchLayerFilterItem'] = ResolversParentTypes['SwatchLayerFilterItem']> = {
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SwatchLayerFilterItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['SwatchLayerFilterItemInterface'] = ResolversParentTypes['SwatchLayerFilterItemInterface']> = {
  __resolveType: TypeResolveFn<'SwatchLayerFilterItem', ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
};

export type TagResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tag'] = ResolversParentTypes['Tag']> = {
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  import_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_robots?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsOutputNoPage']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tag_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TaggedImageBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['TaggedImageBlock'] = ResolversParentTypes['TaggedImageBlock']> = {
  banner_template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  block_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mapped_image?: Resolver<Maybe<Array<Maybe<ResolversTypes['MappedImage']>>>, ParentType, ContextType>;
  mapped_mobile_image?: Resolver<Maybe<Array<Maybe<ResolversTypes['MappedImage']>>>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_position?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsOutput'] = ResolversParentTypes['TagsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Tag']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsOutputNoPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsOutputNoPage'] = ResolversParentTypes['TagsOutputNoPage']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Tag']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TaxItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['TaxItem'] = ResolversParentTypes['TaxItem']> = {
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  rate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Testimonial'] = ResolversParentTypes['Testimonial']> = {
  added_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['ReviewSource']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  testimonial_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['TestimonialBlock'] = ResolversParentTypes['TestimonialBlock']> = {
  desktop_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  mobile_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  show_title?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  testimonial_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['Testimonial']>>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextSwatchDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextSwatchData'] = ResolversParentTypes['TextSwatchData']> = {
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TierPriceResolvers<ContextType = any, ParentType extends ResolversParentTypes['TierPrice'] = ResolversParentTypes['TierPrice']> = {
  discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
  final_price?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TopicResolvers<ContextType = any, ParentType extends ResolversParentTypes['Topic'] = ResolversParentTypes['Topic']> = {
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  import_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_robots?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['PostsOutputNoPage']>, ParentType, ContextType>;
  store_ids?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topic_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TopicsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['TopicsOutput'] = ResolversParentTypes['TopicsOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Topic']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['PageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TopicsOutputNoPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['TopicsOutputNoPage'] = ResolversParentTypes['TopicsOutputNoPage']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Topic']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TotalSegmentsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['TotalSegmentsOutput'] = ResolversParentTypes['TotalSegmentsOutput']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TypeTolernaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['TypeTolernace'] = ResolversParentTypes['TypeTolernace']> = {
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  word_length?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TypeseSenseSystemConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['TypeseSenseSystemConfig'] = ResolversParentTypes['TypeseSenseSystemConfig']> = {
  additional_configuration?: Resolver<Maybe<ResolversTypes['AdditionalConfig']>, ParentType, ContextType>;
  autocomplete_menu?: Resolver<Maybe<ResolversTypes['AutoCompleteSection']>, ParentType, ContextType>;
  category_config?: Resolver<Maybe<ResolversTypes['CategoryConfig']>, ParentType, ContextType>;
  general?: Resolver<Maybe<ResolversTypes['GeneralConfig']>, ParentType, ContextType>;
  product_config?: Resolver<Maybe<ResolversTypes['ProductConfig']>, ParentType, ContextType>;
  search_result?: Resolver<Maybe<ResolversTypes['SearchConfig']>, ParentType, ContextType>;
  semantic_search?: Resolver<Maybe<ResolversTypes['SemanticSearch']>, ParentType, ContextType>;
  typo_tolernace?: Resolver<Maybe<ResolversTypes['TypeTolernace']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TypesenseConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['TypesenseConfig'] = ResolversParentTypes['TypesenseConfig']> = {
  enable_category?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enable_frontend?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enable_suggestions?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  highlights?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  index_prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nb_of_categories_suggestions?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nb_of_products_suggestions?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nb_of_suggestions_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nearest_node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  port?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  protocol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  search_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateCartItemsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateCartItemsOutput'] = ResolversParentTypes['UpdateCartItemsOutput']> = {
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateProductsInWishlistOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateProductsInWishlistOutput'] = ResolversParentTypes['UpdateProductsInWishlistOutput']> = {
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UrlRewriteResolvers<ContextType = any, ParentType extends ResolversParentTypes['UrlRewrite'] = ResolversParentTypes['UrlRewrite']> = {
  parameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['HttpQueryParameter']>>>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ValidationRuleResolvers<ContextType = any, ParentType extends ResolversParentTypes['ValidationRule'] = ResolversParentTypes['ValidationRule']> = {
  name?: Resolver<Maybe<ResolversTypes['ValidationRuleEnum']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VaultConfigOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['VaultConfigOutput'] = ResolversParentTypes['VaultConfigOutput']> = {
  credit_card?: Resolver<Maybe<ResolversTypes['VaultCreditCardConfig']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VaultCreditCardConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['VaultCreditCardConfig'] = ResolversParentTypes['VaultCreditCardConfig']> = {
  is_vault_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sdk_params?: Resolver<Maybe<Array<Maybe<ResolversTypes['SDKParams']>>>, ParentType, ContextType>;
  three_ds_mode?: Resolver<Maybe<ResolversTypes['ThreeDSMode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ViewAllProductsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ViewAllProducts'] = ResolversParentTypes['ViewAllProducts']> = {
  aggregations?: Resolver<Maybe<Array<Maybe<ResolversTypes['Aggregation']>>>, ParentType, ContextType, Partial<ViewAllProductsAggregationsArgs>>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VirtualCartItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['VirtualCartItem'] = ResolversParentTypes['VirtualCartItem']> = {
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemError']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VirtualProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['VirtualProduct'] = ResolversParentTypes['VirtualProduct']> = {
  additional_info?: Resolver<Maybe<Array<Maybe<ResolversTypes['AdditionalInfo']>>>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  brand_info?: Resolver<Maybe<ResolversTypes['BrandInfo']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  custom_attributesV2?: Resolver<Maybe<ResolversTypes['ProductCustomAttributes']>, ParentType, ContextType, Partial<VirtualProductCustom_AttributesV2Args>>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  individual_shipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mp_label_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['LabelRules']>>>, ParentType, ContextType>;
  mp_reward?: Resolver<Maybe<ResolversTypes['RewardEarning']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  product_inventory?: Resolver<Maybe<ResolversTypes['ProductInventory']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  product_videos?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductVideo']>>>, ParentType, ContextType>;
  qr_code_attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<VirtualProductReviewsArgs, 'currentPage' | 'pageSize'>>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  wishlistData?: Resolver<Maybe<ResolversTypes['WishlistData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VirtualWishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['VirtualWishlistItem'] = ResolversParentTypes['VirtualWishlistItem']> = {
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WebsiteResolvers<ContextType = any, ParentType extends ResolversParentTypes['Website'] = ResolversParentTypes['Website']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WholeSalerCustomerAccountOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['WholeSalerCustomerAccountOutput'] = ResolversParentTypes['WholeSalerCustomerAccountOutput']> = {
  customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishListUserInputErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishListUserInputError'] = ResolversParentTypes['WishListUserInputError']> = {
  code?: Resolver<ResolversTypes['WishListUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistResolvers<ContextType = any, ParentType extends ResolversParentTypes['Wishlist'] = ResolversParentTypes['Wishlist']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items_v2?: Resolver<Maybe<ResolversTypes['WishlistItems']>, ParentType, ContextType, RequireFields<WishlistItems_V2Args, 'currentPage' | 'pageSize'>>;
  sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistCartUserInputErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistCartUserInputError'] = ResolversParentTypes['WishlistCartUserInputError']> = {
  code?: Resolver<ResolversTypes['WishlistCartUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  wishlistId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  wishlistItemId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistData'] = ResolversParentTypes['WishlistData']> = {
  wishlistItem?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistItem'] = ResolversParentTypes['WishlistItem']> = {
  added_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistItemInterfaceResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistItemInterface'] = ResolversParentTypes['WishlistItemInterface']> = {
  __resolveType: TypeResolveFn<'BundleWishlistItem' | 'ConfigurableWishlistItem' | 'DownloadableWishlistItem' | 'GroupedProductWishlistItem' | 'SimpleWishlistItem' | 'VirtualWishlistItem', ParentType, ContextType>;
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
};

export type WishlistItemsResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistItems'] = ResolversParentTypes['WishlistItems']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['WishlistItemInterface']>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WishlistOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['WishlistOutput'] = ResolversParentTypes['WishlistOutput']> = {
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DisplayConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['displayConfig'] = ResolversParentTypes['displayConfig']> = {
  mini_cart?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  top_page?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EarningConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['earningConfig'] = ResolversParentTypes['earningConfig']> = {
  earn_from_tax?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  earn_shipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  point_refund?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  round_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sales_earn?: Resolver<Maybe<ResolversTypes['SaleEarnConfigs']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

// export type GeneralConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['generalConfig'] = ResolversParentTypes['generalConfig']> = {
//   account_navigation_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   display_point_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
//   icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   maximum_point?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
//   plural_point_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   point_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   show_point_icon?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
//   zero_amount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
//   __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
// };

export type SpendingConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['spendingConfig'] = ResolversParentTypes['spendingConfig']> = {
  discount_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  maximum_point_per_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minimum_balance?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  restore_point_after_refund?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  spend_on_ship?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  spend_on_tax?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  use_max_point?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  AboutUsOutput?: AboutUsOutputResolvers<ContextType>;
  AddAdvCommentOutput?: AddAdvCommentOutputResolvers<ContextType>;
  AddAdvProductReviewOutput?: AddAdvProductReviewOutputResolvers<ContextType>;
  AddAdvReviewOutput?: AddAdvReviewOutputResolvers<ContextType>;
  AddAdvVoteOutput?: AddAdvVoteOutputResolvers<ContextType>;
  AddBundleProductsToCartOutput?: AddBundleProductsToCartOutputResolvers<ContextType>;
  AddConfigurableProductsToCartOutput?: AddConfigurableProductsToCartOutputResolvers<ContextType>;
  AddDownloadableProductsToCartOutput?: AddDownloadableProductsToCartOutputResolvers<ContextType>;
  AddProductsToCartOutput?: AddProductsToCartOutputResolvers<ContextType>;
  AddProductsToWishlistOutput?: AddProductsToWishlistOutputResolvers<ContextType>;
  AddSimpleProductsToCartOutput?: AddSimpleProductsToCartOutputResolvers<ContextType>;
  AddVirtualProductsToCartOutput?: AddVirtualProductsToCartOutputResolvers<ContextType>;
  AddWishlistItemsToCartOutput?: AddWishlistItemsToCartOutputResolvers<ContextType>;
  AdditionalConfig?: AdditionalConfigResolvers<ContextType>;
  AdditionalInfo?: AdditionalInfoResolvers<ContextType>;
  Address?: AddressResolvers<ContextType>;
  Aggregation?: AggregationResolvers<ContextType>;
  AggregationOption?: AggregationOptionResolvers<ContextType>;
  AggregationOptionInterface?: AggregationOptionInterfaceResolvers<ContextType>;
  AmReviewSetting?: AmReviewSettingResolvers<ContextType>;
  AmReviewWidget?: AmReviewWidgetResolvers<ContextType>;
  AmReviewWidgetItem?: AmReviewWidgetItemResolvers<ContextType>;
  ApplePayConfig?: ApplePayConfigResolvers<ContextType>;
  AppliedCoupon?: AppliedCouponResolvers<ContextType>;
  ApplyCouponToCartOutput?: ApplyCouponToCartOutputResolvers<ContextType>;
  AssignCompareListToCustomerOutput?: AssignCompareListToCustomerOutputResolvers<ContextType>;
  Attribute?: AttributeResolvers<ContextType>;
  AttributeMetadata?: AttributeMetadataResolvers<ContextType>;
  AttributeMetadataError?: AttributeMetadataErrorResolvers<ContextType>;
  AttributeOption?: AttributeOptionResolvers<ContextType>;
  AttributeOptionMetadata?: AttributeOptionMetadataResolvers<ContextType>;
  AttributeSelectedOption?: AttributeSelectedOptionResolvers<ContextType>;
  AttributeSelectedOptionInterface?: AttributeSelectedOptionInterfaceResolvers<ContextType>;
  AttributeSelectedOptions?: AttributeSelectedOptionsResolvers<ContextType>;
  AttributeValue?: AttributeValueResolvers<ContextType>;
  AttributeValueInterface?: AttributeValueInterfaceResolvers<ContextType>;
  AttributesFormOutput?: AttributesFormOutputResolvers<ContextType>;
  AttributesMetadataOutput?: AttributesMetadataOutputResolvers<ContextType>;
  AutoCompleteSection?: AutoCompleteSectionResolvers<ContextType>;
  AvailablePaymentMethod?: AvailablePaymentMethodResolvers<ContextType>;
  AvailableShippingMethod?: AvailableShippingMethodResolvers<ContextType>;
  BannerBlock?: BannerBlockResolvers<ContextType>;
  BannerItems?: BannerItemsResolvers<ContextType>;
  BestsellersProductOutput?: BestsellersProductOutputResolvers<ContextType>;
  Billing?: BillingResolvers<ContextType>;
  BillingCartAddress?: BillingCartAddressResolvers<ContextType>;
  Block?: BlockResolvers<ContextType>;
  BlockData?: BlockDataResolvers<ContextType>;
  Blocks?: BlocksResolvers<ContextType>;
  BrandData?: BrandDataResolvers<ContextType>;
  BrandInfo?: BrandInfoResolvers<ContextType>;
  Breadcrumb?: BreadcrumbResolvers<ContextType>;
  BulkOrderOutput?: BulkOrderOutputResolvers<ContextType>;
  BundleCartItem?: BundleCartItemResolvers<ContextType>;
  BundleCreditMemoItem?: BundleCreditMemoItemResolvers<ContextType>;
  BundleInvoiceItem?: BundleInvoiceItemResolvers<ContextType>;
  BundleItem?: BundleItemResolvers<ContextType>;
  BundleItemOption?: BundleItemOptionResolvers<ContextType>;
  BundleOrderItem?: BundleOrderItemResolvers<ContextType>;
  BundleProduct?: BundleProductResolvers<ContextType>;
  BundleShipmentItem?: BundleShipmentItemResolvers<ContextType>;
  BundleWishlistItem?: BundleWishlistItemResolvers<ContextType>;
  ButtonStyles?: ButtonStylesResolvers<ContextType>;
  CancelOrderOutput?: CancelOrderOutputResolvers<ContextType>;
  CancellationReason?: CancellationReasonResolvers<ContextType>;
  Card?: CardResolvers<ContextType>;
  CardBin?: CardBinResolvers<ContextType>;
  CardPaymentSourceOutput?: CardPaymentSourceOutputResolvers<ContextType>;
  Cart?: CartResolvers<ContextType>;
  CartAddressCountry?: CartAddressCountryResolvers<ContextType>;
  CartAddressInterface?: CartAddressInterfaceResolvers<ContextType>;
  CartAddressRegion?: CartAddressRegionResolvers<ContextType>;
  CartDiscount?: CartDiscountResolvers<ContextType>;
  CartItemError?: CartItemErrorResolvers<ContextType>;
  CartItemInterface?: CartItemInterfaceResolvers<ContextType>;
  CartItemPrices?: CartItemPricesResolvers<ContextType>;
  CartItemQuantity?: CartItemQuantityResolvers<ContextType>;
  CartItemSelectedOptionValuePrice?: CartItemSelectedOptionValuePriceResolvers<ContextType>;
  CartItems?: CartItemsResolvers<ContextType>;
  CartPrices?: CartPricesResolvers<ContextType>;
  CartTaxItem?: CartTaxItemResolvers<ContextType>;
  CartUserInputError?: CartUserInputErrorResolvers<ContextType>;
  CatalogAttributeMetadata?: CatalogAttributeMetadataResolvers<ContextType>;
  CategoriesOutput?: CategoriesOutputResolvers<ContextType>;
  CategoriesOutputNoPage?: CategoriesOutputNoPageResolvers<ContextType>;
  Category?: CategoryResolvers<ContextType>;
  CategoryBlock?: CategoryBlockResolvers<ContextType>;
  CategoryConfig?: CategoryConfigResolvers<ContextType>;
  CategoryInfo?: CategoryInfoResolvers<ContextType>;
  CategoryInterface?: CategoryInterfaceResolvers<ContextType>;
  CategoryProducts?: CategoryProductsResolvers<ContextType>;
  CategoryResult?: CategoryResultResolvers<ContextType>;
  CategoryTree?: CategoryTreeResolvers<ContextType>;
  CheckoutAgreement?: CheckoutAgreementResolvers<ContextType>;
  CheckoutUserInputError?: CheckoutUserInputErrorResolvers<ContextType>;
  CmsBlock?: CmsBlockResolvers<ContextType>;
  CmsBlocks?: CmsBlocksResolvers<ContextType>;
  CmsPage?: CmsPageResolvers<ContextType>;
  Collections?: CollectionsResolvers<ContextType>;
  ColorSwatchData?: ColorSwatchDataResolvers<ContextType>;
  Comment?: CommentResolvers<ContextType>;
  CommentsOutput?: CommentsOutputResolvers<ContextType>;
  ComparableAttribute?: ComparableAttributeResolvers<ContextType>;
  ComparableItem?: ComparableItemResolvers<ContextType>;
  CompareList?: CompareListResolvers<ContextType>;
  ComplexTextValue?: ComplexTextValueResolvers<ContextType>;
  ConfigsOutput?: ConfigsOutputResolvers<ContextType>;
  ConfigurableAttributeOption?: ConfigurableAttributeOptionResolvers<ContextType>;
  ConfigurableCartItem?: ConfigurableCartItemResolvers<ContextType>;
  ConfigurableOptionAvailableForSelection?: ConfigurableOptionAvailableForSelectionResolvers<ContextType>;
  ConfigurableProduct?: ConfigurableProductResolvers<ContextType>;
  ConfigurableProductOption?: ConfigurableProductOptionResolvers<ContextType>;
  ConfigurableProductOptionValue?: ConfigurableProductOptionValueResolvers<ContextType>;
  ConfigurableProductOptions?: ConfigurableProductOptionsResolvers<ContextType>;
  ConfigurableProductOptionsSelection?: ConfigurableProductOptionsSelectionResolvers<ContextType>;
  ConfigurableProductOptionsValues?: ConfigurableProductOptionsValuesResolvers<ContextType>;
  ConfigurableVariant?: ConfigurableVariantResolvers<ContextType>;
  ConfigurableWishlistItem?: ConfigurableWishlistItemResolvers<ContextType>;
  ConfirmAccountOutput?: ConfirmAccountOutputResolvers<ContextType>;
  ContactUsOutput?: ContactUsOutputResolvers<ContextType>;
  ContentBlock?: ContentBlockResolvers<ContextType>;
  Country?: CountryResolvers<ContextType>;
  CouponsCollection?: CouponsCollectionResolvers<ContextType>;
  CouponsList?: CouponsListResolvers<ContextType>;
  CreateGuestCartOutput?: CreateGuestCartOutputResolvers<ContextType>;
  CreatePayflowProTokenOutput?: CreatePayflowProTokenOutputResolvers<ContextType>;
  CreatePaymentOrderOutput?: CreatePaymentOrderOutputResolvers<ContextType>;
  CreateProductReviewOutput?: CreateProductReviewOutputResolvers<ContextType>;
  CreateVaultCardPaymentTokenOutput?: CreateVaultCardPaymentTokenOutputResolvers<ContextType>;
  CreateVaultCardSetupTokenOutput?: CreateVaultCardSetupTokenOutputResolvers<ContextType>;
  CreditMemo?: CreditMemoResolvers<ContextType>;
  CreditMemoItem?: CreditMemoItemResolvers<ContextType>;
  CreditMemoItemInterface?: CreditMemoItemInterfaceResolvers<ContextType>;
  CreditMemoTotal?: CreditMemoTotalResolvers<ContextType>;
  Currency?: CurrencyResolvers<ContextType>;
  Custom?: CustomResolvers<ContextType>;
  CustomAttributeMetadata?: CustomAttributeMetadataResolvers<ContextType>;
  CustomAttributeMetadataInterface?: CustomAttributeMetadataInterfaceResolvers<ContextType>;
  CustomAttributeOptionInterface?: CustomAttributeOptionInterfaceResolvers<ContextType>;
  CustomBlock?: CustomBlockResolvers<ContextType>;
  Customer?: CustomerResolvers<ContextType>;
  CustomerAddress?: CustomerAddressResolvers<ContextType>;
  CustomerAddressAttribute?: CustomerAddressAttributeResolvers<ContextType>;
  CustomerAddressRegion?: CustomerAddressRegionResolvers<ContextType>;
  CustomerAttributeMetadata?: CustomerAttributeMetadataResolvers<ContextType>;
  CustomerDownloadableProduct?: CustomerDownloadableProductResolvers<ContextType>;
  CustomerDownloadableProducts?: CustomerDownloadableProductsResolvers<ContextType>;
  CustomerFeedbackOutput?: CustomerFeedbackOutputResolvers<ContextType>;
  CustomerOrder?: CustomerOrderResolvers<ContextType>;
  CustomerOrders?: CustomerOrdersResolvers<ContextType>;
  CustomerOutput?: CustomerOutputResolvers<ContextType>;
  CustomerPaymentTokens?: CustomerPaymentTokensResolvers<ContextType>;
  CustomerToken?: CustomerTokenResolvers<ContextType>;
  CustomizableAreaOption?: CustomizableAreaOptionResolvers<ContextType>;
  CustomizableAreaValue?: CustomizableAreaValueResolvers<ContextType>;
  CustomizableCheckboxOption?: CustomizableCheckboxOptionResolvers<ContextType>;
  CustomizableCheckboxValue?: CustomizableCheckboxValueResolvers<ContextType>;
  CustomizableDateOption?: CustomizableDateOptionResolvers<ContextType>;
  CustomizableDateValue?: CustomizableDateValueResolvers<ContextType>;
  CustomizableDropDownOption?: CustomizableDropDownOptionResolvers<ContextType>;
  CustomizableDropDownValue?: CustomizableDropDownValueResolvers<ContextType>;
  CustomizableFieldOption?: CustomizableFieldOptionResolvers<ContextType>;
  CustomizableFieldValue?: CustomizableFieldValueResolvers<ContextType>;
  CustomizableFileOption?: CustomizableFileOptionResolvers<ContextType>;
  CustomizableFileValue?: CustomizableFileValueResolvers<ContextType>;
  CustomizableMultipleOption?: CustomizableMultipleOptionResolvers<ContextType>;
  CustomizableMultipleValue?: CustomizableMultipleValueResolvers<ContextType>;
  CustomizableOptionInterface?: CustomizableOptionInterfaceResolvers<ContextType>;
  CustomizableProductInterface?: CustomizableProductInterfaceResolvers<ContextType>;
  CustomizableRadioOption?: CustomizableRadioOptionResolvers<ContextType>;
  CustomizableRadioValue?: CustomizableRadioValueResolvers<ContextType>;
  DeleteCompareListOutput?: DeleteCompareListOutputResolvers<ContextType>;
  DeletePaymentTokenOutput?: DeletePaymentTokenOutputResolvers<ContextType>;
  DetailedSummary?: DetailedSummaryResolvers<ContextType>;
  Discount?: DiscountResolvers<ContextType>;
  DownloadableCartItem?: DownloadableCartItemResolvers<ContextType>;
  DownloadableCreditMemoItem?: DownloadableCreditMemoItemResolvers<ContextType>;
  DownloadableInvoiceItem?: DownloadableInvoiceItemResolvers<ContextType>;
  DownloadableItemsLinks?: DownloadableItemsLinksResolvers<ContextType>;
  DownloadableOrderItem?: DownloadableOrderItemResolvers<ContextType>;
  DownloadableProduct?: DownloadableProductResolvers<ContextType>;
  DownloadableProductLinks?: DownloadableProductLinksResolvers<ContextType>;
  DownloadableProductSamples?: DownloadableProductSamplesResolvers<ContextType>;
  DownloadableWishlistItem?: DownloadableWishlistItemResolvers<ContextType>;
  Emirates?: EmiratesResolvers<ContextType>;
  EntityUrl?: EntityUrlResolvers<ContextType>;
  ErrorInterface?: ErrorInterfaceResolvers<ContextType>;
  EstimateTotalsOutput?: EstimateTotalsOutputResolvers<ContextType>;
  ExchangeRate?: ExchangeRateResolvers<ContextType>;
  ExcludedPages?: ExcludedPagesResolvers<ContextType>;
  FacetData?: FacetDataResolvers<ContextType>;
  FacetValues?: FacetValuesResolvers<ContextType>;
  FeaturedBrandsBlock?: FeaturedBrandsBlockResolvers<ContextType>;
  FixedProductTax?: FixedProductTaxResolvers<ContextType>;
  FooterMenu?: FooterMenuResolvers<ContextType>;
  GTMCodeOutput?: GtmCodeOutputResolvers<ContextType>;
  GTMHeadOutput?: GtmHeadOutputResolvers<ContextType>;
  General?: GeneralResolvers<ContextType>;
  GeneralConfig?: GeneralConfigResolvers<ContextType>;
  GenerateCustomerTokenAsAdminOutput?: GenerateCustomerTokenAsAdminOutputResolvers<ContextType>;
  GetPaymentSDKOutput?: GetPaymentSdkOutputResolvers<ContextType>;
  GiftMessage?: GiftMessageResolvers<ContextType>;
  GooglePayButtonStyles?: GooglePayButtonStylesResolvers<ContextType>;
  GooglePayConfig?: GooglePayConfigResolvers<ContextType>;
  GroupedProduct?: GroupedProductResolvers<ContextType>;
  GroupedProductItem?: GroupedProductItemResolvers<ContextType>;
  GroupedProductWishlistItem?: GroupedProductWishlistItemResolvers<ContextType>;
  HeaderMenu?: HeaderMenuResolvers<ContextType>;
  HomePage?: HomePageResolvers<ContextType>;
  HostedFieldsConfig?: HostedFieldsConfigResolvers<ContextType>;
  HostedProUrl?: HostedProUrlResolvers<ContextType>;
  HotRequestOutput?: HotRequestOutputResolvers<ContextType>;
  HttpQueryParameter?: HttpQueryParameterResolvers<ContextType>;
  Icon?: IconResolvers<ContextType>;
  ImageSwatchData?: ImageSwatchDataResolvers<ContextType>;
  Images?: ImagesResolvers<ContextType>;
  InternalError?: InternalErrorResolvers<ContextType>;
  Invoice?: InvoiceResolvers<ContextType>;
  InvoiceItem?: InvoiceItemResolvers<ContextType>;
  InvoiceItemInterface?: InvoiceItemInterfaceResolvers<ContextType>;
  InvoiceTotal?: InvoiceTotalResolvers<ContextType>;
  IsEmailAvailableOutput?: IsEmailAvailableOutputResolvers<ContextType>;
  ItemSelectedBundleOption?: ItemSelectedBundleOptionResolvers<ContextType>;
  ItemSelectedBundleOptionValue?: ItemSelectedBundleOptionValueResolvers<ContextType>;
  Items?: ItemsResolvers<ContextType>;
  KeyValue?: KeyValueResolvers<ContextType>;
  LabelRules?: LabelRulesResolvers<ContextType>;
  LabelRulesOutput?: LabelRulesOutputResolvers<ContextType>;
  LatLng?: LatLngResolvers<ContextType>;
  LayerFilter?: LayerFilterResolvers<ContextType>;
  LayerFilterItem?: LayerFilterItemResolvers<ContextType>;
  LayerFilterItemInterface?: LayerFilterItemInterfaceResolvers<ContextType>;
  LikesOutput?: LikesOutputResolvers<ContextType>;
  LinkItems?: LinkItemsResolvers<ContextType>;
  MapArea?: MapAreaResolvers<ContextType>;
  MapPinAddress?: MapPinAddressResolvers<ContextType>;
  MappedImage?: MappedImageResolvers<ContextType>;
  MediaGalleryEntry?: MediaGalleryEntryResolvers<ContextType>;
  MediaGalleryInterface?: MediaGalleryInterfaceResolvers<ContextType>;
  Megamenu?: MegamenuResolvers<ContextType>;
  Menu?: MenuResolvers<ContextType>;
  MenuLink?: MenuLinkResolvers<ContextType>;
  MessageStyleLogo?: MessageStyleLogoResolvers<ContextType>;
  MessageStyles?: MessageStylesResolvers<ContextType>;
  MobileCreateCustomerAccountOutput?: MobileCreateCustomerAccountOutputResolvers<ContextType>;
  Money?: MoneyResolvers<ContextType>;
  MonthlyArchive?: MonthlyArchiveResolvers<ContextType>;
  MonthlyArchiveOutput?: MonthlyArchiveOutputResolvers<ContextType>;
  MpRewardCustomersOutput?: MpRewardCustomersOutputResolvers<ContextType>;
  MpRewardInvitations?: MpRewardInvitationsResolvers<ContextType>;
  MpRewardInvitationsOutput?: MpRewardInvitationsOutputResolvers<ContextType>;
  MpRewardPointsOutput?: MpRewardPointsOutputResolvers<ContextType>;
  MpRewardRateOutput?: MpRewardRateOutputResolvers<ContextType>;
  MpRewardTransactionsListOutput?: MpRewardTransactionsListOutputResolvers<ContextType>;
  MpRewardTransactionsOutput?: MpRewardTransactionsOutputResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  NoSuchEntityUidError?: NoSuchEntityUidErrorResolvers<ContextType>;
  Order?: OrderResolvers<ContextType>;
  OrderAddress?: OrderAddressResolvers<ContextType>;
  OrderItem?: OrderItemResolvers<ContextType>;
  OrderItemInterface?: OrderItemInterfaceResolvers<ContextType>;
  OrderItemOption?: OrderItemOptionResolvers<ContextType>;
  OrderNoteOutput?: OrderNoteOutputResolvers<ContextType>;
  OrderPaymentMethod?: OrderPaymentMethodResolvers<ContextType>;
  OrderRecord?: OrderRecordResolvers<ContextType>;
  OrderShipment?: OrderShipmentResolvers<ContextType>;
  OrderTotal?: OrderTotalResolvers<ContextType>;
  OtpRequestOutput?: OtpRequestOutputResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  PayflowLinkToken?: PayflowLinkTokenResolvers<ContextType>;
  PayflowProResponseOutput?: PayflowProResponseOutputResolvers<ContextType>;
  PayflowProToken?: PayflowProTokenResolvers<ContextType>;
  PaymentCommonConfig?: PaymentCommonConfigResolvers<ContextType>;
  PaymentConfigItem?: PaymentConfigItemResolvers<ContextType>;
  PaymentConfigOutput?: PaymentConfigOutputResolvers<ContextType>;
  PaymentOrderOutput?: PaymentOrderOutputResolvers<ContextType>;
  PaymentSDKParamsItem?: PaymentSdkParamsItemResolvers<ContextType>;
  PaymentSourceDetails?: PaymentSourceDetailsResolvers<ContextType>;
  PaymentSourceOutput?: PaymentSourceOutputResolvers<ContextType>;
  PaymentToken?: PaymentTokenResolvers<ContextType>;
  PaypalExpressToken?: PaypalExpressTokenResolvers<ContextType>;
  PaypalExpressTokenOutput?: PaypalExpressTokenOutputResolvers<ContextType>;
  PaypalExpressUrlList?: PaypalExpressUrlListResolvers<ContextType>;
  PhysicalProductInterface?: PhysicalProductInterfaceResolvers<ContextType>;
  PickupLocation?: PickupLocationResolvers<ContextType>;
  PickupLocations?: PickupLocationsResolvers<ContextType>;
  PlaceOrderError?: PlaceOrderErrorResolvers<ContextType>;
  PlaceOrderOutput?: PlaceOrderOutputResolvers<ContextType>;
  PopUp?: PopUpResolvers<ContextType>;
  Post?: PostResolvers<ContextType>;
  PostsOutput?: PostsOutputResolvers<ContextType>;
  PostsOutputNoPage?: PostsOutputNoPageResolvers<ContextType>;
  Price?: PriceResolvers<ContextType>;
  PriceAdjustment?: PriceAdjustmentResolvers<ContextType>;
  PriceDetails?: PriceDetailsResolvers<ContextType>;
  PriceRange?: PriceRangeResolvers<ContextType>;
  Product?: ProductResolvers<ContextType>;
  ProductAlertUnsubscribeOutput?: ProductAlertUnsubscribeOutputResolvers<ContextType>;
  ProductAttribute?: ProductAttributeResolvers<ContextType>;
  ProductBlock?: ProductBlockResolvers<ContextType>;
  ProductConfig?: ProductConfigResolvers<ContextType>;
  ProductCustomAttributes?: ProductCustomAttributesResolvers<ContextType>;
  ProductDiscount?: ProductDiscountResolvers<ContextType>;
  ProductImage?: ProductImageResolvers<ContextType>;
  ProductInterface?: ProductInterfaceResolvers<ContextType>;
  ProductInventory?: ProductInventoryResolvers<ContextType>;
  ProductItems?: ProductItemsResolvers<ContextType>;
  ProductLinks?: ProductLinksResolvers<ContextType>;
  ProductLinksInterface?: ProductLinksInterfaceResolvers<ContextType>;
  ProductMediaGalleryEntriesContent?: ProductMediaGalleryEntriesContentResolvers<ContextType>;
  ProductMediaGalleryEntriesVideoContent?: ProductMediaGalleryEntriesVideoContentResolvers<ContextType>;
  ProductPrice?: ProductPriceResolvers<ContextType>;
  ProductPrices?: ProductPricesResolvers<ContextType>;
  ProductReview?: ProductReviewResolvers<ContextType>;
  ProductReviewRating?: ProductReviewRatingResolvers<ContextType>;
  ProductReviewRatingMetadata?: ProductReviewRatingMetadataResolvers<ContextType>;
  ProductReviewRatingValueMetadata?: ProductReviewRatingValueMetadataResolvers<ContextType>;
  ProductReviewRatingsMetadata?: ProductReviewRatingsMetadataResolvers<ContextType>;
  ProductReviews?: ProductReviewsResolvers<ContextType>;
  ProductTierPrices?: ProductTierPricesResolvers<ContextType>;
  ProductVideo?: ProductVideoResolvers<ContextType>;
  ProductViewReportOutput?: ProductViewReportOutputResolvers<ContextType>;
  Products?: ProductsResolvers<ContextType>;
  ProductsOutput?: ProductsOutputResolvers<ContextType>;
  ProductsOutputNoPage?: ProductsOutputNoPageResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Rating?: RatingResolvers<ContextType>;
  RatingOption?: RatingOptionResolvers<ContextType>;
  RatingVote?: RatingVoteResolvers<ContextType>;
  ReCaptchaConfigurationV3?: ReCaptchaConfigurationV3Resolvers<ContextType>;
  RecentViewProducts?: RecentViewProductsResolvers<ContextType>;
  Region?: RegionResolvers<ContextType>;
  RemoveCouponFromCartOutput?: RemoveCouponFromCartOutputResolvers<ContextType>;
  RemoveItemFromCartOutput?: RemoveItemFromCartOutputResolvers<ContextType>;
  RemoveProductsFromWishlistOutput?: RemoveProductsFromWishlistOutputResolvers<ContextType>;
  ReorderItemsOutput?: ReorderItemsOutputResolvers<ContextType>;
  Response?: ResponseResolvers<ContextType>;
  ResultPage?: ResultPageResolvers<ContextType>;
  Review?: ReviewResolvers<ContextType>;
  ReviewFilter?: ReviewFilterResolvers<ContextType>;
  ReviewOrder?: ReviewOrderResolvers<ContextType>;
  ReviewSource?: ReviewSourceResolvers<ContextType>;
  ReviewsData?: ReviewsDataResolvers<ContextType>;
  RevokeCustomerTokenOutput?: RevokeCustomerTokenOutputResolvers<ContextType>;
  RewardConfig?: RewardConfigResolvers<ContextType>;
  RewardEarning?: RewardEarningResolvers<ContextType>;
  RewardExchangeRate?: RewardExchangeRateResolvers<ContextType>;
  RoutableInterface?: RoutableInterfaceResolvers<ContextType>;
  RoutableUrl?: RoutableUrlResolvers<ContextType>;
  SDKParams?: SdkParamsResolvers<ContextType>;
  SaleEarnConfigs?: SaleEarnConfigsResolvers<ContextType>;
  SalesCommentItem?: SalesCommentItemResolvers<ContextType>;
  SalesItemInterface?: SalesItemInterfaceResolvers<ContextType>;
  SalesOrder?: SalesOrderResolvers<ContextType>;
  SalesOrderCollection?: SalesOrderCollectionResolvers<ContextType>;
  SearchAttributes?: SearchAttributesResolvers<ContextType>;
  SearchConfig?: SearchConfigResolvers<ContextType>;
  SearchFilters?: SearchFiltersResolvers<ContextType>;
  SearchResultPageInfo?: SearchResultPageInfoResolvers<ContextType>;
  SearchSuggestion?: SearchSuggestionResolvers<ContextType>;
  SelectedBundleOption?: SelectedBundleOptionResolvers<ContextType>;
  SelectedBundleOptionValue?: SelectedBundleOptionValueResolvers<ContextType>;
  SelectedConfigurableOption?: SelectedConfigurableOptionResolvers<ContextType>;
  SelectedCustomizableOption?: SelectedCustomizableOptionResolvers<ContextType>;
  SelectedCustomizableOptionValue?: SelectedCustomizableOptionValueResolvers<ContextType>;
  SelectedPaymentMethod?: SelectedPaymentMethodResolvers<ContextType>;
  SelectedShippingMethod?: SelectedShippingMethodResolvers<ContextType>;
  SemanticSearch?: SemanticSearchResolvers<ContextType>;
  SendEmailToFriendOutput?: SendEmailToFriendOutputResolvers<ContextType>;
  SendEmailToFriendRecipient?: SendEmailToFriendRecipientResolvers<ContextType>;
  SendEmailToFriendSender?: SendEmailToFriendSenderResolvers<ContextType>;
  SendFriendConfiguration?: SendFriendConfigurationResolvers<ContextType>;
  Seo?: SeoResolvers<ContextType>;
  SeoDetails?: SeoDetailsResolvers<ContextType>;
  SetBillingAddressOnCartOutput?: SetBillingAddressOnCartOutputResolvers<ContextType>;
  SetGuestEmailOnCartOutput?: SetGuestEmailOnCartOutputResolvers<ContextType>;
  SetPaymentMethodOnCartOutput?: SetPaymentMethodOnCartOutputResolvers<ContextType>;
  SetShippingAddressesOnCartOutput?: SetShippingAddressesOnCartOutputResolvers<ContextType>;
  SetShippingMethodsOnCartOutput?: SetShippingMethodsOnCartOutputResolvers<ContextType>;
  ShipmentItem?: ShipmentItemResolvers<ContextType>;
  ShipmentItemInterface?: ShipmentItemInterfaceResolvers<ContextType>;
  ShipmentTracking?: ShipmentTrackingResolvers<ContextType>;
  Shipping?: ShippingResolvers<ContextType>;
  ShippingCartAddress?: ShippingCartAddressResolvers<ContextType>;
  ShippingDiscount?: ShippingDiscountResolvers<ContextType>;
  ShippingHandling?: ShippingHandlingResolvers<ContextType>;
  Sidebar?: SidebarResolvers<ContextType>;
  SimpleCartItem?: SimpleCartItemResolvers<ContextType>;
  SimpleProduct?: SimpleProductResolvers<ContextType>;
  SimpleWishlistItem?: SimpleWishlistItemResolvers<ContextType>;
  Slider?: SliderResolvers<ContextType>;
  SliderBlock?: SliderBlockResolvers<ContextType>;
  SmartButtonsConfig?: SmartButtonsConfigResolvers<ContextType>;
  SmtpBestsellersOutput?: SmtpBestsellersOutputResolvers<ContextType>;
  SortField?: SortFieldResolvers<ContextType>;
  SortFields?: SortFieldsResolvers<ContextType>;
  SortOption?: SortOptionResolvers<ContextType>;
  SpendingConfiguration?: SpendingConfigurationResolvers<ContextType>;
  SpendingRules?: SpendingRulesResolvers<ContextType>;
  StoreConfig?: StoreConfigResolvers<ContextType>;
  StoreLocation?: StoreLocationResolvers<ContextType>;
  StorefrontProperties?: StorefrontPropertiesResolvers<ContextType>;
  SubscribeEmailToNewsletterOutput?: SubscribeEmailToNewsletterOutputResolvers<ContextType>;
  SwatchData?: SwatchDataResolvers<ContextType>;
  SwatchDataInterface?: SwatchDataInterfaceResolvers<ContextType>;
  SwatchLayerFilterItem?: SwatchLayerFilterItemResolvers<ContextType>;
  SwatchLayerFilterItemInterface?: SwatchLayerFilterItemInterfaceResolvers<ContextType>;
  Tag?: TagResolvers<ContextType>;
  TaggedImageBlock?: TaggedImageBlockResolvers<ContextType>;
  TagsOutput?: TagsOutputResolvers<ContextType>;
  TagsOutputNoPage?: TagsOutputNoPageResolvers<ContextType>;
  TaxItem?: TaxItemResolvers<ContextType>;
  Testimonial?: TestimonialResolvers<ContextType>;
  TestimonialBlock?: TestimonialBlockResolvers<ContextType>;
  TextSwatchData?: TextSwatchDataResolvers<ContextType>;
  TierPrice?: TierPriceResolvers<ContextType>;
  Topic?: TopicResolvers<ContextType>;
  TopicsOutput?: TopicsOutputResolvers<ContextType>;
  TopicsOutputNoPage?: TopicsOutputNoPageResolvers<ContextType>;
  TotalSegmentsOutput?: TotalSegmentsOutputResolvers<ContextType>;
  TypeTolernace?: TypeTolernaceResolvers<ContextType>;
  TypeseSenseSystemConfig?: TypeseSenseSystemConfigResolvers<ContextType>;
  TypesenseConfig?: TypesenseConfigResolvers<ContextType>;
  UpdateCartItemsOutput?: UpdateCartItemsOutputResolvers<ContextType>;
  UpdateProductsInWishlistOutput?: UpdateProductsInWishlistOutputResolvers<ContextType>;
  UrlRewrite?: UrlRewriteResolvers<ContextType>;
  ValidationRule?: ValidationRuleResolvers<ContextType>;
  VaultConfigOutput?: VaultConfigOutputResolvers<ContextType>;
  VaultCreditCardConfig?: VaultCreditCardConfigResolvers<ContextType>;
  ViewAllProducts?: ViewAllProductsResolvers<ContextType>;
  VirtualCartItem?: VirtualCartItemResolvers<ContextType>;
  VirtualProduct?: VirtualProductResolvers<ContextType>;
  VirtualWishlistItem?: VirtualWishlistItemResolvers<ContextType>;
  Website?: WebsiteResolvers<ContextType>;
  WholeSalerCustomerAccountOutput?: WholeSalerCustomerAccountOutputResolvers<ContextType>;
  WishListUserInputError?: WishListUserInputErrorResolvers<ContextType>;
  Wishlist?: WishlistResolvers<ContextType>;
  WishlistCartUserInputError?: WishlistCartUserInputErrorResolvers<ContextType>;
  WishlistData?: WishlistDataResolvers<ContextType>;
  WishlistItem?: WishlistItemResolvers<ContextType>;
  WishlistItemInterface?: WishlistItemInterfaceResolvers<ContextType>;
  WishlistItems?: WishlistItemsResolvers<ContextType>;
  WishlistOutput?: WishlistOutputResolvers<ContextType>;
  displayConfig?: DisplayConfigResolvers<ContextType>;
  earningConfig?: EarningConfigResolvers<ContextType>;
  generalConfig?: GeneralConfigResolvers<ContextType>;
  spendingConfig?: SpendingConfigResolvers<ContextType>;
};

